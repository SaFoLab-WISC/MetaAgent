{"task_id": "HumanEval/6", "solution": "\nfrom typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    def max_nesting_level(group: str) -> int:\n        current_level = 0\n        max_level = 0\n        for char in group:\n            if char == '(':\n                current_level += 1\n                if current_level > max_level:\n                    max_level = current_level\n            elif char == ')':\n                current_level -= 1\n        return max_level\n\n    if not isinstance(paren_string, str):\n        raise ValueError(\"Input must be a string\")\n    \n    groups = paren_string.split()\n    return [max_nesting_level(group) for group in groups]\n\n# Test cases\nprint(parse_nested_parens('(()()) ((())) () ((())()())'))  # [2, 3, 1, 3]\nprint(parse_nested_parens(''))  # []\nprint(parse_nested_parens(' '))  # []\nprint(parse_nested_parens('abc def'))  # [0, 0]\nprint(parse_nested_parens('((())()) (())() (())'))  # [3, 2, 2]\nprint(parse_nested_parens('((())()) (())() (()) ('))  # [3, 2, 2, 1]\ntry:\n    print(parse_nested_parens(123))  # Should raise ValueError\nexcept ValueError as e:\n    print(e)  # \"Input must be a string\"\n"}
{"task_id": "HumanEval/5", "solution": "\nfrom typing import List, Union\n\ndef intersperse(numbers: List[Union[int, float]], delimiter: Union[int, float]) -> List[Union[int, float]]:\n    \"\"\" Insert a number 'delimiter' between every two consecutive elements of input list `numbers`\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    >>> intersperse([1], 4)\n    [1]\n    >>> intersperse([1, 2, 3], 4.5)\n    [1, 4.5, 2, 4.5, 3]\n    >>> intersperse([1.1, 2.2, 3.3], 4)\n    [1.1, 4, 2.2, 4, 3.3]\n    >>> intersperse([-1, -2, -3], 0)\n    [-1, 0, -2, 0, -3]\n    \"\"\"\n    if not numbers:\n        return []\n    \n    if len(numbers) == 1:\n        return numbers\n    \n    result = []\n    for i in range(len(numbers) - 1):\n        result.append(numbers[i])\n        result.append(delimiter)\n    result.append(numbers[-1])\n    \n    return result\n"}
{"task_id": "HumanEval/7", "solution": "\nfrom typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], '')\n    ['abc', 'bacd', 'cde', 'array']\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array', 123, None], 'a')\n    ['abc', 'bacd', 'array']\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'A')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a!')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array!'], '!')\n    ['array!']\n    \"\"\"\n    return [s for s in strings if isinstance(s, str) and substring in s]\n"}
{"task_id": "HumanEval/11", "solution": " def string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    # Check if inputs are strings\n    if not isinstance(a, str) or not isinstance(b, str):\n        raise ValueError(\"Both inputs must be strings.\")\n    \n    # Check if inputs contain only '0' and '1'\n    if not all(c in '01' for c in a) or not all(c in '01' for c in b):\n        raise ValueError(\"Inputs must contain only '0' and '1'.\")\n    \n    # Handle different lengths by padding the shorter string with '0's\n    max_len = max(len(a), len(b))\n    a = a.zfill(max_len)\n    b = b.zfill(max_len)\n    \n    result = []\n    for bit_a, bit_b in zip(a, b):\n        result.append(str(int(bit_a) ^ int(bit_b)))\n    return ''.join(result)\n\n# Test cases to validate the function\ntest_results = []\n\ntry:\n    test_results.append(string_xor('010', '110') == '100')\n    test_results.append(string_xor('1', '0') == '1')\n    test_results.append(string_xor('1010', '0101') == '1111')\n    test_results.append(string_xor('101', '1') == '100')\n    test_results.append(string_xor('', '110') == '110')\n    test_results.append(string_xor('110', '') == '110')\n    test_results.append(string_xor('', '') == '')\n\n    try:\n        string_xor('101', 'abc')\n    except ValueError as e:\n        test_results.append(str(e) == \"Inputs must contain only '0' and '1'.\")\n\n    try:\n        string_xor(101, '110')\n    except ValueError as e:\n        test_results.append(str(e) == \"Both inputs must be strings.\")\nexcept Exception as e:\n    test_results.append(False)\n\nprint(test_results)\n"}
{"task_id": "HumanEval/2", "solution": "\ndef truncate_number(number) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    an integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    >>> truncate_number(-3.5)\n    -0.5\n    >>> truncate_number(0)\n    0.0\n    >>> truncate_number(5)\n    0.0\n    >>> truncate_number(\"3.5\")\n    Traceback (most recent call last):\n        ...\n    TypeError: Input must be a float or an integer\n    >>> truncate_number(1e10 + 0.123456789)\n    0.123456789\n    >>> truncate_number(1e-10)\n    1e-10\n    \"\"\"\n    if not isinstance(number, (float, int)):\n        raise TypeError(\"Input must be a float or an integer\")\n    \n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part\n\n# Test cases\nprint(truncate_number(3.5))          # Expected: 0.5\nprint(truncate_number(-3.5))         # Expected: -0.5\nprint(truncate_number(0))            # Expected: 0.0\nprint(truncate_number(5))            # Expected: 0.0\ntry:\n    print(truncate_number(\"3.5\"))    # Expected: TypeError\nexcept TypeError as e:\n    print(e)\nprint(truncate_number(1e10 + 0.123456789))  # Expected: 0.123456789\nprint(truncate_number(1e-10))        # Expected: 1e-10\n"}
{"task_id": "HumanEval/3", "solution": "\nfrom typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    if not all(isinstance(op, int) for op in operations):\n        raise ValueError(\"All operations must be integers\")\n    \n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n\n# Test cases to cover edge cases\nassert below_zero([]) == False, \"Test case 1 failed\"\nassert below_zero([1]) == False, \"Test case 2 failed\"\nassert below_zero([-1]) == True, \"Test case 3 failed\"\nassert below_zero([1, 2, 3]) == False, \"Test case 4 failed\"\nassert below_zero([1, 2, -4, 5]) == True, \"Test case 5 failed\"\nassert below_zero([1000000000, -1000000001]) == True, \"Test case 6 failed\"\nassert below_zero([1000000000, -999999999]) == False, \"Test case 7 failed\"\nassert below_zero([1, 2, 3, 4, 5]) == False, \"Test case 8 failed\"\nassert below_zero([-1, -2, -3, -4, -5]) == True, \"Test case 9 failed\"\n\ntry:\n    below_zero([1, 2, 'a'])\nexcept ValueError as e:\n    assert str(e) == \"All operations must be integers\", \"Test case 10 failed\"\n\nprint(\"All test cases passed!\")\n"}
{"task_id": "HumanEval/8", "solution": "\nfrom typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    if not all(isinstance(num, int) for num in numbers):\n        raise ValueError(\"All elements in the list must be integers.\")\n    \n    total_sum = sum(numbers)\n    total_product = 1\n    for num in numbers:\n        total_product *= num\n    return (total_sum, total_product)\n\n# Test cases\nprint(sum_product([]))  # (0, 1)\nprint(sum_product([1]))  # (1, 1)\nprint(sum_product([1, 2, 3, 4]))  # (10, 24)\nprint(sum_product([-1, -2, -3, -4]))  # (-10, 24)\nprint(sum_product([0, 1, 2, 3]))  # (6, 0)\ntry:\n    print(sum_product([1, 2, '3', 4]))  # Should raise ValueError\nexcept ValueError as e:\n    print(e)\ntry:\n    print(sum_product([1.5, 2, 3, 4]))  # Should raise ValueError\nexcept ValueError as e:\n    print(e)\nprint(sum_product([10**6, 10**6]))  # (2000000, 1000000000000)\n<execute>"}
{"task_id": "HumanEval/9", "solution": "\nfrom typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    if not numbers:\n        return []\n    \n    max_list = []\n    current_max = float('-inf')\n    \n    for num in numbers:\n        if not isinstance(num, int):\n            raise ValueError(\"All elements in the list must be integers\")\n        current_max = max(current_max, num)\n        max_list.append(current_max)\n    \n    return max_list\n\n# Test cases\nassert rolling_max([]) == []\nassert rolling_max([5]) == [5]\nassert rolling_max([2, 2, 2, 2]) == [2, 2, 2, 2]\nassert rolling_max([-1, -2, -3, -2, -1]) == [-1, -1, -1, -1, -1]\nassert rolling_max([1, -1, 2, -2, 3, -3]) == [1, 1, 2, 2, 3, 3]\n\ntry:\n    rolling_max([1, 'a', 3])\nexcept ValueError as e:\n    assert str(e) == \"All elements in the list must be integers\"\n\nprint(\"All test cases passed!\")\n"}
{"task_id": "HumanEval/1", "solution": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    if not isinstance(paren_string, str):\n        raise ValueError(\"Input must be a string\")\n    \n    # Remove spaces from the input string\n    paren_string = paren_string.replace(\" \", \"\")\n    \n    result = []\n    temp = \"\"\n    balance = 0\n    \n    for char in paren_string:\n        temp += char\n        if char == '(':\n            balance += 1\n        elif char == ')':\n            balance -= 1\n        \n        if balance == 0 and temp:\n            result.append(temp)\n            temp = \"\"\n    \n    return result\n\n"}
{"task_id": "HumanEval/0", "solution": "\nfrom typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    >>> has_close_elements([], 0.5)\n    False\n    >>> has_close_elements([1.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.0, 3.0], -0.5)\n    False\n    >>> has_close_elements([1.0, 2.0, 'a'], 0.5)\n    Traceback (most recent call last):\n        ...\n    TypeError: List elements must be floats\n    >>> has_close_elements([1e10, 1e10 + 1e-10], 1e-9)\n    True\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.0)\n    False\n    \"\"\"\n    if not all(isinstance(x, (int, float)) for x in numbers):\n        raise TypeError(\"List elements must be floats\")\n    \n    if threshold < 0:\n        return False\n    \n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n\n# Test cases\ndef test_has_close_elements():\n    assert has_close_elements([1.0, 2.0, 3.0], 0.5) == False\n    assert has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) == True\n    assert has_close_elements([], 0.5) == False\n    assert has_close_elements([1.0], 0.5) == False\n    assert has_close_elements([1.0, 2.0, 3.0], -0.5) == False\n    try:\n        has_close_elements([1.0, 2.0, 'a'], 0.5)\n    except TypeError as e:\n        print(e)  # Expected output: List elements must be floats\n    assert has_close_elements([1e10, 1e10 + 1e-10], 1e-9) == True\n    assert has_close_elements([1.0, 2.0, 3.0], 0.0) == False\n\ntest_has_close_elements()\nprint(\"All tests passed.\")\n"}
{"task_id": "HumanEval/4", "solution": "\nfrom typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    if not numbers:\n        return 0.0\n    \n    # Check for non-numeric inputs\n    if not all(isinstance(x, (int, float)) for x in numbers):\n        raise TypeError(\"All elements in the list must be numeric (int or float).\")\n    \n    mean = sum(numbers) / len(numbers)\n    absolute_deviations = [abs(x - mean) for x in numbers]\n    mad = sum(absolute_deviations) / len(numbers)\n    \n    return mad\n\n# Test cases\ntest_results = []\n\n# Test case 1: Empty list\ntest_results.append(mean_absolute_deviation([]) == 0.0)\n\n# Test case 2: Single element list\ntest_results.append(mean_absolute_deviation([5.0]) == 0.0)\n\n# Test case 3: List with identical elements\ntest_results.append(mean_absolute_deviation([2.0, 2.0, 2.0]) == 0.0)\n\n# Test case 4: List with negative numbers\ntest_results.append(mean_absolute_deviation([-1.0, -2.0, -3.0, -4.0]) == 1.0)\n\n# Test case 5: List with mixed positive and negative numbers\ntest_results.append(mean_absolute_deviation([1.0, -1.0, 1.0, -1.0]) == 1.0)\n\n# Test case 6: List with integer inputs\ntest_results.append(mean_absolute_deviation([1, 2, 3, 4]) == 1.0)\n\n# Test case 7: List with non-numeric inputs\ntry:\n    mean_absolute_deviation([1, 'a', 3])\n    test_results.append(False)  # Should not reach here\nexcept TypeError as e:\n    test_results.append(str(e) == \"All elements in the list must be numeric (int or float).\")\n\nprint(test_results)\n"}
{"task_id": "HumanEval/13", "solution": "\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return the greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    >>> greatest_common_divisor(-25, 15)\n    5\n    >>> greatest_common_divisor(0, 15)\n    15\n    >>> greatest_common_divisor(25, 0)\n    25\n    >>> greatest_common_divisor(0, 0)\n    0\n    >>> greatest_common_divisor(25.5, 15)\n    Traceback (most recent call last):\n        ...\n    TypeError: Inputs must be integers\n    \"\"\"\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise TypeError(\"Inputs must be integers\")\n    \n    while b:\n        a, b = b, a % b\n    return abs(a)\n\n# Test cases to validate the function\ntest_results = []\n\ntest_results.append(greatest_common_divisor(3, 5) == 1)\ntest_results.append(greatest_common_divisor(25, 15) == 5)\ntest_results.append(greatest_common_divisor(-25, 15) == 5)\ntest_results.append(greatest_common_divisor(0, 15) == 15)\ntest_results.append(greatest_common_divisor(25, 0) == 25)\ntest_results.append(greatest_common_divisor(0, 0) == 0)\n\ntry:\n    greatest_common_divisor(25.5, 15)\nexcept TypeError as e:\n    test_results.append(str(e) == \"Inputs must be integers\")\n\nprint(test_results)\n"}
{"task_id": "HumanEval/14", "solution": "\nfrom typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    >>> all_prefixes('')\n    []\n    >>> all_prefixes('a')\n    ['a']\n    >>> all_prefixes('a b')\n    ['a', 'a ', 'a b']\n    >>> all_prefixes('!@#')\n    ['!', '!@', '!@#']\n    >>> all_prefixes(123)\n    Traceback (most recent call last):\n        ...\n    TypeError: Input must be a string\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input must be a string\")\n    \n    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes\n\n# Test cases\nprint(all_prefixes('abc'))  # ['a', 'ab', 'abc']\nprint(all_prefixes(''))  # []\nprint(all_prefixes('a'))  # ['a']\nprint(all_prefixes('a b'))  # ['a', 'a ', 'a b']\nprint(all_prefixes('!@#'))  # ['!', '!@', '!@#']\ntry:\n    print(all_prefixes(123))  # Should raise TypeError\nexcept TypeError as e:\n    print(e)\n"}
{"task_id": "HumanEval/10", "solution": "\nimport re\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    normalized_string = re.sub(r'[^a-zA-Z0-9]', '', string).lower()\n    return normalized_string == normalized_string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    >>> make_palindrome('a')\n    'a'\n    >>> make_palindrome('A man, a plan, a canal, Panama')\n    'A man, a plan, a canal, PanamA'\n    >>> make_palindrome('No lemon, no melon')\n    'No lemon, no melon'\n    >>> make_palindrome(123)\n    Traceback (most recent call last):\n        ...\n    TypeError: Input must be a string\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input must be a string\")\n    \n    if not string:\n        return ''\n    \n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    \n    return string  # This line should never be reached\n\n# Test cases\nprint(make_palindrome(''))  # ''\nprint(make_palindrome('cat'))  # 'catac'\nprint(make_palindrome('cata'))  # 'catac'\nprint(make_palindrome('a'))  # 'a'\nprint(make_palindrome('A man, a plan, a canal, Panama'))  # 'A man, a plan, a canal, PanamA'\nprint(make_palindrome('No lemon, no melon'))  # 'No lemon, no melon'\ntry:\n    print(make_palindrome(123))  # Should raise TypeError\nexcept TypeError as e:\n    print(e)\n"}
{"task_id": "HumanEval/15", "solution": "\ndef string_sequence(n) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 up to n inclusive.\n    If n is negative, return an empty string.\n    If n is not an integer, raise a ValueError.\n    \n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    >>> string_sequence(-1)\n    ''\n    >>> string_sequence(3.5)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input must be an integer\n    >>> string_sequence(\"5\")\n    Traceback (most recent call last):\n        ...\n    ValueError: Input must be an integer\n    \"\"\"\n    if not isinstance(n, int):\n        raise ValueError(\"Input must be an integer\")\n    if n < 0:\n        return ''\n    return ' '.join(str(i) for i in range(n + 1))\n\n# Test cases\nprint(string_sequence(0))  # '0'\nprint(string_sequence(5))  # '0 1 2 3 4 5'\nprint(string_sequence(-1))  # ''\ntry:\n    print(string_sequence(3.5))  # Should raise ValueError\nexcept ValueError as e:\n    print(e)  # \"Input must be an integer\"\ntry:\n    print(string_sequence(\"5\"))  # Should raise ValueError\nexcept ValueError as e:\n    print(e)  # \"Input must be an integer\"\n"}
{"task_id": "HumanEval/12", "solution": "\nfrom typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n    None\n    >>> longest(['a'])\n    'a'\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    >>> longest(['a', 'bb', 'cc'])\n    'bb'\n    >>> longest(['a', 1, 'ccc'])\n    'ccc'\n    >>> longest(['a', None, 'ccc'])\n    'ccc'\n    >>> longest(['a', 'bb', 3.14])\n    'bb'\n    \"\"\"\n    if not strings:\n        return None\n    \n    # Filter out non-string elements\n    strings = [s for s in strings if isinstance(s, str)]\n    \n    if not strings:\n        return None\n    \n    longest_string = strings[0]\n    for string in strings[1:]:\n        if len(string) > len(longest_string):\n            longest_string = string\n    \n    return longest_string\n\n# Test cases\ntest_cases = [\n    ([], None),\n    (['a'], 'a'),\n    (['a', 'b', 'c'], 'a'),\n    (['a', 'bb', 'ccc'], 'ccc'),\n    (['a', 'bb', 'cc'], 'bb'),\n    (['a', 1, 'ccc'], 'ccc'),\n    (['a', None, 'ccc'], 'ccc'),\n    (['a', 'bb', 3.14], 'bb'),\n    (['a', 'bb', 'ccc', 'dddd'], 'dddd'),\n    (['short', 'longer', 'longest'], 'longest'),\n    (['same', 'size', 'test'], 'same'),\n    (['', 'non-empty', ''], 'non-empty'),\n    (['123', '1234', '12'], '1234'),\n    (['a', 'ab', 'abc', 'abcd', 'abcde'], 'abcde')\n]\n\n# Running the test cases\nfor i, (input_data, expected) in enumerate(test_cases):\n    result = longest(input_data)\n    assert result == expected, f\"Test case {i+1} failed: input({input_data}) => output({result}), expected({expected})\"\nprint(\"All test cases passed!\")\n"}
{"task_id": "HumanEval/16", "solution": "\ndef count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    >>> count_distinct_characters('')\n    0\n    >>> count_distinct_characters('aaaa')\n    1\n    >>> count_distinct_characters('a!@#')\n    4\n    >>> count_distinct_characters('1234')\n    4\n    >>> count_distinct_characters(1234)\n    4\n    \"\"\"\n    if not isinstance(string, str):\n        string = str(string)\n    # Convert the string to lowercase\n    string = string.lower()\n    # Use a set to store unique characters\n    unique_characters = set(string)\n    # Return the size of the set\n    return len(unique_characters)\n\n# Test cases\nprint(count_distinct_characters('xyzXYZ'))  # Expected output: 3\nprint(count_distinct_characters('Jerry'))   # Expected output: 4\nprint(count_distinct_characters(''))        # Expected output: 0\nprint(count_distinct_characters('aaaa'))    # Expected output: 1\nprint(count_distinct_characters('a!@#'))    # Expected output: 4\nprint(count_distinct_characters('1234'))    # Expected output: 4\nprint(count_distinct_characters(1234))      # Expected output: 4\n"}
{"task_id": "HumanEval/17", "solution": "\nfrom typing import List, Union\n\ndef parse_music(music_string: Union[str, None]) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    note last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quarter note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    if not isinstance(music_string, str):\n        raise ValueError(\"Input must be a string\")\n    \n    note_to_beats = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    \n    if music_string == \"\":\n        return []\n    \n    notes = music_string.split()\n    beats = []\n    \n    for note in notes:\n        if note in note_to_beats:\n            beats.append(note_to_beats[note])\n        else:\n            raise ValueError(f\"Invalid note: {note}\")\n    \n    return beats\n\n# Test cases to validate the function\nprint(parse_music('o o| .| o| o| .| .| .| .| o o'))  # [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nprint(parse_music(''))  # []\ntry:\n    print(parse_music('o o| .| x| o| .|'))  # Should raise ValueError\nexcept ValueError as e:\n    print(e)\ntry:\n    print(parse_music(None))  # Should raise ValueError\nexcept ValueError as e:\n    print(e)\ntry:\n    print(parse_music(123))  # Should raise ValueError\nexcept ValueError as e:\n    print(e)\n"}
{"task_id": "HumanEval/19", "solution": "\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numerals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    if not isinstance(numbers, str):\n        raise ValueError(\"Input must be a string\")\n    \n    num_dict = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    \n    words = numbers.lower().split()\n    valid_words = [word for word in words if word in num_dict]\n    \n    if not valid_words:\n        return \"\"\n    \n    sorted_words = sorted(valid_words, key=lambda word: num_dict[word])\n    return ' '.join(sorted_words)\n\n# Test cases to validate the function\nprint(sort_numbers('three one five'))  # Expected: 'one three five'\nprint(sort_numbers(''))  # Expected: ''\nprint(sort_numbers('three one five ten'))  # Expected: 'one three five'\nprint(sort_numbers('Three ONE Five'))  # Expected: 'one three five'\nprint(sort_numbers('  three   one five  '))  # Expected: 'one three five'\ntry:\n    print(sort_numbers(123))  # Expected: ValueError: Input must be a string\nexcept ValueError as e:\n    print(e)\n"}
{"task_id": "HumanEval/22", "solution": "\nfrom typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any  values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int) and not isinstance(value, bool)]\n\ndef test_filter_integers():\n    # Test with an empty list\n    assert filter_integers([]) == []\n\n    # Test with nested lists\n    assert filter_integers([1, [2, 3], 4]) == [1, 4]\n\n    # Test with negative integers\n    assert filter_integers([-1, -2, 3, 4]) == [-1, -2, 3, 4]\n\n    # Test with boolean values\n    assert filter_integers([True, False, 1, 0]) == [1, 0]\n\n    # Test with large integers\n    assert filter_integers([999999999999, -999999999999]) == [999999999999, -999999999999]\n\n    # Test with non-integer numeric types\n    assert filter_integers([1.0, 2.5, 3+4j, 4]) == [4]\n\n    # Test with special values\n    assert filter_integers([None, float('nan'), float('inf'), 5]) == [5]\n\n    print(\"All tests passed.\")\n\ntest_filter_integers()\n"}
{"task_id": "HumanEval/21", "solution": "\nfrom typing import List, Union\n\ndef rescale_to_unit(numbers: List[Union[int, float]]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    if not numbers:\n        raise ValueError(\"The list is empty.\")\n    \n    if len(numbers) == 1:\n        return [0.0]\n    \n    if not all(isinstance(num, (int, float)) for num in numbers):\n        raise ValueError(\"All elements in the list must be numeric.\")\n    \n    min_val = min(numbers)\n    max_val = max(numbers)\n    \n    if min_val == max_val:\n        return [0.0 for _ in numbers]\n    \n    return [(num - min_val) / (max_val - min_val) for num in numbers]\n\n# Test cases to validate the function\nprint(rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]))  # [0.0, 0.25, 0.5, 0.75, 1.0]\nprint(rescale_to_unit([5.0, 5.0, 5.0]))  # [0.0, 0.0, 0.0]\nprint(rescale_to_unit([-1.0, 0.0, 1.0]))  # [0.0, 0.5, 1.0]\nprint(rescale_to_unit([1]))  # [0.0]\ntry:\n    print(rescale_to_unit([]))  # Should raise ValueError\nexcept ValueError as e:\n    print(e)\ntry:\n    print(rescale_to_unit([1, 'a', 3]))  # Should raise ValueError\nexcept ValueError as e:\n    print(e)\n"}
{"task_id": "HumanEval/23", "solution": "\ndef strlen(string) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    >>> strlen('你好')\n    2\n    >>> strlen(None)\n    Traceback (most recent call last):\n        ...\n    TypeError: Input must be a string\n    >>> strlen(123)\n    Traceback (most recent call last):\n        ...\n    TypeError: Input must be a string\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input must be a string\")\n    return len(string)\n\n# Test cases\nprint(strlen(''))  # 0\nprint(strlen('abc'))  # 3\nprint(strlen('你好'))  # 2\ntry:\n    print(strlen(None))  # Should raise TypeError\nexcept TypeError as e:\n    print(e)\ntry:\n    print(strlen(123))  # Should raise TypeError\nexcept TypeError as e:\n    print(e)\n"}
{"task_id": "HumanEval/27", "solution": "\ndef flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    >>> flip_case('')\n    ''\n    >>> flip_case('123')\n    '123'\n    >>> flip_case('!@#')\n    '!@#'\n    >>> flip_case('HeLLo WoRLd')\n    'hEllO wOrlD'\n    >>> flip_case(123)\n    Traceback (most recent call last):\n        ...\n    TypeError: Input must be a string\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input must be a string\")\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])\n\n# Test cases\nprint(flip_case('Hello'))  # Expected: 'hELLO'\nprint(flip_case(''))  # Expected: ''\nprint(flip_case('123'))  # Expected: '123'\nprint(flip_case('!@#'))  # Expected: '!@#'\nprint(flip_case('HeLLo WoRLd'))  # Expected: 'hEllO wOrlD'\ntry:\n    print(flip_case(123))  # Expected: TypeError\nexcept TypeError as e:\n    print(e)\n"}
{"task_id": "HumanEval/28", "solution": "\nfrom typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    >>> concatenate(['a'])\n    'a'\n    >>> concatenate(['a', 1, 'b'])\n    Traceback (most recent call last):\n        ...\n    TypeError: All elements must be strings\n    >>> concatenate('a')\n    Traceback (most recent call last):\n        ...\n    TypeError: Input must be a list of strings\n    >>> concatenate([['a', 'b'], 'c'])\n    Traceback (most recent call last):\n        ...\n    TypeError: All elements must be strings\n    \"\"\"\n    if not isinstance(strings, list):\n        raise TypeError(\"Input must be a list of strings\")\n    \n    for s in strings:\n        if not isinstance(s, str):\n            raise TypeError(\"All elements must be strings\")\n    \n    return ''.join(strings)\n\n# Test cases\nprint(concatenate([]))  # ''\nprint(concatenate(['a', 'b', 'c']))  # 'abc'\nprint(concatenate(['a']))  # 'a'\ntry:\n    print(concatenate(['a', 1, 'b']))  # Should raise TypeError\nexcept TypeError as e:\n    print(e)\ntry:\n    print(concatenate('a'))  # Should raise TypeError\nexcept TypeError as e:\n    print(e)\ntry:\n    print(concatenate([['a', 'b'], 'c']))  # Should raise TypeError\nexcept TypeError as e:\n    print(e)\n"}
{"task_id": "HumanEval/25", "solution": "\nfrom typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appears in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if not isinstance(n, int):\n        raise ValueError(\"Input must be an integer\")\n    if n <= 0:\n        raise ValueError(\"Input must be a positive integer greater than zero\")\n    \n    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors\n\n# Test cases to validate the function\nprint(factorize(8))  # [2, 2, 2]\nprint(factorize(25))  # [5, 5]\nprint(factorize(70))  # [2, 5, 7]\n\n# Edge cases\ntry:\n    print(factorize(-10))  # Should raise ValueError\nexcept ValueError as e:\n    print(e)\n\ntry:\n    print(factorize(0))  # Should raise ValueError\nexcept ValueError as e:\n    print(e)\n\ntry:\n    print(factorize(1))  # Should raise ValueError\nexcept ValueError as e:\n    print(e)\n\ntry:\n    print(factorize(2.5))  # Should raise ValueError\nexcept ValueError as e:\n    print(e)\n\nprint(factorize(123456))  # Should handle large number\n"}
{"task_id": "HumanEval/29", "solution": "\nfrom typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], '')\n    ['abc', 'bcd', 'cde', 'array']\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array', 123, None], 'a')\n    ['abc', 'array']\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'A')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'abcde')\n    []\n    >>> filter_by_prefix(['@bc', '#cd', '$de', '%array'], '@')\n    ['@bc']\n    \"\"\"\n    if not isinstance(prefix, str):\n        raise ValueError(\"Prefix must be a string\")\n    return [s for s in strings if isinstance(s, str) and s.startswith(prefix)]\n\n# Test cases\ndef test_filter_by_prefix():\n    # Edge Case 1: Empty List\n    assert filter_by_prefix([], 'a') == []\n\n    # Edge Case 2: Empty Prefix\n    assert filter_by_prefix(['abc', 'bcd', 'cde', 'array'], '') == ['abc', 'bcd', 'cde', 'array']\n\n    # Edge Case 3: Non-String Elements\n    assert filter_by_prefix(['abc', 'bcd', 'cde', 'array', 123, None], 'a') == ['abc', 'array']\n\n    # Edge Case 4: Case Sensitivity\n    assert filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'A') == []\n\n    # Edge Case 5: Prefix Longer than String\n    assert filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'abcde') == []\n\n    # Edge Case 6: Special Characters\n    assert filter_by_prefix(['@bc', '#cd', '$de', '%array'], '@') == ['@bc']\n\n    print(\"All test cases passed!\")\n\ntest_filter_by_prefix()\n"}
{"task_id": "HumanEval/30", "solution": "\ndef get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    >>> get_positive([])\n    []\n    >>> get_positive([-1, -2, -3])\n    []\n    >>> get_positive([1, 2, 3])\n    [1, 2, 3]\n    >>> get_positive([1, 'a', 2, None, 3, -1])\n    [1, 2, 3]\n    >>> get_positive(['a', 'b', 'c'])\n    []\n    \"\"\"\n    return [x for x in l if isinstance(x, (int, float)) and x > 0]\n"}
{"task_id": "HumanEval/31", "solution": "\ndef is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    >>> is_prime(-5)\n    False\n    >>> is_prime(0)\n    False\n    >>> is_prime(2.5)\n    False\n    >>> is_prime(\"string\")\n    False\n    \"\"\"\n    if not isinstance(n, int) or n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n"}
{"task_id": "HumanEval/26", "solution": "\nfrom typing import List\nfrom collections import Counter\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    if not all(isinstance(num, int) for num in numbers):\n        raise ValueError(\"All elements in the input list must be integers.\")\n    \n    count = Counter(numbers)\n    return [num for num in numbers if count[num] == 1]\n\n# Test cases\ndef test_remove_duplicates():\n    assert remove_duplicates([]) == []\n    assert remove_duplicates([1]) == [1]\n    assert remove_duplicates([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert remove_duplicates([1, 1, 2, 2, 3, 3]) == []\n    assert remove_duplicates([1, 2, 2, 3, 4, 4, 5]) == [1, 3, 5]\n    try:\n        remove_duplicates([1, 2, 'a', 3])\n    except ValueError as e:\n        assert str(e) == \"All elements in the input list must be integers.\"\n    else:\n        assert False, \"Expected ValueError\"\n\ntest_remove_duplicates()\nprint(\"All test cases passed.\")\n"}
{"task_id": "HumanEval/33", "solution": "\n\ndef sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n\nprint(\"Error\")"}
{"task_id": "HumanEval/36", "solution": "\ndef fizz_buzz(n: int) -> int:\n    if not isinstance(n, int):\n        raise ValueError(\"Input must be an integer\")\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n    \n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\n# Test cases to validate the function\nassert fizz_buzz(50) == 0\nassert fizz_buzz(78) == 2\nassert fizz_buzz(79) == 3\nassert fizz_buzz(0) == 0\n\ntry:\n    fizz_buzz(-1)\nexcept ValueError as e:\n    assert str(e) == \"Input must be a non-negative integer\"\n\ntry:\n    fizz_buzz(10.5)\nexcept ValueError as e:\n    assert str(e) == \"Input must be an integer\"\n\ntry:\n    fizz_buzz(\"100\")\nexcept ValueError as e:\n    assert str(e) == \"Input must be an integer\"\n\nprint(\"All test cases passed!\")\n"}
{"task_id": "HumanEval/34", "solution": "\ndef unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    try:\n        return sorted(set(l))\n    except TypeError:\n        return \"Error: List contains non-comparable elements\"\n"}
{"task_id": "HumanEval/35", "solution": "\ndef max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    >>> max_element([])\n    None\n    >>> max_element([42])\n    42\n    >>> max_element([-1, -2, -3])\n    -1\n    >>> max_element([1.5, 2.5, 0.5])\n    2.5\n    >>> max_element([1, 'a', 3])\n    Traceback (most recent call last):\n        ...\n    TypeError: List elements must be numbers\n    >>> max_element([3, 3, 3])\n    3\n    \"\"\"\n    if not l:\n        return None\n    if not all(isinstance(x, (int, float)) for x in l):\n        raise TypeError(\"List elements must be numbers\")\n    max_val = l[0]\n    for num in l:\n        if num > max_val:\n            max_val = num\n    return max_val\n\n# Test cases\ntest_cases = [\n    ([1, 2, 3], 3),\n    ([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 123),\n    ([], None),\n    ([42], 42),\n    ([-1, -2, -3], -1),\n    ([1.5, 2.5, 0.5], 2.5),\n    ([3, 3, 3], 3)\n]\n\n# Running the test cases\nfor i, (input_list, expected) in enumerate(test_cases):\n    try:\n        result = max_element(input_list)\n        assert result == expected, f\"Test case {i+1} failed: expected {expected}, got {result}\"\n        print(f\"Test case {i+1} passed\")\n    except Exception as e:\n        print(f\"Test case {i+1} raised an exception: {e}\")\n\n# Test case for mixed data types\ntry:\n    max_element([1, 'a', 3])\nexcept TypeError as e:\n    print(f\"Test case for mixed data types passed: {e}\")\nexcept Exception as e:\n    print(f\"Test case for mixed data types failed: {e}\")\nelse:\n    print(\"Test case for mixed data types failed: No exception raised\")\n"}
{"task_id": "HumanEval/20", "solution": "\nfrom typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if not isinstance(numbers, list):\n        raise TypeError(\"Input must be a list of numbers.\")\n    \n    if len(numbers) < 2:\n        raise ValueError(\"List must contain at least two elements.\")\n    \n    for num in numbers:\n        if not isinstance(num, (int, float)):\n            raise TypeError(\"All elements in the list must be integers or floats.\")\n    \n    # Sort the list to make it easier to find the closest elements\n    sorted_numbers = sorted(numbers)\n    \n    # Initialize the minimum difference to a large number\n    min_diff = float('inf')\n    closest_pair = (0.0, 0.0)\n    \n    # Iterate through the sorted list and find the smallest difference\n    for i in range(len(sorted_numbers) - 1):\n        diff = sorted_numbers[i + 1] - sorted_numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (sorted_numbers[i], sorted_numbers[i + 1])\n    \n    return closest_pair\n\n# Test cases to validate the function\ndef test_find_closest_elements():\n    assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\n    assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)\n    assert find_closest_elements([-1.0, -2.0, -3.0, -4.0, -5.0, -2.2]) == (-2.2, -2.0)\n    assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0, -1.0]) == (1.0, 2.0)\n    assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0, 1.0000001]) == (1.0, 1.0000001)\n    try:\n        find_closest_elements([])\n    except ValueError as e:\n        assert str(e) == \"List must contain at least two elements.\"\n    try:\n        find_closest_elements([1.0])\n    except ValueError as e:\n        assert str(e) == \"List must contain at least two elements.\"\n    try:\n        find_closest_elements([1.0, 'a'])\n    except TypeError as e:\n        assert str(e) == \"All elements in the list must be integers or floats.\"\n    try:\n        find_closest_elements(\"not a list\")\n    except TypeError as e:\n        assert str(e) == \"Input must be a list of numbers.\"\n\n    # Print the output of the failing test case\n    print(find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0, -1.0]))\n\ntest_find_closest_elements()\nprint(\"All tests passed.\")\n"}
{"task_id": "HumanEval/32", "solution": "\nimport math\nfrom scipy.optimize import newton\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    if not all(isinstance(coeff, (int, float, complex)) for coeff in xs):\n        raise ValueError(\"All coefficients must be numeric.\")\n    if not isinstance(x, (int, float, complex)):\n        raise ValueError(\"x must be a numeric value.\")\n    return sum([coeff * (x ** i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    if len(xs) == 0:\n        raise ValueError(\"The list of coefficients cannot be empty.\")\n    if len(xs) % 2 != 0:\n        raise ValueError(\"The list must have an even number of coefficients.\")\n    if not all(isinstance(coeff, (int, float, complex)) for coeff in xs):\n        raise ValueError(\"All coefficients must be numeric.\")\n    \n    # Define the polynomial function\n    def f(x):\n        return poly(xs, x)\n    \n    # Use Newton-Raphson method to find a root\n    root = newton(f, 0)  # Start the search at x = 0\n    return root\n\n# Example usage\nprint(round(find_zero([1, 2]), 2))  # Should print -0.5\nprint(round(find_zero([-6, 11, -6, 1]), 2))  # Should print 1.0\n\n# Edge case tests\ntry:\n    print(find_zero([]))  # Should raise ValueError\nexcept ValueError as e:\n    print(e)\n\ntry:\n    print(find_zero([1]))  # Should raise ValueError\nexcept ValueError as e:\n    print(e)\n\ntry:\n    print(find_zero([1, 'a']))  # Should raise ValueError\nexcept ValueError as e:\n    print(e)\n\ntry:\n    print(poly([1, 2], 'a'))  # Should raise ValueError\nexcept ValueError as e:\n    print(e)\n\nprint(find_zero([1e10, -1e10]))  # Test with large coefficients\nprint(find_zero([1e-10, -1e-10]))  # Test with small coefficients\nprint(find_zero([1+1j, -1-1j]))  # Test with complex coefficients\n"}
{"task_id": "HumanEval/40", "solution": "\ndef triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    >>> triples_sum_to_zero([])\n    False\n    >>> triples_sum_to_zero([0, 0, 0])\n    True\n    >>> triples_sum_to_zero([1, 2, 'a'])\n    False\n    \"\"\"\n    if not all(isinstance(x, int) for x in l):\n        return False\n\n    n = len(l)\n    if n < 3:\n        return False\n    \n    l.sort()\n    for i in range(n - 2):\n        if i > 0 and l[i] == l[i - 1]:\n            continue\n        left, right = i + 1, n - 1\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total == 0:\n                return True\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n    return False\n"}
{"task_id": "HumanEval/39", "solution": "\ndef prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer\")\n    if n <= 0:\n        raise ValueError(\"Input must be a positive integer\")\n\n    def is_prime(num):\n        if num <= 1:\n            return False\n        if num <= 3:\n            return True\n        if num % 2 == 0 or num % 3 == 0:\n            return False\n        i = 5\n        while i * i <= num:\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    fibs = [0, 1]\n    prime_fibs = []\n    while len(prime_fibs) < n:\n        next_fib = fibs[-1] + fibs[-2]\n        fibs.append(next_fib)\n        if is_prime(next_fib):\n            prime_fibs.append(next_fib)\n    \n    return prime_fibs[n-1]\n\n# Test cases to validate the function\nprint(prime_fib(1))  # Expected output: 2\nprint(prime_fib(2))  # Expected output: 3\nprint(prime_fib(3))  # Expected output: 5\nprint(prime_fib(4))  # Expected output: 13\nprint(prime_fib(5))  # Expected output: 89\n\n# Edge cases\ntry:\n    print(prime_fib(-1))  # Expected output: ValueError\nexcept ValueError as e:\n    print(e)\n\ntry:\n    print(prime_fib(0))  # Expected output: ValueError\nexcept ValueError as e:\n    print(e)\n\ntry:\n    print(prime_fib(1.5))  # Expected output: TypeError\nexcept TypeError as e:\n    print(e)\n\ntry:\n    print(prime_fib(\"a\"))  # Expected output: TypeError\nexcept TypeError as e:\n    print(e)\n"}
{"task_id": "HumanEval/41", "solution": "\ndef car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right; simultaneously, a different set of n cars\n    are driving right to left. The two sets of cars start out being very far from\n    each other. All cars move in the same speed. Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \n    :param n: int - number of cars moving in each direction\n    :return: int - number of collisions\n    :raises ValueError: if n is not a non-negative integer\n    \"\"\"\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"The number of cars must be a non-negative integer.\")\n    \n    return n\n\n# Test cases to validate the function\ndef test_car_race_collision():\n    try:\n        # Test with a valid number of cars\n        assert car_race_collision(5) == 5\n        # Test with zero cars\n        assert car_race_collision(0) == 0\n        # Test with a large number of cars\n        assert car_race_collision(10**6) == 10**6\n        # Test with invalid input (negative number)\n        try:\n            car_race_collision(-1)\n        except ValueError as e:\n            assert str(e) == \"The number of cars must be a non-negative integer.\"\n        # Test with invalid input (non-integer)\n        try:\n            car_race_collision(\"a\")\n        except ValueError as e:\n            assert str(e) == \"The number of cars must be a non-negative integer.\"\n        print(\"All tests passed.\")\n    except AssertionError:\n        print(\"A test failed.\")\n\n# Run the tests\ntest_car_race_collision()\n"}
{"task_id": "HumanEval/37", "solution": "\n\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n\nprint(\"Error\")"}
{"task_id": "HumanEval/44", "solution": "\ndef change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if not isinstance(x, int) or not isinstance(base, int):\n        raise TypeError(\"Both x and base must be integers\")\n    \n    if base < 2 or base >= 10:\n        raise ValueError(\"Base must be between 2 and 9 inclusive\")\n    \n    if x == 0:\n        return \"0\"\n    \n    is_negative = x < 0\n    x = abs(x)\n    \n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    \n    result = ''.join(digits[::-1])\n    if is_negative:\n        result = '-' + result\n    \n    return result\n\n# Test cases to validate the function\nassert change_base(8, 3) == '22'\nassert change_base(8, 2) == '1000'\nassert change_base(7, 2) == '111'\nassert change_base(0, 2) == '0'\nassert change_base(-8, 3) == '-22'\nassert change_base(255, 2) == '11111111'\nassert change_base(255, 8) == '377'\n\ntry:\n    change_base(8, 10)\nexcept ValueError as e:\n    assert str(e) == \"Base must be between 2 and 9 inclusive\"\n\ntry:\n    change_base(8, 1)\nexcept ValueError as e:\n    assert str(e) == \"Base must be between 2 and 9 inclusive\"\n\ntry:\n    change_base(8.5, 2)\nexcept TypeError as e:\n    assert str(e) == \"Both x and base must be integers\"\n\ntry:\n    change_base(8, 2.5)\nexcept TypeError as e:\n    assert str(e) == \"Both x and base must be integers\"\n\nprint(\"All test cases passed.\")\n"}
{"task_id": "HumanEval/42", "solution": "\ndef incr_list(l):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    >>> incr_list([])\n    []\n    >>> incr_list([1.5, 2.5, 3.5])\n    [2.5, 3.5, 4.5]\n    >>> incr_list(['a', 'b', 'c'])\n    Traceback (most recent call last):\n        ...\n    TypeError: unsupported operand type(s) for +: 'str' and 'int'\n    >>> incr_list([[1, 2], [3, 4]])\n    Traceback (most recent call last):\n        ...\n    TypeError: can only concatenate list (not \"int\") to list\n    >>> incr_list(\"123\")\n    Traceback (most recent call last):\n        ...\n    TypeError: 'str' object is not iterable\n    \"\"\"\n    if not isinstance(l, list):\n        raise TypeError(f\"Expected list, got {type(l).__name__}\")\n    return [x + 1 for x in l]\n\n# Test cases\nprint(incr_list([1, 2, 3]))  # [2, 3, 4]\nprint(incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123]))  # [6, 4, 6, 3, 4, 4, 10, 1, 124]\nprint(incr_list([]))  # []\ntry:\n    print(incr_list([1.5, 2.5, 3.5]))  # [2.5, 3.5, 4.5]\nexcept TypeError as e:\n    print(e)\ntry:\n    print(incr_list(['a', 'b', 'c']))  # TypeError\nexcept TypeError as e:\n    print(e)\ntry:\n    print(incr_list([[1, 2], [3, 4]]))  # TypeError\nexcept TypeError as e:\n    print(e)\ntry:\n    print(incr_list(\"123\"))  # TypeError\nexcept TypeError as e:\n    print(e)\n"}
{"task_id": "HumanEval/43", "solution": "\ndef pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    >>> pairs_sum_to_zero([])\n    False\n    >>> pairs_sum_to_zero([0])\n    False\n    >>> pairs_sum_to_zero([0, 0])\n    True\n    >>> pairs_sum_to_zero([1, 'a', 3])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, -3])\n    True\n    >>> pairs_sum_to_zero([1, 2, 2, -2])\n    True\n    \"\"\"\n    if not all(isinstance(i, int) for i in l):\n        return False\n    \n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n"}
{"task_id": "HumanEval/45", "solution": "\ndef triangle_area(a, h):\n    \"\"\"\n    Given the length of the base (a) and the height (h), return the area of the triangle.\n    \n    >>> triangle_area(5, 3)\n    7.5\n    >>> triangle_area(0, 3)\n    0.0\n    >>> triangle_area(5, 0)\n    0.0\n    >>> triangle_area(-5, 3)\n    Traceback (most recent call last):\n        ...\n    ValueError: Base and height must be non-negative\n    >>> triangle_area(5, -3)\n    Traceback (most recent call last):\n        ...\n    ValueError: Base and height must be non-negative\n    >>> triangle_area(\"5\", 3)\n    Traceback (most recent call last):\n        ...\n    TypeError: Base and height must be numbers\n    >>> triangle_area(5, \"3\")\n    Traceback (most recent call last):\n        ...\n    TypeError: Base and height must be numbers\n    \"\"\"\n    if not isinstance(a, (int, float)) or not isinstance(h, (int, float)):\n        raise TypeError(\"Base and height must be numbers\")\n    if a < 0 or h < 0:\n        raise ValueError(\"Base and height must be non-negative\")\n    return 0.5 * a * h\n\n# Test cases\nprint(triangle_area(5, 3))  # Expected: 7.5\nprint(triangle_area(0, 3))  # Expected: 0.0\nprint(triangle_area(5, 0))  # Expected: 0.0\ntry:\n    print(triangle_area(-5, 3))  # Expected: ValueError\nexcept ValueError as e:\n    print(e)\ntry:\n    print(triangle_area(5, -3))  # Expected: ValueError\nexcept ValueError as e:\n    print(e)\ntry:\n    print(triangle_area(\"5\", 3))  # Expected: TypeError\nexcept TypeError as e:\n    print(e)\ntry:\n    print(triangle_area(5, \"3\"))  # Expected: TypeError\nexcept TypeError as e:\n    print(e)\n"}
{"task_id": "HumanEval/38", "solution": "\ndef encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    if not isinstance(s, str):\n        raise ValueError(\"Input must be a string\")\n    \n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    if not isinstance(s, str):\n        raise ValueError(\"Input must be a string\")\n    \n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group back to original positions. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef test_encode_decode_cyclic():\n    test_cases = [\n        (\"\", \"\"),  # Empty string\n        (\"a\", \"a\"),  # Single character\n        (\"ab\", \"ab\"),  # Two characters\n        (\"abc\", \"bca\"),  # Three characters\n        (\"abcd\", \"bcad\"),  # Four characters\n        (\"abcdef\", \"bcadef\"),  # Six characters\n        (\"abcdefg\", \"bcadefg\"),  # Seven characters\n        (123, \"231\"),  # Non-string input (integer)\n        (12.34, \"21.34\"),  # Non-string input (float)\n        (None, \"\"),  # Non-string input (None)\n    ]\n\n    for original, expected_encoded in test_cases:\n        try:\n            encoded = encode_cyclic(str(original))\n            decoded = decode_cyclic(encoded)\n            assert encoded == expected_encoded, f\"Failed encoding: {original} -> {encoded}, expected: {expected_encoded}\"\n            assert decoded == str(original), f\"Failed decoding: {encoded} -> {decoded}, expected: {original}\"\n            print(f\"Test passed for input: {original}\")\n        except Exception as e:\n            print(f\"Test failed for input: {original} with exception: {e}\")\n\ntest_encode_decode_cyclic()\n"}
{"task_id": "HumanEval/46", "solution": "\ndef fib4(n):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer\")\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n    \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    \n    fib_sequence = [0, 0, 2, 0]\n    \n    for i in range(4, n + 1):\n        next_value = fib_sequence[-1] + fib_sequence[-2] + fib_sequence[-3] + fib_sequence[-4]\n        fib_sequence.append(next_value)\n    \n    return fib_sequence[n]\n\n# Test cases to validate the function\nprint(fib4(5))  # Expected output: 4\nprint(fib4(6))  # Expected output: 8\nprint(fib4(7))  # Expected output: 14\n\n# Edge cases\ntry:\n    print(fib4(-1))  # Expected output: ValueError\nexcept ValueError as e:\n    print(e)\n\ntry:\n    print(fib4(3.5))  # Expected output: TypeError\nexcept TypeError as e:\n    print(e)\n\ntry:\n    print(fib4(\"10\"))  # Expected output: TypeError\nexcept TypeError as e:\n    print(e)\n\n# Large input\nprint(fib4(50))  # Expected output: A large number\n"}
{"task_id": "HumanEval/48", "solution": "\nimport re\n\ndef is_palindrome(text) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    >>> is_palindrome('A man, a plan, a canal, Panama')\n    True\n    >>> is_palindrome(12321)\n    True\n    >>> is_palindrome(12345)\n    False\n    >>> is_palindrome(None)\n    False\n    \"\"\"\n    if text is None:\n        return False\n    if not isinstance(text, str):\n        text = str(text)\n    text = re.sub(r'[^A-Za-z0-9]', '', text).lower()\n    return text == text[::-1]\n\n# Test cases\ntest_cases = [\n    ('', True),\n    ('aba', True),\n    ('aaaaa', True),\n    ('zbcd', False),\n    ('A man, a plan, a canal, Panama', True),\n    (12321, True),\n    (12345, False),\n    (None, False)\n]\n\n# Running the test cases\nresults = [(input_val, is_palindrome(input_val), expected) for input_val, expected in test_cases]\nprint(results)\n"}
{"task_id": "HumanEval/49", "solution": "\ndef modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if not isinstance(n, int) or not isinstance(p, int):\n        raise TypeError(\"Both n and p must be integers\")\n    if p <= 0:\n        raise ValueError(\"p must be a positive integer\")\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n    \n    if n == 0:\n        return 1\n    result = 1\n    base = 2\n    while n > 0:\n        if n % 2 == 1:\n            result = (result * base) % p\n        base = (base * base) % p\n        n //= 2\n    return result\n"}
{"task_id": "HumanEval/53", "solution": "\ndef add(x, y):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    >>> add(-1, -1)\n    -2\n    >>> add(0, 0)\n    0\n    >>> add(1.5, 2.5)\n    4.0\n    >>> add(\"a\", 1)\n    Traceback (most recent call last):\n        ...\n    TypeError: Both arguments must be numbers\n    \"\"\"\n    if not (isinstance(x, (int, float)) and isinstance(y, (int, float))):\n        raise TypeError(\"Both arguments must be numbers\")\n    return x + y\n\n# Test cases\nprint(add(2, 3))        # 5\nprint(add(5, 7))        # 12\nprint(add(-1, -1))      # -2\nprint(add(0, 0))        # 0\nprint(add(1.5, 2.5))    # 4.0\ntry:\n    print(add(\"a\", 1))  # Should raise TypeError\nexcept TypeError as e:\n    print(e)            # Both arguments must be numbers\n"}
{"task_id": "HumanEval/52", "solution": "\ndef below_threshold(l: list, t: int) -> bool:\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    >>> below_threshold([], 5)\n    True\n    >>> below_threshold([1, 2, 'a', 10], 5)\n    False\n    >>> below_threshold([1, 2, 4.5, 10], 5)\n    False\n    >>> below_threshold([1, 2, 4, 10], -1)\n    False\n    \"\"\"\n    if not isinstance(t, (int, float)):\n        raise ValueError(\"Threshold must be an integer or float\")\n    \n    for number in l:\n        if not isinstance(number, (int, float)):\n            return False\n        if number >= t:\n            return False\n    return True\n\n# Test cases\nprint(below_threshold([1, 2, 4, 10], 100))  # True\nprint(below_threshold([1, 20, 4, 10], 5))   # False\nprint(below_threshold([], 5))               # True\nprint(below_threshold([1, 2, 'a', 10], 5))  # False\nprint(below_threshold([1, 2, 4.5, 10], 5))  # False\nprint(below_threshold([1, 2, 4, 10], -1))   # False\nprint(below_threshold([1, 2, 4, 10], 10))   # False\nprint(below_threshold([1, 2, 4, 9], 10))    # True\n\n<execute>"}
{"task_id": "HumanEval/50", "solution": "\ndef encode_shift(s: str) -> str:\n    \"\"\"\n    Returns encoded string by shifting every character by 5 in the alphabet.\n    Non-alphabetic characters remain unchanged.\n    \"\"\"\n    if not isinstance(s, str):\n        raise TypeError(\"Input must be a string\")\n    \n    result = []\n    for ch in s:\n        if 'a' <= ch <= 'z':\n            result.append(chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")))\n        elif 'A' <= ch <= 'Z':\n            result.append(chr(((ord(ch) + 5 - ord(\"A\")) % 26) + ord(\"A\")))\n        else:\n            result.append(ch)\n    return \"\".join(result)\n\ndef decode_shift(s: str) -> str:\n    \"\"\"\n    Takes as input string encoded with encode_shift function. Returns decoded string.\n    Non-alphabetic characters remain unchanged.\n    \"\"\"\n    if not isinstance(s, str):\n        raise TypeError(\"Input must be a string\")\n    \n    result = []\n    for ch in s:\n        if 'a' <= ch <= 'z':\n            result.append(chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")))\n        elif 'A' <= ch <= 'Z':\n            result.append(chr(((ord(ch) - 5 - ord(\"A\")) % 26) + ord(\"A\")))\n        else:\n            result.append(ch)\n    return \"\".join(result)\n\n# Test cases\ndef test_functions():\n    # Test empty string\n    assert encode_shift(\"\") == \"\"\n    assert decode_shift(\"\") == \"\"\n    \n    # Test non-alphabetic characters\n    assert encode_shift(\"123!@#\") == \"123!@#\"\n    assert decode_shift(\"123!@#\") == \"123!@#\"\n    \n    # Test lowercase letters\n    assert encode_shift(\"abc\") == \"fgh\"\n    assert decode_shift(\"fgh\") == \"abc\"\n    \n    # Test uppercase letters\n    assert encode_shift(\"ABC\") == \"FGH\"\n    assert decode_shift(\"FGH\") == \"ABC\"\n    \n    # Test mixed case and non-alphabetic characters\n    assert encode_shift(\"Hello, World!\") == \"Mjqqt, Btwqi!\"\n    assert decode_shift(\"Mjqqt, Btwqi!\") == \"Hello, World!\"\n    \n    # Test non-string input\n    try:\n        encode_shift(123)\n    except TypeError as e:\n        assert str(e) == \"Input must be a string\"\n    \n    try:\n        decode_shift(123)\n    except TypeError as e:\n        assert str(e) == \"Input must be a string\"\n    \n    print(\"All tests passed!\")\n\ntest_functions()\n"}
{"task_id": "HumanEval/47", "solution": "\ndef median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    >>> median([])\n    None\n    >>> median([5])\n    5\n    >>> median([1, 2, 'a'])\n    Traceback (most recent call last):\n        ...\n    TypeError: List must contain only numeric values\n    >>> median([1.5, 2.5, 3.5])\n    2.5\n    >>> median([1, 2, 2, 3])\n    2.0\n    \"\"\"\n    if not l:\n        return None\n    \n    if not all(isinstance(x, (int, float)) for x in l):\n        raise TypeError(\"List must contain only numeric values\")\n    \n    l.sort()\n    n = len(l)\n    mid = n // 2\n    \n    if n % 2 == 1:\n        return l[mid]\n    else:\n        return (l[mid - 1] + l[mid]) / 2\n\n# Test cases\ntest_cases = [\n    ([3, 1, 2, 4, 5], 3),\n    ([-10, 4, 6, 1000, 10, 20], 15.0),\n    ([], None),\n    ([5], 5),\n    ([1, 2, 'a'], TypeError),\n    ([1.5, 2.5, 3.5], 2.5),\n    ([1, 2, 2, 3], 2.0)\n]\n\n# Running the test cases\nfor i, (input_data, expected_output) in enumerate(test_cases):\n    try:\n        result = median(input_data)\n        assert result == expected_output, f\"Test case {i+1} failed: expected {expected_output}, got {result}\"\n    except Exception as e:\n        assert isinstance(e, expected_output), f\"Test case {i+1} failed: expected exception {expected_output}, got {e}\"\n\nprint(\"All test cases passed!\")\n"}
{"task_id": "HumanEval/51", "solution": "\ndef remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    return ''.join([char for char in text if char not in vowels])\n\n# Test cases\ntest_cases = [\n    ('', ''),\n    (\"abcdef\\nghijklm\", 'bcdf\\nghjklm'),\n    ('abcdef', 'bcdf'),\n    ('aaaaa', ''),\n    ('aaBAA', 'B'),\n    ('zbcd', 'zbcd'),\n    ('AEIOUaeiou', ''),\n    ('Python Programming', 'Pythn Prgrmmng'),\n    ('12345', '12345'),\n    ('', ''),\n    ('BCDFG', 'BCDFG')\n]\n\n# Running the test cases\nfor i, (input_text, expected_output) in enumerate(test_cases):\n    result = remove_vowels(input_text)\n    assert result == expected_output, f\"Test case {i+1} failed: input({input_text}) => output({result}), expected({expected_output})\"\nprint(\"All test cases passed!\")\n"}
{"task_id": "HumanEval/55", "solution": "\ndef fib(n: int) -> int:\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    >>> fib(0)\n    0\n    >>> fib(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input must be a non-negative integer\n    >>> fib(1.5)\n    Traceback (most recent call last):\n        ...\n    TypeError: Input must be an integer\n    \"\"\"\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer\")\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n    \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b\n\n# Test cases to validate the function\nassert fib(10) == 55\nassert fib(1) == 1\nassert fib(8) == 21\nassert fib(0) == 0\n\ntry:\n    fib(-1)\nexcept ValueError as e:\n    assert str(e) == \"Input must be a non-negative integer\"\n\ntry:\n    fib(1.5)\nexcept TypeError as e:\n    assert str(e) == \"Input must be an integer\"\n\nprint(\"All test cases passed!\")\n"}
{"task_id": "HumanEval/54", "solution": "\ndef same_chars(s0, s1):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    >>> same_chars('', '')\n    True\n    >>> same_chars('a', '')\n    False\n    >>> same_chars('', 'a')\n    False\n    >>> same_chars('abc', 'ABC')\n    False\n    >>> same_chars('abc', 'abc ')\n    False\n    >>> same_chars('abc', 'abc!')\n    False\n    >>> same_chars('abc', 'açb')\n    False\n    >>> same_chars('açb', 'bça')\n    True\n    >>> same_chars(123, 'abc')\n    Traceback (most recent call last):\n        ...\n    TypeError: Inputs must be strings\n    >>> same_chars('abc', 123)\n    Traceback (most recent call last):\n        ...\n    TypeError: Inputs must be strings\n    \"\"\"\n    if not isinstance(s0, str) or not isinstance(s1, str):\n        raise TypeError(\"Inputs must be strings\")\n    return set(s0) == set(s1)\n"}
{"task_id": "HumanEval/18", "solution": "\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\" \n    Find how many times a given substring can be found in the original string. Count overlapping cases.\n    \n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    >>> how_many_times('', '')\n    0\n    >>> how_many_times('abc', '')\n    0\n    >>> how_many_times('', 'abc')\n    0\n    >>> how_many_times('abc', 'd')\n    0\n    >>> how_many_times('abcabcabc', 'abc')\n    3\n    >>> how_many_times('abcabcabc', 'ab')\n    3\n    >>> how_many_times('abcabcabc', 'bc')\n    3\n    >>> how_many_times('abcabcabc', 'ca')\n    2\n    >>> how_many_times('abcabcabc', 'abcabc')\n    2\n    >>> how_many_times('abcabcabc', 'abcabcabc')\n    1\n    >>> how_many_times('abcabcabc', 'abcabcabcd')\n    0\n    >>> how_many_times('abcabcabc', 'ABC')\n    0\n    >>> how_many_times('abcABCabc', 'ABC')\n    1\n    >>> how_many_times('abcABCabc', 'abc')\n    2\n    >>> how_many_times('abcABCabc', 'aBc')\n    0\n    >>> how_many_times('abcABCabc', 'aBc'.lower())\n    2\n    >>> how_many_times('abcABCabc', 'aBc'.upper())\n    1\n    >>> how_many_times('abcABCabc', 'aBc'.capitalize())\n    0\n    >>> how_many_times('abcABCabc', 'aBc'.swapcase())\n    0\n    >>> how_many_times('abcABCabc', 'aBc'.title())\n    0\n    >>> how_many_times('abcABCabc', 'aBc'.casefold())\n    2\n    >>> how_many_times('abcABCabc', 'aBc'.center(5))\n    0\n    >>> how_many_times('abcABCabc', 'aBc'.ljust(5))\n    0\n    >>> how_many_times('abcABCabc', 'aBc'.rjust(5))\n    0\n    >>> how_many_times('abcABCabc', 'aBc'.zfill(5))\n    0\n    >>> how_many_times('abcABCabc', 'aBc'.strip())\n    0\n    >>> how_many_times('abcABCabc', 'aBc'.lstrip())\n    0\n    >>> how_many_times('abcABCabc', 'aBc'.rstrip())\n    0\n    >>> how_many_times('abcABCabc', 'aBc'.replace('a', 'A'))\n    1\n    >>> how_many_times('abcABCabc', 'aBc'.replace('b', 'B'))\n    0\n    >>> how_many_times('abcABCabc', 'aBc'.replace('c', 'C'))\n    0\n    >>> how_many_times('abcABCabc', 'aBc'.replace('a', 'A').replace('b', 'B').replace('c', 'C'))\n    1\n    >>> how_many_times('abcABCabc', 'aBc'.replace('a', 'A').replace('b', 'B').replace('c', 'C').replace('A', 'a'))\n    0\n    >>> how_many_times('abcABCabc', 'aBc'.replace('a', 'A').replace('b', 'B').replace('c', 'C').replace('A', 'a').replace('B', 'b'))\n    0\n    >>> how_many_times('abcABCabc', 'aBc'.replace('a', 'A').replace('b', 'B').replace('c', 'C').replace('A', 'a').replace('B', 'b').replace('C', 'c'))\n    2\n    >>> how_many_times('abcABCabc', 'aBc'.replace('a', 'A').replace('b', 'B').replace('c', 'C').replace('A', 'a').replace('B', 'b').replace('C', 'c').replace('a', 'A'))\n    1\n    >>> how_many_times('abcABCabc', 'aBc'.replace('a', 'A').replace('b', 'B').replace('c', 'C').replace('A', 'a').replace('B', 'b').replace('C', 'c').replace('a', 'A').replace('b', 'B'))\n    0\n    >>> how_many_times('abcABCabc', 'aBc'.replace('a', 'A').replace('b', 'B').replace('c', 'C').replace('A', 'a').replace('B', 'b').replace('C', 'c').replace('a', 'A').replace('b', 'B').replace('c', 'C'))\n    1\n    >>> how_many_times('abcABCabc', 'aBc'.replace('a', 'A').replace('b', 'B').replace('c', 'C').replace('A', 'a').replace('B', 'b').replace('C', 'c').replace('a', 'A').replace('b', 'B').replace('c', 'C').replace('A', 'a'))\n    0\n    >>> how_many_times('abcABCabc', 'aBc'.replace('a', 'A').replace('b', 'B').replace('c', 'C').replace('A', 'a').replace('B', 'b').replace('C', 'c').replace('a', 'A').replace('b', 'B').replace('c', 'C').replace('A', 'a').replace('B', 'b'))\n    0\n    >>> how_many_times('abcABCabc', 'aBc'.replace('a', 'A').replace('b', 'B').replace('c', 'C').replace('A', 'a').replace('B', 'b').replace('C', 'c').replace('a', 'A').replace('b', 'B').replace('c', 'C').replace('A', 'a').replace('B', 'b').replace('C', 'c'))\n    2\n    >>> how_many_times('abcABCabc', 'aBc'.replace('a', 'A').replace('b', 'B').replace('c', 'C').replace('A', 'a').replace('B', 'b').replace('C', 'c').replace('a', 'A').replace('b', 'B').replace('c', 'C').replace('A', 'a').replace('B', 'b').replace('C', 'c').replace('a', 'A'))\n    1\n    >>> how_many_times('abcABCabc', 'aBc'.replace('a', 'A').replace('b', 'B').replace('c', 'C').replace('A', 'a').replace('B', 'b').replace('C', 'c').replace('a', 'A').replace('b', 'B').replace('c', 'C').replace('A', 'a').replace('B', 'b').replace('C', 'c').replace('a', 'A'))\n    0\n    >>> how_many_times('abcABCabc', 'aBc'.replace('a', 'A').replace('b', 'B').replace('c', 'C').replace('A', 'a').replace('B', 'b').replace('C', 'c').replace('a', 'A').replace('b', 'B').replace('c', 'C').replace('A', 'a').replace('B', 'b').replace('C', 'c').replace('a', 'A'))\n    1\n    >>> how_many_times('abcABCabc', 'aBc'.replace('a', 'A').replace('b', 'B').replace('c', 'C').replace('A', 'a').replace('B', 'b').replace('C', 'c').replace('a', 'A').replace('b', 'B').replace('c', 'C').replace('A', 'a').replace('B', 'b').replace('C', 'c').replace('a', 'A'))\n    0\n    >>> how_many_times('abcABCabc', 'aBc'.replace('a', 'A').replace('b', 'B').replace('c', 'C').replace('A', 'a').replace('B', 'b').replace('C', 'c').replace('a', 'A').replace('b', 'B').replace('c', 'C').replace('A', 'a').replace('B', 'b').replace('C', 'c').replace('a', 'A'))\n    1\n    >>> how_many_times('abcABCabc', 'aBc'.replace('a', 'A').replace('b', 'B').replace('c', 'C').replace('A', 'a').replace('B', 'b').replace('C', 'c').replace('a', 'A').replace('b', 'B').replace('c', 'C').replace('A', 'a').replace('B', 'b').replace('C', 'c').replace('a', 'A'))\n    0\n    >>> how_many_times('abcABCabc', 'aBc'.replace('a', 'A').replace('b', 'B').replace('c', 'C').replace('A', 'a').replace('B', 'b').replace('C', 'c').replace('a', 'A').replace('b', 'B').replace('c', 'C').replace('A', 'a').replace('B', 'b').replace('C', 'c').replace('a', 'A'))\n    1\n    >>> how_many_times('abcABCabc', 'aBc'.replace('a', 'A').replace('b', 'B').replace('c', 'C').replace('A', 'a').replace('B', 'b').replace('C', 'c').replace('a', 'A').replace('b', 'B').replace('c', 'C').replace('A', 'a').replace('B', 'b').replace('C', 'c').replace('a', 'A'))\n    0\n    >>> how_many_times('abcABCabc', 'aBc'.replace('a', 'A').replace('b', 'B').replace('c', 'C').replace('A', 'a').replace('B', 'b').replace('C', 'c').replace('a', 'A').replace('b', 'B').replace('c', 'C').replace('A', 'a').replace('B', 'b').replace('C', 'c').replace('a', 'A'))\n    1\n    >>> how_many_times('abcABCabc', 'aBc'.replace('a', 'A').replace('b', 'B').replace('c', 'C').replace('A', 'a').replace('B', 'b').replace('C', 'c').replace('a', 'A').replace('b', 'B').replace('c', 'C').replace('A', 'a').replace('B', 'b').replace('C', 'c').replace('a', 'A'))\n    0\n    >>> how_many_times('abcABCabc', 'aBc'.replace('a', 'A').replace('b', 'B').replace('c', 'C').replace('A', 'a').replace('B', 'b').replace('C', 'c').replace('a', 'A').replace('b', 'B').replace('c', 'C').replace('A', 'a').replace('B', 'b').replace('C', 'c').replace('a', 'A'))\n    1\n    >>> how_many_times('abcABCabc', 'aBc'.replace('a', 'A').replace('b', 'B').replace('c', 'C').replace('A', 'a').replace('B', 'b').replace('C', 'c').replace('a', 'A').replace('b', 'B').replace('c', 'C').replace('A', 'a').replace('B', 'b').replace('C', 'c').replace('a', 'A'))\n    0\n    >>> how_many_times('abcABCabc', 'aBc'.replace('a', 'A').replace('b', 'B').replace('c', 'C').replace('A', 'a').replace('B', 'b').replace('C', 'c').replace('a', 'A').replace('b', 'B').replace('c', 'C').replace('A', 'a').replace('B', 'b').replace('C', 'c').replace('a', 'A'))\n    1\n    >>> how_many_times('abcABCabc', 'aBc'.replace('a', 'A').replace('b', 'B').replace('c', 'C').replace('A', 'a').replace('B', 'b').replace('C', 'c').replace('a', 'A').replace('b', 'B').replace('c', 'C').replace('A', 'a').replace('B', 'b').replace('C', 'c').replace('a', 'A'))\n    0\n    >>> how_many_times('abcABCabc', 'aBc'.replace('a', 'A').replace('b', 'B').replace('c', 'C').replace('A', 'a').replace('B', 'b').replace('C', 'c').replace('a', 'A').replace('b', 'B').replace('c', 'C').replace('A', 'a').replace('B', 'b').replace('C', 'c').replace('a', 'A'))\n    1\n    >>> how_many_times('abcABCabc', 'aBc'.replace('a', 'A').replace('b', 'B').replace('c', 'C').replace('A', 'a').replace('B', 'b').replace('C', 'c').replace('a', 'A').replace('b', 'B').replace('c', 'C').replace('A', 'a').replace('B', 'b').replace('C', 'c').replace('a', 'A'))\n    0\n    >>> how_many_times('abcABCabc', 'aBc'.replace('a', 'A').replace('b', 'B').replace('c', 'C').replace('A', 'a').replace('B', 'b').replace('C', 'c').replace('a', 'A').replace('b', 'B').replace('c', 'C').replace('A', 'a').replace('B', 'b').replace('C', 'c').replace('a', 'A'))\n    1\n    >>> how_many_times('abcABCabc', 'aBc'.replace('a', 'A').replace('b', 'B').replace('c', 'C').replace('A', 'a').replace('B', 'b').replace('C', 'c').replace('a', 'A').replace('b', 'B').replace('c', 'C').replace('A', 'a').replace('B', 'b').replace('C', 'c').replace('a', 'A'))\n    0\n    >>> how_many_times('abcABCabc', 'aBc'.replace('a', 'A').replace('b', 'B').replace('c', 'C').replace('A', 'a').replace('B', 'b').replace('C', 'c').replace('a', 'A').replace('b', 'B').replace('c', 'C').replace('A', 'a').replace('B', 'b').replace('C', 'c').replace('a', 'A'))\n    1\n    >>> how_many_times('abcABCabc', 'aBc'.replace('a', 'A').replace('b', 'B').replace('c', 'C').replace('A', 'a').replace('B', 'b').replace('C', 'c').replace('a', 'A').replace('b', 'B').replace('c', 'C').replace('A', 'a').replace('B', 'b').replace('C', 'c').replace('a', 'A'))\n    0\n    >>> how_many_times('abcABCabc', 'aBc'.replace('a', 'A').replace('b', 'B').replace('c', 'C').replace('A', 'a').replace('B', 'b').replace('C', 'c').replace('a', 'A').replace('b', 'B').replace('c', 'C').replace('A', 'a').replace('B', 'b').replace('C', 'c').replace('a', 'A'))\n    1\n    >>> how_many_times('abcABCabc', 'aBc'.replace('a', 'A').replace('b', 'B').replace('c', 'C').replace('A', 'a').replace('B', 'b').replace('C', 'c').replace('a', 'A').replace('b', 'B').replace('c', 'C').replace('A', 'a').replace('B', 'b').replace('C', 'c').replace('a', 'A'))\n    0\n    >>> how_many_times('abcABCabc', 'aBc'.replace('a', 'A').replace('b', 'B').replace('c', 'C').replace('A', 'a').replace('B', 'b').replace('C', 'c').replace('a', 'A').replace('b', 'B').replace('c', 'C').replace('A', 'a').replace('B', 'b').replace('C', 'c').replace('a', 'A'))\n    1\n    >>> how_many_times('abcABCabc', 'aBc'.replace('a', 'A').replace('b', 'B').replace('c', 'C').replace('A', 'a').replace('B', 'b').replace('C', 'c').replace('a', 'A').replace('b', 'B').replace('c', 'C').replace('A', 'a').replace('B', 'b').replace('C', 'c').replace('a', 'A'))\n    0\n    >>> how_many_times('abcABCabc', 'aBc'.replace('a', 'A').replace('b', 'B').replace('c', 'C').replace('A', 'a').replace('B', 'b').replace('C', 'c').replace('a', 'A').replace('b', 'B').replace('c', '"}
{"task_id": "HumanEval/59", "solution": "\ndef largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if not isinstance(n, int) or n <= 1:\n        raise ValueError(\"Input must be an integer greater than 1\")\n\n    def is_prime(x):\n        if x <= 1:\n            return False\n        for i in range(2, int(x**0.5) + 1):\n            if x % i == 0:\n                return False\n        return True\n\n    largest_factor = 1\n    factor = 2\n\n    while factor * factor <= n:\n        if n % factor == 0:\n            n //= factor\n            largest_factor = factor\n        else:\n            factor += 1\n\n    if n > 1:\n        largest_factor = n\n\n    return largest_factor\n\n# Test cases\nprint(largest_prime_factor(13195))  # Expected: 29\nprint(largest_prime_factor(2048))   # Expected: 2\nprint(largest_prime_factor(2))      # Expected: 2\n\n# Edge cases\ntry:\n    print(largest_prime_factor(-10))  # Expected: ValueError\nexcept ValueError as e:\n    print(e)\n\ntry:\n    print(largest_prime_factor(1))  # Expected: ValueError\nexcept ValueError as e:\n    print(e)\n\ntry:\n    print(largest_prime_factor(1.5))  # Expected: ValueError\nexcept ValueError as e:\n    print(e)\n\ntry:\n    print(largest_prime_factor(\"100\"))  # Expected: ValueError\nexcept ValueError as e:\n    print(e)\n"}
{"task_id": "HumanEval/57", "solution": "\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if not l:\n        return True\n    increasing = decreasing = True\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n    return increasing or decreasing\n\n# Test cases\ntest_cases = [\n    ([1, 2, 4, 20], True),\n    ([1, 20, 4, 10], False),\n    ([4, 1, 0, -10], True),\n    ([], True),  # Edge case: empty list\n    ([1], True),  # Edge case: single element\n    ([1, 1, 1, 1], True),  # Edge case: all elements are the same\n    ([1, 2, 2, 3], True),  # Edge case: non-decreasing list\n    ([3, 2, 2, 1], True),  # Edge case: non-increasing list\n    ([1, 'a', 3], 'TypeError'),  # Edge case: mixed data types\n]\n\n# Running the test cases\nfor i, (input_list, expected) in enumerate(test_cases):\n    try:\n        result = monotonic(input_list)\n        assert result == expected, f\"Test case {i+1} failed: expected {expected}, got {result}\"\n    except TypeError:\n        assert expected == 'TypeError', f\"Test case {i+1} failed: expected TypeError, got {result}\"\n    except Exception as e:\n        print(f\"Test case {i+1} failed with unexpected exception: {e}\")\n\nprint(\"All test cases passed!\")\n"}
{"task_id": "HumanEval/60", "solution": "\ndef sum_to_n(n):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    >>> sum_to_n(0)\n    0\n    >>> sum_to_n(-5)\n    0\n    >>> sum_to_n(10.5)\n    55\n    >>> sum_to_n(\"10\")\n    55\n    \"\"\"\n    if isinstance(n, str):\n        try:\n            n = int(n)\n        except ValueError:\n            raise ValueError(\"Input string must be convertible to an integer.\")\n    elif isinstance(n, float):\n        n = int(n)\n    elif not isinstance(n, int):\n        raise TypeError(\"Input must be an integer, float, or string convertible to an integer.\")\n    \n    if n < 0:\n        return 0\n    \n    return sum(range(1, n + 1))\n"}
{"task_id": "HumanEval/62", "solution": "\ndef derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    >>> derivative([])\n    []\n    >>> derivative([5])\n    []\n    >>> derivative([1.5, 2.5, 3.5])\n    [2.5, 7.0]\n    >>> derivative([-1, -2, -3])\n    [-2, -6]\n    >>> derivative([1, 'a', 3])\n    Traceback (most recent call last):\n        ...\n    ValueError: All elements must be numeric\n    \"\"\"\n    if not all(isinstance(x, (int, float)) for x in xs):\n        raise ValueError(\"All elements must be numeric\")\n    return [i * xs[i] for i in range(1, len(xs))]\n\n# Test cases\nprint(derivative([3, 1, 2, 4, 5]))  # [1, 4, 12, 20]\nprint(derivative([1, 2, 3]))        # [2, 6]\nprint(derivative([]))               # []\nprint(derivative([5]))              # []\nprint(derivative([1.5, 2.5, 3.5]))  # [2.5, 7.0]\nprint(derivative([-1, -2, -3]))     # [-2, -6]\ntry:\n    print(derivative([1, 'a', 3]))  # Should raise ValueError\nexcept ValueError as e:\n    print(e)\n"}
{"task_id": "HumanEval/63", "solution": "\ndef fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibonacci sequence that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer\")\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n    \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    \n    fibfib_seq = [0, 0, 1]\n    for i in range(3, n + 1):\n        next_value = fibfib_seq[-1] + fibfib_seq[-2] + fibfib_seq[-3]\n        fibfib_seq.append(next_value)\n    \n    return fibfib_seq[n]\n\n# Test cases to validate the function\nprint(fibfib(1))  # Expected output: 0\nprint(fibfib(5))  # Expected output: 4\nprint(fibfib(8))  # Expected output: 24\n\n# Edge cases\ntry:\n    print(fibfib(-1))  # Expected output: ValueError\nexcept ValueError as e:\n    print(e)\n\ntry:\n    print(fibfib(2.5))  # Expected output: TypeError\nexcept TypeError as e:\n    print(e)\n\ntry:\n    print(fibfib(\"10\"))  # Expected output: TypeError\nexcept TypeError as e:\n    print(e)\n\n# Large input\nprint(fibfib(20))  # Expected output: 35890\n"}
{"task_id": "HumanEval/56", "solution": "\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    if not isinstance(brackets, str):\n        raise TypeError(\"Input must be a string\")\n    \n    count = 0\n    for char in brackets:\n        if char == '<':\n            count += 1\n        elif char == '>':\n            if count == 0:\n                return False\n            count -= 1\n    return count == 0\n\ndef test_correct_bracketing():\n    # Edge cases\n    assert correct_bracketing(\"\") == True, \"Failed on empty string\"\n    assert correct_bracketing(\"<<>>\") == True, \"Failed on nested brackets\"\n    assert correct_bracketing(\"<<>\") == False, \"Failed on unbalanced brackets\"\n    assert correct_bracketing(\"><\") == False, \"Failed on incorrect order\"\n    assert correct_bracketing(\"<<><>><<>>\") == True, \"Failed on complex nested brackets\"\n    \n    # Non-bracket characters\n    assert correct_bracketing(\"<a>\") == True, \"Failed on non-bracket characters\"\n    assert correct_bracketing(\"<a><b>\") == True, \"Failed on multiple non-bracket characters\"\n    assert correct_bracketing(\"<a><b>>\") == True, \"Failed on multiple non-bracket characters with extra closing\"\n    assert correct_bracketing(\"<a><b><\") == False, \"Failed on multiple non-bracket characters with extra opening\"\n    \n    # Incorrect data types\n    try:\n        correct_bracketing(None)\n    except TypeError:\n        pass\n    else:\n        assert False, \"Failed on None input\"\n    \n    try:\n        correct_bracketing(123)\n    except TypeError:\n        pass\n    else:\n        assert False, \"Failed on integer input\"\n    \n    try:\n        correct_bracketing([\"<\", \">\"])\n    except TypeError:\n        pass\n    else:\n        assert False, \"Failed on list input\"\n    \n    print(\"All tests passed!\")\n\n# Run the tests\ntest_correct_bracketing()\n"}
{"task_id": "HumanEval/64", "solution": "\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    if not isinstance(s, str):\n        raise ValueError(\"Input must be a string\")\n    \n    vowels = \"aeiou\"\n    s = s.lower()\n    count = sum(1 for char in s if char in vowels)\n    if s.endswith('y'):\n        count += 1\n    return count\n\n# Test cases\nprint(vowels_count(\"abcde\"))  # 2\nprint(vowels_count(\"ACEDY\"))  # 3\nprint(vowels_count(\"y\"))      # 1\nprint(vowels_count(\"Y\"))      # 1\nprint(vowels_count(\"bcdfg\"))  # 0\nprint(vowels_count(\"AEIOUY\")) # 6\nprint(vowels_count(\"aeiou\"))  # 5\nprint(vowels_count(\"AEIOU\"))  # 5\n\n# Additional edge cases\nprint(vowels_count(\"\"))       # 0, empty string\nprint(vowels_count(\"12345\"))  # 0, no vowels\nprint(vowels_count(\"a1e2i3o4u5\"))  # 5, vowels with numbers\nprint(vowels_count(\"!@#$%^&*()\"))  # 0, special characters\nprint(vowels_count(\"aeiouy\"))  # 6, 'y' at the end\nprint(vowels_count(\"AEIOUY\"))  # 6, 'Y' at the end\nprint(vowels_count(\"AEIOU123\"))  # 5, vowels with numbers\nprint(vowels_count(\"AEIOU!@#\"))  # 5, vowels with special characters\n\n# Test cases for non-string inputs\ntry:\n    print(vowels_count(12345))  # Should raise ValueError\nexcept ValueError as e:\n    print(e)\n\ntry:\n    print(vowels_count([\"a\", \"e\", \"i\", \"o\", \"u\"]))  # Should raise ValueError\nexcept ValueError as e:\n    print(e)\n\ntry:\n    print(vowels_count(None))  # Should raise ValueError\nexcept ValueError as e:\n    print(e)\n"}
{"task_id": "HumanEval/61", "solution": "\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \"\"\"\n    if not isinstance(brackets, str):\n        raise TypeError(\"Input must be a string\")\n    \n    stack = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0\n\ndef test_correct_bracketing():\n    # Edge cases\n    assert correct_bracketing(\"\") == True, \"Failed on empty string\"\n    assert correct_bracketing(\"()()\") == True, \"Failed on multiple pairs\"\n    assert correct_bracketing(\"((()))\") == True, \"Failed on nested brackets\"\n    assert correct_bracketing(\"(()\") == False, \"Failed on unbalanced brackets\"\n    assert correct_bracketing(\")(\") == False, \"Failed on incorrect order\"\n    assert correct_bracketing(\"()(\") == False, \"Failed on unbalanced brackets with extra opening\"\n    assert correct_bracketing(\"())\") == False, \"Failed on unbalanced brackets with extra closing\"\n    \n    # Non-bracket characters\n    assert correct_bracketing(\"(a)\") == True, \"Failed on non-bracket characters\"\n    assert correct_bracketing(\"a(b)c\") == True, \"Failed on non-bracket characters\"\n    assert correct_bracketing(\"(a(b)c)\") == True, \"Failed on nested non-bracket characters\"\n    assert correct_bracketing(\"(a(b)c\") == False, \"Failed on unbalanced with non-bracket characters\"\n    \n    # Different data types\n    try:\n        correct_bracketing(123)\n    except TypeError:\n        pass\n    else:\n        assert False, \"Failed on integer input\"\n    \n    try:\n        correct_bracketing([\"(\", \")\"])\n    except TypeError:\n        pass\n    else:\n        assert False, \"Failed on list input\"\n    \n    try:\n        correct_bracketing({\"(\": \")\"})\n    except TypeError:\n        pass\n    else:\n        assert False, \"Failed on dictionary input\"\n    \n    print(\"All tests passed!\")\n\ntest_correct_bracketing()\n"}
{"task_id": "HumanEval/66", "solution": "\ndef digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    if not isinstance(s, str):\n        raise TypeError(\"Input must be a string\")\n    \n    total = 0\n    for char in s:\n        if 'A' <= char <= 'Z':\n            total += ord(char)\n    return total\n\n# Test cases\nprint(digitSum(\"\"))  # Expected output: 0\nprint(digitSum(\"abAB\"))  # Expected output: 131\nprint(digitSum(\"abcCd\"))  # Expected output: 67\nprint(digitSum(\"helloE\"))  # Expected output: 69\nprint(digitSum(\"woArBld\"))  # Expected output: 131\nprint(digitSum(\"aAaaaXa\"))  # Expected output: 153\nprint(digitSum(\"12345\"))  # Expected output: 0\nprint(digitSum(\"!@#$%^&*()\"))  # Expected output: 0\nprint(digitSum(\"ABC\"))  # Expected output: 198\nprint(digitSum(\"aBcDeFgHiJ\"))  # Expected output: 372\n\n# Test with non-string input\ntry:\n    print(digitSum(12345))  # Expected output: TypeError\nexcept TypeError as e:\n    print(e)\n\ntry:\n    print(digitSum([\"A\", \"B\", \"C\"]))  # Expected output: TypeError\nexcept TypeError as e:\n    print(e)\n<execute>"}
{"task_id": "HumanEval/67", "solution": "\ndef fruit_distribution(s, n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    if not isinstance(s, str):\n        raise ValueError(\"The first argument must be a string.\")\n    if not isinstance(n, int):\n        raise ValueError(\"The second argument must be an integer.\")\n    \n    try:\n        parts = s.split()\n        apples = int(parts[0])\n        oranges = int(parts[3])\n    except (ValueError, IndexError):\n        raise ValueError(\"The string must be in the format '<number> apples and <number> oranges'.\")\n    \n    if apples < 0 or oranges < 0:\n        raise ValueError(\"The number of apples and oranges must be non-negative.\")\n    \n    mangoes = n - apples - oranges\n    \n    if mangoes < 0:\n        raise ValueError(\"The total number of fruits cannot be less than the sum of apples and oranges.\")\n    \n    return mangoes\n\n# Test cases to validate the function\nprint(fruit_distribution(\"5 apples and 6 oranges\", 19))  # Expected output: 8\nprint(fruit_distribution(\"0 apples and 1 oranges\", 3))   # Expected output: 2\nprint(fruit_distribution(\"2 apples and 3 oranges\", 100)) # Expected output: 95\nprint(fruit_distribution(\"100 apples and 1 oranges\", 120)) # Expected output: 19\n\n# Edge cases\ntry:\n    print(fruit_distribution(\"5 apples and oranges\", 19))  # Should raise ValueError\nexcept ValueError as e:\n    print(e)\n\ntry:\n    print(fruit_distribution(\"5 apples and -6 oranges\", 19))  # Should raise ValueError\nexcept ValueError as e:\n    print(e)\n\ntry:\n    print(fruit_distribution(123, 19))  # Should raise ValueError\nexcept ValueError as e:\n    print(e)\n\ntry:\n    print(fruit_distribution(\"5 apples and 6 oranges\", \"19\"))  # Should raise ValueError\nexcept ValueError as e:\n    print(e)\n\ntry:\n    print(fruit_distribution(\"5 apples and 6 oranges\", 10))  # Should raise ValueError\nexcept ValueError as e:\n    print(e)\n"}
{"task_id": "HumanEval/68", "solution": "\ndef pluck(arr):\n    \"\"\"\n    Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smallest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n    \"\"\"\n    smallest_even = float('inf')\n    index = -1\n    \n    for i, num in enumerate(arr):\n        if num % 2 == 0 and num < smallest_even:\n            smallest_even = num\n            index = i\n    \n    return [smallest_even, index] if index != -1 else []\n\n# Test cases\ntest_cases = [\n    ([4, 2, 3], [2, 1]),\n    ([1, 2, 3], [2, 1]),\n    ([], []),\n    ([5, 0, 3, 0, 4, 2], [0, 1]),\n    ([1, 3, 5, 7], []),  # No even numbers\n    ([2, 4, 6, 8], [2, 0]),  # All even numbers\n    ([8, 6, 4, 2], [2, 3]),  # Descending even numbers\n    ([0, 0, 0, 0], [0, 0]),  # All zeros\n    ([1, 3, 5, 7, 2], [2, 4]),  # Even number at the end\n    ([2], [2, 0]),  # Single element which is even\n    ([1], []),  # Single element which is odd\n]\n\n# Running the test cases\nresults = []\nfor i, (input_data, expected) in enumerate(test_cases):\n    result = pluck(input_data)\n    results.append((result == expected, result, expected))\n\nprint(results)\n"}
{"task_id": "HumanEval/69", "solution": "\ndef search(lst):\n    from collections import Counter\n    \n    # Check if the list is empty\n    if not lst:\n        return -1\n    \n    # Check if all elements are positive integers\n    if not all(isinstance(x, int) and x > 0 for x in lst):\n        raise ValueError(\"All elements must be positive integers.\")\n    \n    # Count the frequency of each integer in the list\n    freq = Counter(lst)\n    \n    # Initialize the result as -1 (default if no such integer is found)\n    result = -1\n    \n    # Iterate through the unique integers in the list\n    for num in freq:\n        # Check if the frequency of the integer is greater than or equal to the integer itself\n        if freq[num] >= num:\n            # Update the result with the greatest integer found\n            result = max(result, num)\n    \n    return result\n\n# Examples\nprint(search([4, 1, 2, 2, 3, 1]))  # Should return 2\nprint(search([1, 2, 2, 3, 3, 3, 4, 4, 4]))  # Should return 3\nprint(search([5, 5, 4, 4, 4]))  # Should return -1\n\n# Edge Cases\nprint(search([]))  # Should return -1 (empty list)\nprint(search([1]))  # Should return 1 (single element list)\nprint(search([2, 2, 2, 2]))  # Should return 2 (all elements the same)\nprint(search([1000000, 1000000, 1000000]))  # Should return 1000000 (large numbers)\n\ntry:\n    print(search([1, 2, '3', 4]))  # Should raise ValueError\nexcept ValueError as e:\n    print(e)\n\ntry:\n    print(search([1, -2, 3, 4]))  # Should raise ValueError\nexcept ValueError as e:\n    print(e)\n"}
{"task_id": "HumanEval/72", "solution": "\ndef will_it_fly(q, w):\n    # Check if q is a list\n    if not isinstance(q, list):\n        raise ValueError(\"The first argument must be a list.\")\n    \n    # Check if w is a number (int or float)\n    if not isinstance(w, (int, float)):\n        raise ValueError(\"The second argument must be a number (int or float).\")\n    \n    # Check if all elements in q are numbers (int or float)\n    if not all(isinstance(i, (int, float)) for i in q):\n        raise ValueError(\"All elements in the list must be numbers (int or float).\")\n    \n    # Check if the list is a palindrome\n    if q != q[::-1]:\n        return False\n    \n    # Check if the sum of the elements is less than or equal to the maximum possible weight\n    if sum(q) > w:\n        return False\n    \n    return True\n\n# Example usage\nprint(will_it_fly([1, 2], 5))  # False\nprint(will_it_fly([3, 2, 3], 1))  # False\nprint(will_it_fly([3, 2, 3], 9))  # True\nprint(will_it_fly([3], 5))  # True\n\n# Edge cases\nprint(will_it_fly([], 5))  # True, empty list is balanced and sum is 0\nprint(will_it_fly([1, 2, 1], -1))  # False, sum is greater than negative weight\ntry:\n    print(will_it_fly(\"not a list\", 5))  # Should raise ValueError\nexcept ValueError as e:\n    print(e)\ntry:\n    print(will_it_fly([1, 2, \"three\"], 5))  # Should raise ValueError\nexcept ValueError as e:\n    print(e)\ntry:\n    print(will_it_fly([1, 2, 3], \"not a number\"))  # Should raise ValueError\nexcept ValueError as e:\n    print(e)\n"}
{"task_id": "HumanEval/71", "solution": "\nimport math\n\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    # Check if inputs are numbers\n    if not all(isinstance(x, (int, float)) for x in [a, b, c]):\n        return -1\n    \n    # Check if any side is non-positive\n    if a <= 0 or b <= 0 or c <= 0:\n        return -1\n    \n    # Check if the sides form a valid triangle\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    \n    # Calculate the semi-perimeter\n    s = (a + b + c) / 2\n    \n    # Calculate the area using Heron's formula\n    area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n    \n    # Return the area rounded to 2 decimal places\n    return round(area, 2)\n\n# Test cases to validate the function\ntest_cases = [\n    (3, 4, 5),  # Expected: 6.00\n    (1, 2, 10),  # Expected: -1\n    (-3, 4, 5),  # Expected: -1\n    (3, 0, 5),  # Expected: -1\n    (3, 4, 'a'),  # Expected: -1\n    (1e308, 1e308, 1e308),  # Expected: a large number\n    (0.1, 0.1, 0.1)  # Expected: a small number\n]\n\nresults = [triangle_area(*case) for case in test_cases]\nprint(results)\n"}
{"task_id": "HumanEval/70", "solution": "\ndef strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    result = []\n    while lst:\n        result.append(min(lst))\n        lst.remove(min(lst))\n        if lst:\n            result.append(max(lst))\n            lst.remove(max(lst))\n    return result\n"}
{"task_id": "HumanEval/65", "solution": "\ndef circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    if not isinstance(x, int) or not isinstance(shift, int):\n        raise ValueError(\"Both x and shift must be integers.\")\n    \n    x_str = str(x)\n    num_digits = len(x_str)\n    \n    if x < 0:\n        x_str = x_str[1:]  # Remove the negative sign for processing\n        num_digits -= 1\n    \n    if shift == 0:\n        return '-' + x_str if x < 0 else x_str\n    \n    shift = shift % num_digits  # Handle cases where shift is greater than num_digits\n    if shift < 0:\n        shift = num_digits + shift  # Convert negative shift to positive equivalent\n    \n    if shift > num_digits:\n        result = x_str[::-1]\n    else:\n        result = x_str[-shift:] + x_str[:-shift]\n    \n    return '-' + result if x < 0 else result\n\n# Test cases to validate the function\ntest_cases = [\n    (12, 1, \"21\"),\n    (12, 2, \"12\"),\n    (12, 3, \"21\"),  # shift > number of digits\n    (-123, 1, \"-312\"),\n    (-123, 4, \"-321\"),  # shift > number of digits\n    (123, 0, \"123\"),  # zero shift\n    (5, 1, \"5\"),  # single digit number\n    (123, -1, \"312\"),  # negative shift\n]\n\n# Running the test cases\nfor x, shift, expected in test_cases:\n    result = circular_shift(x, shift)\n    print(f\"circular_shift({x}, {shift}) = {result}, expected = {expected}, passed = {result == expected}\")\n\n# Testing error cases\ntry:\n    circular_shift(\"123\", 1)  # Error: x is not an integer\nexcept ValueError as e:\n    print(e)\n\ntry:\n    circular_shift(123, \"1\")  # Error: shift is not an integer\nexcept ValueError as e:\n    print(e)\n"}
{"task_id": "HumanEval/58", "solution": "\ndef common(l1, l2):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    >>> common([], [])\n    []\n    >>> common([1, 2, 3], [])\n    []\n    >>> common([], [1, 2, 3])\n    []\n    >>> common([1, 'a', 3.0], ['a', 3.0, 4])\n    [3.0, 'a']\n    >>> common([1, 2, 2, 3], [2, 2, 4])\n    [2]\n    >>> common([1, [2, 3]], [[2, 3], 4])\n    [[2, 3]]\n    >>> common(\"not a list\", [1, 2, 3])\n    Traceback (most recent call last):\n        ...\n    TypeError: Both inputs must be lists.\n    >>> common([1, 2, 3], \"not a list\")\n    Traceback (most recent call last):\n        ...\n    TypeError: Both inputs must be lists.\n    \"\"\"\n    if not isinstance(l1, list) or not isinstance(l2, list):\n        raise TypeError(\"Both inputs must be lists.\")\n    \n    # Convert nested lists to tuples\n    def convert_to_hashable(item):\n        if isinstance(item, list):\n            return tuple(item)\n        return item\n    \n    set1 = set(convert_to_hashable(item) for item in l1)\n    set2 = set(convert_to_hashable(item) for item in l2)\n    \n    # Find the intersection of the two sets\n    common_elements = set1 & set2\n    \n    # Convert the set to a sorted list if elements are comparable\n    try:\n        sorted_common_elements = sorted(common_elements)\n    except TypeError:\n        sorted_common_elements = list(common_elements)\n    \n    # Convert tuples back to lists\n    def convert_back(item):\n        if isinstance(item, tuple):\n            return list(item)\n        return item\n    \n    return [convert_back(item) for item in sorted_common_elements]\n\n# Test cases\ntest_cases = [\n    ([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121], [1, 5, 653]),\n    ([5, 3, 2, 8], [3, 2], [2, 3]),\n    ([], [], []),\n    ([1, 2, 3], [], []),\n    ([], [1, 2, 3], []),\n    ([1, 'a', 3.0], ['a', 3.0, 4], [3.0, 'a']),\n    ([1, 2, 2, 3], [2, 2, 4], [2]),\n    ([1, [2, 3]], [[2, 3], 4], [[2, 3]]),\n]\n\n# Run test cases\nfor i, (l1, l2, expected) in enumerate(test_cases):\n    try:\n        result = common(l1, l2)\n        assert result == expected, f\"Test case {i+1} failed: expected {expected}, got {result}\"\n        print(f\"Test case {i+1} passed\")\n    except Exception as e:\n        print(f\"Test case {i+1} raised an exception: {e}\")\n\n# Test cases for non-list inputs\nnon_list_test_cases = [\n    (\"not a list\", [1, 2, 3]),\n    ([1, 2, 3], \"not a list\"),\n]\n\nfor i, (l1, l2) in enumerate(non_list_test_cases, start=len(test_cases) + 1):\n    try:\n        common(l1, l2)\n        print(f\"Test case {i} failed: expected TypeError\")\n    except TypeError as e:\n        print(f\"Test case {i} passed with TypeError: {e}\")\n    except Exception as e:\n        print(f\"Test case {i} raised an unexpected exception: {e}\")\n<execute>"}
{"task_id": "HumanEval/75", "solution": "\ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    # Check if input is an integer\n    if not isinstance(a, int):\n        return False\n\n    # Check if input is less than 100\n    if a >= 100 or a < 8:\n        return False\n\n    primes = [i for i in range(2, 100) if is_prime(i)]\n\n    for i in range(len(primes)):\n        for j in range(i, len(primes)):\n            for k in range(j, len(primes)):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n\n    return False\n\n# Test cases to validate the function\ntest_cases = [30, 2, 1, 0, -5, 105, 8, 27, 60, 2.5, \"30\", [30], None]\n\nresults = [(test, is_multiply_prime(test)) for test in test_cases]\nprint(results)\n<execute>"}
{"task_id": "HumanEval/73", "solution": "\ndef smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    if not all(isinstance(x, int) for x in arr):\n        raise ValueError(\"All elements of the array must be integers.\")\n    \n    n = len(arr)\n    changes = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            changes += 1\n    return changes\n\n# Example usage and edge case tests\nprint(smallest_change([1, 2, 3, 5, 4, 7, 9, 6]))  # Output: 4\nprint(smallest_change([1, 2, 3, 4, 3, 2, 2]))    # Output: 1\nprint(smallest_change([1, 2, 3, 2, 1]))          # Output: 0\nprint(smallest_change([]))                       # Output: 0 (Empty array)\nprint(smallest_change([1]))                      # Output: 0 (Single element array)\nprint(smallest_change([1, 1, 1, 1]))             # Output: 0 (All identical elements)\nprint(smallest_change([-1, -2, -3, -2, -1]))     # Output: 0 (Negative numbers)\ntry:\n    print(smallest_change([1, 'a', 3, 2, 1]))    # Should raise ValueError\nexcept ValueError as e:\n    print(e)                                     # Output: All elements of the array must be integers.\n"}
{"task_id": "HumanEval/74", "solution": "\ndef total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) ➞ []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n    '''\n    # Ensure all elements in the lists are strings\n    if not all(isinstance(s, str) for s in lst1) or not all(isinstance(s, str) for s in lst2):\n        raise ValueError(\"Both lists must contain only strings.\")\n    \n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    \n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    elif total_chars_lst2 < total_chars_lst1:\n        return lst2\n    else:\n        return lst1\n\n# Test cases to validate the function\nprint(total_match([], []))  # ➞ []\nprint(total_match(['hi', 'admin'], ['hI', 'Hi']))  # ➞ ['hI', 'Hi']\nprint(total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']))  # ➞ ['hi', 'admin']\nprint(total_match(['hi', 'admin'], ['hI', 'hi', 'hi']))  # ➞ ['hI', 'hi', 'hi']\nprint(total_match(['4'], ['1', '2', '3', '4', '5']))  # ➞ ['4']\n\n# Edge cases\ntry:\n    print(total_match(['hi', 'admin'], ['hi', 123]))  # Should raise ValueError\nexcept ValueError as e:\n    print(e)\n\nprint(total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project', '!@#']))  # ➞ ['hi', 'admin']\nprint(total_match(['hi', 'admin'], ['HI', 'HI']))  # ➞ ['hi', 'admin']\nprint(total_match(['hi', 'admin'], ['hi', 'hi', 'hi']))  # ➞ ['hi', 'hi', 'hi']\nprint(total_match(['4'], ['1', '2', '3', '4', '5', '6']))  # ➞ ['4']\n"}
{"task_id": "HumanEval/79", "solution": "\ndef decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    if not isinstance(decimal, int):\n        raise ValueError(\"Input must be an integer\")\n    if decimal < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n    \n    binary_str = bin(decimal)[2:]  # Convert to binary and remove the '0b' prefix\n    return f\"db{binary_str}db\"\n\n# Test cases to validate the function\nprint(decimal_to_binary(15))   # Expected: \"db1111db\"\nprint(decimal_to_binary(32))   # Expected: \"db100000db\"\nprint(decimal_to_binary(0))    # Expected: \"db0db\"\ntry:\n    print(decimal_to_binary(-5))  # Expected: ValueError\nexcept ValueError as e:\n    print(e)\ntry:\n    print(decimal_to_binary(3.14))  # Expected: ValueError\nexcept ValueError as e:\n    print(e)\ntry:\n    print(decimal_to_binary(\"100\"))  # Expected: ValueError\nexcept ValueError as e:\n    print(e)\ntry:\n    print(decimal_to_binary(None))  # Expected: ValueError\nexcept ValueError as e:\n    print(e)\n"}
{"task_id": "HumanEval/78", "solution": "\ndef hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if not isinstance(num, str):\n        raise ValueError(\"Input must be a string\")\n    \n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    count = 0\n    for char in num.upper():\n        if char in prime_hex_digits:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/77", "solution": "\ndef iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this integer is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    if not isinstance(a, int):\n        raise ValueError(\"Input must be an integer\")\n    \n    if a == 0:\n        return True\n    abs_a = abs(a)\n    cube_root = round(abs_a ** (1/3))\n    return cube_root ** 3 == abs_a\n\n# Test cases\ntest_cases = [\n    (1, True),\n    (2, False),\n    (-1, True),\n    (64, True),\n    (0, True),\n    (180, False),\n    (27, True),\n    (-27, True),\n    (1000000000, False),\n    (1000000000**3, True),\n]\n\n# Running the test cases\nfor i, (input_val, expected) in enumerate(test_cases):\n    try:\n        result = iscube(input_val)\n        print(f\"Test case {i+1}: iscube({input_val}) = {result} (Expected: {expected})\")\n    except Exception as e:\n        print(f\"Test case {i+1}: iscube({input_val}) raised an exception: {e}\")\n\n# Test case for non-integer input\ntry:\n    iscube(\"string\")\nexcept ValueError as e:\n    print(f\"Test case for non-integer input: Passed (Raised ValueError: {e})\")\nexcept Exception as e:\n    print(f\"Test case for non-integer input: Failed (Raised different exception: {e})\")\nelse:\n    print(\"Test case for non-integer input: Failed (No exception raised)\")\n"}
{"task_id": "HumanEval/81", "solution": "\ndef numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    letter_grades = []\n    for gpa in grades:\n        if not isinstance(gpa, (int, float)):\n            letter_grades.append('Invalid')\n        elif gpa < 0:\n            letter_grades.append('Invalid')\n        elif gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades\n\n# Test cases to verify the function\ntest_cases = [\n    [],  # Empty list\n    [4.0, 3, 1.7, 2, 3.5],  # Normal case\n    [4.1, -1, 'A', None],  # Invalid values\n    [3.7, 2.3, 1.0, 0.0],  # Boundary values\n    [3.7, 2.3, 1.0, 0.0, '3.5', 2.5, 1.5, 0.5]  # Mixed data types\n]\n\nfor i, test in enumerate(test_cases):\n    print(f\"Test case {i+1}: {test} => {numerical_letter_grade(test)}\")\n"}
{"task_id": "HumanEval/84", "solution": "\ndef solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 ≤ N ≤ 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Check if N is an integer\n    if not isinstance(N, int):\n        raise ValueError(\"Input must be an integer\")\n    \n    # Check if N is within the valid range\n    if N < 0 or N > 10000:\n        raise ValueError(\"Input must be between 0 and 10000 inclusive\")\n    \n    # Convert the integer N to its individual digits and sum them\n    digit_sum = sum(int(digit) for digit in str(N))\n    \n    # Convert the sum to binary and return the binary string\n    return bin(digit_sum)[2:]\n\n# Test cases to validate the function\ntest_cases = [0, 10000, 5, 1234, 9999, \"1000\", -1]\n\nfor test in test_cases:\n    try:\n        print(f\"solve({test}) = {solve(test)}\")\n    except Exception as e:\n        print(f\"solve({test}) raised an exception: {e}\")\n"}
{"task_id": "HumanEval/86", "solution": "\ndef anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n    if not isinstance(s, str):\n        raise TypeError(\"Input must be a string\")\n    \n    import re\n    \n    # Split the string into words and spaces\n    parts = re.split(r'(\\s+)', s)\n    \n    # Sort characters in each word\n    sorted_parts = [''.join(sorted(part)) if not part.isspace() else part for part in parts]\n    \n    # Join the parts back together\n    return ''.join(sorted_parts)\n\n# Test cases\nprint(anti_shuffle('Hi'))  # Output: 'Hi'\nprint(anti_shuffle('hello'))  # Output: 'ehllo'\nprint(anti_shuffle('Hello World!!!'))  # Output: 'Hello !!!Wdlor'\nprint(anti_shuffle(''))  # Output: ''\nprint(anti_shuffle('   '))  # Output: '   '\nprint(anti_shuffle('123 456'))  # Output: '123 456'\nprint(anti_shuffle('a1b2c3'))  # Output: '123abc'\nprint(anti_shuffle('!@# $%^'))  # Output: '#!@ ^%$'\nprint(anti_shuffle('Mixed CASE'))  # Output: 'CEMdix aES'\n\n# Test non-string input\ntry:\n    print(anti_shuffle(123))\nexcept TypeError as e:\n    print(e)  # Output: Input must be a string\n\ntry:\n    print(anti_shuffle(['Hello', 'World']))\nexcept TypeError as e:\n    print(e)  # Output: Input must be a string\n"}
{"task_id": "HumanEval/87", "solution": "\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    if not isinstance(lst, list) or not all(isinstance(row, list) for row in lst):\n        raise ValueError(\"Input must be a list of lists\")\n    \n    coordinates = []\n    \n    for row_index, row in enumerate(lst):\n        for col_index, value in enumerate(row):\n            if value == x:\n                coordinates.append((row_index, col_index))\n    \n    coordinates.sort(key=lambda coord: (coord[0], -coord[1]))\n    \n    return coordinates\n\n# Test cases to validate the function\nprint(get_row([\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n], 1))  # Expected: [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\nprint(get_row([], 1))  # Expected: []\n\nprint(get_row([[], [1], [1, 2, 3]], 3))  # Expected: [(2, 2)]\n\nprint(get_row([[1, 'a', 3], [4, 5, 6]], 1))  # Expected: [(0, 0)]\n\nprint(get_row([[0, -1, -2], [-3, -4, 0]], 0))  # Expected: [(0, 0), (1, 2)]\n\nprint(get_row([[10**10, 10**12], [10**15, 10**10]], 10**10))  # Expected: [(0, 0), (1, 1)]\n\ntry:\n    print(get_row(\"not a list\", 1))  # Expected: ValueError\nexcept ValueError as e:\n    print(e)\n\ntry:\n    print(get_row([1, 2, 3], 1))  # Expected: ValueError\nexcept ValueError as e:\n    print(e)\n"}
{"task_id": "HumanEval/89", "solution": "\ndef encrypt(s):\n    if not isinstance(s, str):\n        raise ValueError(\"Input must be a string\")\n    \n    def shift_char(c):\n        if 'a' <= c <= 'z':\n            return chr(((ord(c) - ord('a') + 4) % 26) + ord('a'))\n        elif 'A' <= c <= 'Z':\n            return chr(((ord(c) - ord('A') + 4) % 26) + ord('A'))\n        else:\n            return c\n    \n    return ''.join(shift_char(c) for c in s)\n\n# Examples\nprint(encrypt('hi'))  # should return 'lm'\nprint(encrypt('asdfghjkl'))  # should return 'ewhjklnop'\nprint(encrypt('gf'))  # should return 'kj'\nprint(encrypt('et'))  # should return 'ix'\n\n# Edge cases\nprint(encrypt(''))  # should return ''\nprint(encrypt('123'))  # should return '123'\nprint(encrypt('Hello, World!'))  # should return 'Lipps, Asvph!'\nprint(encrypt('hI'))  # should return 'lM'\nprint(encrypt('Hi'))  # should return 'Lm'\n\n# Non-string input\ntry:\n    print(encrypt(123))  # should raise ValueError\nexcept ValueError as e:\n    print(e)  # should print \"Input must be a string\"\n"}
{"task_id": "HumanEval/83", "solution": "The function `starts_one_ends` has been tested and the results are as follows:\n\n- For `n = 1`, the output is `1` (expected: `1`).\n- For `n = 2`, the output is `9` (expected: `19`).\n- For `n = 3`, the output is `90` (expected: `190`).\n- For `n = 10`, the output is `900000000` (expected: `1999999990`).\n\nThe function correctly raises `ValueError` for the following edge cases:\n- `n = 0`\n- `n = -5`\n- `n = \"a\"`\n- `n = 1.5`\n\nHowever, the function's logic for counting the numbers that start or end with 1 still seems to be incorrect. The expected results for `n = 2`, `n = 3`, and `n = 10` do not match the actual results.\n\n"}
{"task_id": "HumanEval/91", "solution": "\ndef is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    if not isinstance(S, str):\n        raise ValueError(\"Input must be a string\")\n    \n    import re\n    # Split the string into sentences using regex\n    sentences = re.split(r'[.?!]', S)\n    # Trim whitespace and count sentences starting with \"I\"\n    boredom_count = sum(1 for sentence in sentences if sentence.strip().startswith(\"I\"))\n    return boredom_count\n\n# Test cases\nassert is_bored(\"\") == 0\nassert is_bored(\"Hello world\") == 0\nassert is_bored(\"The sky is blue. The sun is shining. I love this weather\") == 1\nassert is_bored(\"I am happy. I am sad. I am bored.\") == 3\nassert is_bored(\"i am happy. I am sad. i am bored.\") == 1\nassert is_bored(\"   I am happy.   I am sad.   I am bored.   \") == 3\nassert is_bored(\"...!!!???\") == 0\nassert is_bored(\"I. I? I!\") == 3\n\ntry:\n    is_bored(123)\nexcept ValueError as e:\n    assert str(e) == \"Input must be a string\"\n\nprint(\"All test cases passed!\")\n"}
{"task_id": "HumanEval/88", "solution": "\ndef sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if not array:\n        return []\n    \n    if len(array) == 1:\n        return array.copy()\n    \n    # Check for non-integer types\n    if not all(isinstance(x, int) for x in array):\n        raise ValueError(\"All elements must be non-negative integers\")\n    \n    # Check for negative numbers\n    if any(x < 0 for x in array):\n        raise ValueError(\"All elements must be non-negative integers\")\n    \n    first_last_sum = array[0] + array[-1]\n    \n    if first_last_sum % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)\n\n# Test cases\nprint(sort_array([]))  # => []\nprint(sort_array([5]))  # => [5]\nprint(sort_array([2, 4, 3, 0, 1, 5]))  # => [0, 1, 2, 3, 4, 5]\nprint(sort_array([2, 4, 3, 0, 1, 5, 6]))  # => [6, 5, 4, 3, 2, 1, 0]\nprint(sort_array([1, 1, 1, 1]))  # => [1, 1, 1, 1]\nprint(sort_array([1, 2]))  # => [2, 1]\nprint(sort_array([2, 1]))  # => [2, 1]\n\n# Edge cases\ntry:\n    print(sort_array([-1, 2, 3]))  # Should raise ValueError\nexcept ValueError as e:\n    print(e)\n\ntry:\n    print(sort_array([1, 2, '3']))  # Should raise ValueError\nexcept ValueError as e:\n    print(e)\n\ntry:\n    print(sort_array([1, 2, 3.5]))  # Should raise ValueError\nexcept ValueError as e:\n    print(e)\n"}
{"task_id": "HumanEval/96", "solution": "\ndef count_up_to(n):\n    \"\"\"Implement a function that takes a non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    if not isinstance(n, int):\n        raise ValueError(\"Input must be a non-negative integer\")\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n    \n    return primes\n"}
{"task_id": "HumanEval/93", "solution": "\ndef encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    if not isinstance(message, str):\n        return None\n    \n    vowels = 'aeiouAEIOU'\n    replacement = 'cgkqwCGKQW'\n    trans = str.maketrans(vowels, replacement)\n    \n    return message.translate(trans).swapcase()\n\ndef test_encode():\n    test_cases = [\n        (\"\", \"\"),  # Empty string\n        (\"a\", \"C\"),  # Single vowel\n        (\"b\", \"B\"),  # Single consonant\n        (\"aeiou\", \"CGKQW\"),  # All vowels\n        (\"bcdfg\", \"BCDFG\"),  # All consonants\n        (\"This is a message\", \"tHKS KS C MGSSCGG\"),  # Mixed case\n        (\"AEIOU\", \"CGKQW\"),  # Uppercase vowels\n        (\"BCDFG\", \"bcdfg\"),  # Uppercase consonants\n        (123, None),  # Non-string input\n        (None, None),  # None input\n    ]\n    \n    for i, (input_value, expected_output) in enumerate(test_cases):\n        try:\n            result = encode(input_value)\n            assert result == expected_output, f\"Test case {i+1} failed: {result} != {expected_output}\"\n        except Exception as e:\n            assert expected_output is None, f\"Test case {i+1} failed with exception: {e}\"\n    \n    print(\"All test cases passed!\")\n\n# Run the test suite\ntest_encode()\n"}
{"task_id": "HumanEval/98", "solution": "\ndef count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    if not isinstance(s, str):\n        raise TypeError(\"Input must be a string\")\n    \n    uppercase_vowels = {'A', 'E', 'I', 'O', 'U'}\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in uppercase_vowels:\n            count += 1\n    return count\n\n# Test cases to validate the function\ntest_results = []\ntest_results.append(count_upper('aBCdEf') == 1)\ntest_results.append(count_upper('abcdefg') == 0)\ntest_results.append(count_upper('dBBE') == 0)\ntest_results.append(count_upper('') == 0)\ntest_results.append(count_upper('AEIOU') == 3)\ntest_results.append(count_upper('aAeEiIoOuU') == 2)\ntest_results.append(count_upper('12345!@#$%') == 0)\ntest_results.append(count_upper('A'*1000000) == 500000)\n\ntry:\n    count_upper(12345)\nexcept TypeError as e:\n    test_results.append(str(e) == \"Input must be a string\")\n\nprint(test_results)\n"}
{"task_id": "HumanEval/95", "solution": "\ndef check_dict_case(d):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False if the given dictionary is empty.\n    \"\"\"\n    if not d:\n        return False\n    \n    keys = d.keys()\n    all_lower = all(isinstance(key, str) and key.islower() for key in keys)\n    all_upper = all(isinstance(key, str) and key.isupper() for key in keys)\n    \n    return all_lower or all_upper\n\n# Test cases\ntest_cases = [\n    ({\"a\": \"apple\", \"b\": \"banana\"}, True),\n    ({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"}, False),\n    ({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"}, False),\n    ({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}, False),\n    ({\"STATE\": \"NC\", \"ZIP\": \"12345\"}, True),\n    ({}, False),  # Edge case: empty dictionary\n    ({\"a\": \"apple\", \"B\": \"banana\"}, False),  # Mixed case\n    ({\"A\": \"apple\", \"B\": \"banana\", \"C\": \"cherry\"}, True),  # All upper case\n    ({\"a\": \"apple\", \"b\": \"banana\", \"c\": \"cherry\"}, True),  # All lower case\n    ({\"a\": \"apple\", \"b\": \"banana\", \"C\": \"cherry\"}, False),  # Mixed case\n]\n\n# Execute test cases\nresults = []\nfor i, (input_dict, expected) in enumerate(test_cases):\n    result = check_dict_case(input_dict)\n    results.append((i, result == expected, result, expected))\n\nprint(results)\n"}
{"task_id": "HumanEval/99", "solution": "\ndef closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n    try:\n        num = float(value)\n    except (ValueError, TypeError):\n        raise ValueError(\"Input must be a string representing a valid number.\")\n    \n    if num > 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)\n\n# Test cases to validate the function\ntest_cases = [\n    \"10\",        # Positive integer\n    \"-10\",       # Negative integer\n    \"15.3\",      # Positive float\n    \"-15.3\",     # Negative float\n    \"14.5\",      # Positive halfway\n    \"-14.5\",     # Negative halfway\n    \"0\",         # Zero\n    \"0.5\",       # Positive close to zero\n    \"-0.5\",      # Negative close to zero\n    \"1e10\",      # Very large number\n    \"-1e10\",     # Very large negative number\n    \"1e-10\",     # Very small number\n    \"-1e-10\",    # Very small negative number\n    \"123456789.987654321\",  # Number with many decimal places\n    \"\",          # Empty string\n    None,        # None\n    \"abc\",       # Non-numeric string\n    [],          # List\n    {},          # Dictionary\n]\n\nfor case in test_cases:\n    try:\n        print(f\"closest_integer({case!r}) = {closest_integer(case)}\")\n    except Exception as e:\n        print(f\"closest_integer({case!r}) raised an exception: {e}\")\n"}
{"task_id": "HumanEval/97", "solution": "\ndef multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise TypeError(\"Both arguments must be integers\")\n    \n    unit_digit_a = abs(a) % 10\n    unit_digit_b = abs(b) % 10\n    return unit_digit_a * unit_digit_b\n\ndef test_multiply():\n    # Test with positive integers\n    assert multiply(148, 412) == 16\n    assert multiply(19, 28) == 72\n    assert multiply(2020, 1851) == 0\n    \n    # Test with negative integers\n    assert multiply(14, -15) == 20\n    assert multiply(-14, -15) == 20\n    assert multiply(-14, 15) == 20\n    \n    # Test with zero\n    assert multiply(0, 123) == 0\n    assert multiply(123, 0) == 0\n    assert multiply(0, 0) == 0\n    \n    # Test with large integers\n    assert multiply(12345678901234567890, 98765432109876543210) == 0\n    assert multiply(12345678901234567890, 98765432109876543219) == 0  # Corrected expected value\n    \n    # Test with non-integer types (should raise an error)\n    try:\n        multiply(123, \"456\")\n    except TypeError:\n        pass\n    else:\n        assert False, \"Expected TypeError\"\n    \n    try:\n        multiply(\"123\", 456)\n    except TypeError:\n        pass\n    else:\n        assert False, \"Expected TypeError\"\n    \n    try:\n        multiply(123.45, 678.90)\n    except TypeError:\n        pass\n    else:\n        assert False, \"Expected TypeError\"\n    \n    try:\n        multiply([123], 456)\n    except TypeError:\n        pass\n    else:\n        assert False, \"Expected TypeError\"\n    \n    try:\n        multiply(123, None)\n    except TypeError:\n        pass\n    else:\n        assert False, \"Expected TypeError\"\n    \n    print(\"All tests passed.\")\n\n# Run the tests\ntest_multiply()\n"}
{"task_id": "HumanEval/100", "solution": "\ndef make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n\nprint(\"Error\")"}
{"task_id": "HumanEval/101", "solution": "\ndef words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    if not isinstance(s, str):\n        raise ValueError(\"Input must be a string\")\n    \n    import re\n    # Split the string by commas or spaces\n    words = re.split(r'[,\\s]+', s)\n    # Remove any empty strings that may result from splitting\n    words = [word for word in words if word]\n    return words\n\n# Test cases\ndef test_words_string():\n    assert words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    assert words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    assert words_string(\"\") == []\n    assert words_string(\"   \") == []\n    assert words_string(\",,,\") == []\n    assert words_string(\" , , , \") == []\n    assert words_string(\"Hi, my name is John,\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    assert words_string(\"  Hi  ,  my  name  is  John  \") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    assert words_string(\"One,, two,, three,, four,, five,, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    assert words_string(\"One  two  three  four  five  six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \n    try:\n        words_string(123)\n    except ValueError as e:\n        assert str(e) == \"Input must be a string\"\n    \n    try:\n        words_string(None)\n    except ValueError as e:\n        assert str(e) == \"Input must be a string\"\n    \n    print(\"All test cases pass\")\n\ntest_words_string()\n"}
{"task_id": "HumanEval/102", "solution": "\ndef choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # Check if inputs are integers\n    if not isinstance(x, int) or not isinstance(y, int):\n        raise ValueError(\"Both x and y must be integers.\")\n    \n    # Check if inputs are positive\n    if x < 0 or y < 0:\n        raise ValueError(\"Both x and y must be positive integers.\")\n    \n    # Check if x is greater than y\n    if x > y:\n        return -1\n    \n    largest_even = -1\n    for num in range(x, y + 1):\n        if num % 2 == 0:\n            largest_even = num\n    \n    return largest_even\n\n# Test cases to validate the function\nprint(choose_num(12, 15))  # Expected output: 14\nprint(choose_num(13, 12))  # Expected output: -1\nprint(choose_num(10, 10))  # Expected output: 10\nprint(choose_num(11, 11))  # Expected output: -1\n\n# Edge cases\ntry:\n    print(choose_num(12.5, 15))  # Should raise ValueError\nexcept ValueError as e:\n    print(e)\n\ntry:\n    print(choose_num(12, -15))  # Should raise ValueError\nexcept ValueError as e:\n    print(e)\n\ntry:\n    print(choose_num(\"12\", 15))  # Should raise ValueError\nexcept ValueError as e:\n    print(e)\n"}
{"task_id": "HumanEval/103", "solution": "\ndef rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    # Check if inputs are integers\n    if not isinstance(n, int) or not isinstance(m, int):\n        return \"Inputs must be integers\"\n    \n    # Check if inputs are positive\n    if n <= 0 or m <= 0:\n        return \"Inputs must be positive integers\"\n    \n    if n > m:\n        return -1\n    \n    total_sum = sum(range(n, m + 1))\n    count = m - n + 1\n    average = total_sum / count\n    rounded_average = round(average)\n    return bin(rounded_average)\n"}
{"task_id": "HumanEval/104", "solution": "\ndef unique_digits(x):\n    \"\"\"Given a list of positive integers x, return a sorted list of all \n    elements that haven't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    def has_even_digit(n):\n        while n > 0:\n            digit = n % 10\n            if digit % 2 == 0:\n                return True\n            n //= 10\n        return False\n    \n    if not isinstance(x, list):\n        raise TypeError(\"Input should be a list of integers\")\n    \n    for num in x:\n        if not isinstance(num, int) or num < 0:\n            raise ValueError(\"All elements in the list should be positive integers\")\n    \n    result = [num for num in x if not has_even_digit(num)]\n    return sorted(result)\n\n# Test cases to validate the function\nprint(unique_digits([]))  # Expected: []\nprint(unique_digits([1]))  # Expected: [1]\nprint(unique_digits([2, 4, 6]))  # Expected: []\nprint(unique_digits([3, 5, 7]))  # Expected: [3, 5, 7]\nprint(unique_digits([15, 33, 1422, 1]))  # Expected: [1, 15, 33]\nprint(unique_digits([152, 323, 1422, 10]))  # Expected: []\ntry:\n    print(unique_digits(\"123\"))  # Expected: TypeError\nexcept TypeError as e:\n    print(e)\ntry:\n    print(unique_digits([1, -2, 3]))  # Expected: ValueError\nexcept ValueError as e:\n    print(e)\ntry:\n    print(unique_digits([1, 2.5, 3]))  # Expected: ValueError\nexcept ValueError as e:\n    print(e)\n"}
{"task_id": "HumanEval/105", "solution": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\nprint(\"Error\")"}
{"task_id": "HumanEval/106", "solution": "\ndef f(n):\n    def factorial(x):\n        result = 1\n        for i in range(1, x + 1):\n            result *= i\n        return result\n\n    def sum_to(x):\n        return sum(range(1, x + 1))\n\n    # Input validation\n    if not isinstance(n, int):\n        raise ValueError(\"Input must be an integer.\")\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_to(i))\n    return result\n\n# Example usage:\n# print(f(5))  # Output: [1, 2, 6, 24, 15]\n\n# Test cases to validate edge cases and different data types\ntry:\n    print(f(5))  # Expected: [1, 2, 6, 24, 15]\n    print(f(0))  # Expected: []\n    print(f(-1))  # Expected: ValueError\nexcept ValueError as e:\n    print(e)\n\ntry:\n    print(f(1.5))  # Expected: ValueError\nexcept ValueError as e:\n    print(e)\n\ntry:\n    print(f(\"5\"))  # Expected: ValueError\nexcept ValueError as e:\n    print(e)\n\ntry:\n    print(f(10))  # Expected: [1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800]\nexcept ValueError as e:\n    print(e)\n"}
{"task_id": "HumanEval/107", "solution": "\ndef even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n    if not isinstance(n, int):\n        raise ValueError(\"Input must be an integer.\")\n    if n < 1:\n        raise ValueError(\"Input must be a positive integer greater than or equal to 1.\")\n    if n > 1000:\n        raise ValueError(\"Input must be less than or equal to 1000.\")\n    \n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n    \n    even_count = 0\n    odd_count = 0\n    \n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    \n    return (even_count, odd_count)\n\n# Test cases to validate the function\nprint(even_odd_palindrome(3))  # Expected output: (1, 2)\nprint(even_odd_palindrome(12)) # Expected output: (4, 6)\nprint(even_odd_palindrome(1))  # Expected output: (0, 1)\nprint(even_odd_palindrome(1000)) # Expected output: (some tuple of counts)\ntry:\n    print(even_odd_palindrome(0))  # Expected to raise ValueError\nexcept ValueError as e:\n    print(e)\ntry:\n    print(even_odd_palindrome(-5))  # Expected to raise ValueError\nexcept ValueError as e:\n    print(e)\ntry:\n    print(even_odd_palindrome(\"100\"))  # Expected to raise ValueError\nexcept ValueError as e:\n    print(e)\ntry:\n    print(even_odd_palindrome(1001))  # Expected to raise ValueError\nexcept ValueError as e:\n    print(e)\n"}
{"task_id": "HumanEval/108", "solution": "\ndef count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    def sum_of_digits(num):\n        num_str = str(num)\n        if num_str[0] == '-':\n            digits = [-int(num_str[1])] + [int(d) for d in num_str[2:]]\n        else:\n            digits = [int(d) for d in num_str]\n        return sum(digits)\n    \n    if not all(isinstance(x, int) for x in arr):\n        raise ValueError(\"All elements in the array must be integers.\")\n    \n    count = 0\n    for num in arr:\n        if sum_of_digits(num) > 0:\n            count += 1\n    \n    return count\n\n# Test cases to validate the function\nprint(count_nums([]) == 0)  # Expected output: True\nprint(count_nums([-1, 11, -11]) == 1)  # Expected output: True\nprint(count_nums([1, 1, 2]) == 3)  # Expected output: True\nprint(count_nums([0, -10, 20]) == 1)  # Expected output: True\nprint(count_nums([-123, -456, -789]) == 0)  # Expected output: True\nprint(count_nums([123, -456, 789]) == 2)  # Expected output: True\n\ntry:\n    count_nums([1, 'a', 3])\nexcept ValueError as e:\n    print(e)  # Expected to raise a ValueError\n"}
{"task_id": "HumanEval/111", "solution": "\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    if not isinstance(test, str):\n        raise ValueError(\"Input must be a string\")\n    \n    if not test:\n        return {}\n    \n    letters = test.split()\n    counts = {}\n    \n    for letter in letters:\n        if not letter.islower() or len(letter) != 1:\n            raise ValueError(\"Input must be space-separated lowercase letters\")\n        if letter in counts:\n            counts[letter] += 1\n        else:\n            counts[letter] = 1\n    \n    max_count = max(counts.values())\n    result = {letter: count for letter, count in counts.items() if count == max_count}\n    \n    return result\n\n# Test cases to validate the function\ntest_cases = [\n    ('a b c', {'a': 1, 'b': 1, 'c': 1}),\n    ('a b b a', {'a': 2, 'b': 2}),\n    ('a b c a b', {'a': 2, 'b': 2}),\n    ('b b b b a', {'b': 4}),\n    ('', {}),\n    ('a', {'a': 1}),\n    ('a  b  c', {'a': 1, 'b': 1, 'c': 1}),\n    ('a b c A', ValueError),  # Non-lowercase letter\n    (123, ValueError),  # Non-string input\n    ('a b c @', ValueError)  # Special character\n]\n\nfor i, (input_str, expected) in enumerate(test_cases):\n    try:\n        result = histogram(input_str)\n        assert result == expected, f\"Test case {i+1} failed: expected {expected}, got {result}\"\n    except Exception as e:\n        assert isinstance(e, expected), f\"Test case {i+1} failed: expected exception {expected}, got {e}\"\n\nprint(\"All test cases passed!\")\n"}
{"task_id": "HumanEval/109", "solution": "\ndef move_one_ball(arr):\n    if not arr:\n        return True\n    \n    # Check if all elements are integers\n    if not all(isinstance(x, int) for x in arr):\n        raise TypeError(\"All elements must be integers\")\n    \n    n = len(arr)\n    sorted_arr = sorted(arr)\n    \n    for i in range(n):\n        if arr[i:] + arr[:i] == sorted_arr:\n            return True\n    \n    return False\n\n# Test cases to handle edge cases and different data types\ndef test_move_one_ball():\n    # Edge cases\n    assert move_one_ball([]) == True, \"Test case 1 failed\"\n    assert move_one_ball([1]) == True, \"Test case 2 failed\"\n    assert move_one_ball([1, 2, 3, 4, 5]) == True, \"Test case 3 failed\"\n    assert move_one_ball([5, 4, 3, 2, 1]) == False, \"Test case 4 failed\"\n    assert move_one_ball([3, 4, 5, 1, 2]) == True, \"Test case 5 failed\"\n    assert move_one_ball([3, 5, 4, 1, 2]) == False, \"Test case 6 failed\"\n    \n    # Arrays with negative numbers\n    assert move_one_ball([-3, -2, -1, 0, 1]) == True, \"Test case 7 failed\"\n    assert move_one_ball([0, -1, -2, -3, -4]) == False, \"Test case 8 failed\"\n    \n    # Arrays with large numbers\n    assert move_one_ball([1000000, 2000000, 3000000, 4000000, 5000000]) == True, \"Test case 9 failed\"\n    assert move_one_ball([5000000, 4000000, 3000000, 2000000, 1000000]) == False, \"Test case 10 failed\"\n    \n    # Non-integer elements\n    try:\n        move_one_ball([\"a\", \"b\", \"c\"])\n        print(\"Test case 11 passed\")\n    except TypeError:\n        print(\"Test case 11 passed\")\n    \n    try:\n        move_one_ball([1, \"b\", 3])\n        print(\"Test case 12 failed\")\n    except TypeError:\n        print(\"Test case 12 passed\")\n    \n    print(\"All test cases passed\")\n\n# Run the test cases\ntest_move_one_ball()\n"}
{"task_id": "HumanEval/112", "solution": "\ndef reverse_delete(s, c):\n    # Check if inputs are strings\n    if not isinstance(s, str) or not isinstance(c, str):\n        raise ValueError(\"Both inputs must be strings\")\n    \n    # Remove characters in s that are in c\n    result = ''.join([char for char in s if char not in c])\n    \n    # Check if the result string is a palindrome\n    is_palindrome = result == result[::-1]\n    \n    # Return the result string and the palindrome check\n    return (result, is_palindrome)\n\n# Test cases\nprint(reverse_delete(\"abcde\", \"ae\"))  # ('bcd', False)\nprint(reverse_delete(\"abcdef\", \"b\"))  # ('acdef', False)\nprint(reverse_delete(\"abcdedcba\", \"ab\"))  # ('cdedc', True)\nprint(reverse_delete(\"\", \"\"))  # ('', True)\nprint(reverse_delete(\"\", \"a\"))  # ('', True)\nprint(reverse_delete(\"abcde\", \"\"))  # ('abcde', False)\nprint(reverse_delete(\"a!b@c#d$e%\", \"!@#$%\"))  # ('abcde', False)\nprint(reverse_delete(\"Aba\", \"a\"))  # ('Ab', False)\nprint(reverse_delete(\"Aba\", \"A\"))  # ('ba', False)\n\ntry:\n    print(reverse_delete(123, \"a\"))  # Should raise ValueError\nexcept ValueError as e:\n    print(e)  # Both inputs must be strings\n\ntry:\n    print(reverse_delete(\"abc\", 123))  # Should raise ValueError\nexcept ValueError as e:\n    print(e)  # Both inputs must be strings\n"}
{"task_id": "HumanEval/110", "solution": "\ndef exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    # Handle non-integer elements\n    if not all(isinstance(x, int) for x in lst1 + lst2):\n        return \"NO\"\n    \n    # Handle empty lst1\n    if not lst1:\n        return \"NO\"\n    \n    odd_count_lst1 = sum(1 for x in lst1 if x % 2 != 0)\n    even_count_lst2 = sum(1 for x in lst2 if x % 2 == 0)\n    \n    if even_count_lst2 >= odd_count_lst1:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n# Test cases to verify the function\ntest_cases = [\n    ([1, 2, 3, 4], [1, 2, 3, 4], \"YES\"),  # Example case\n    ([1, 2, 3, 4], [1, 5, 3, 4], \"NO\"),   # Example case\n    ([], [2, 4, 6], \"NO\"),                # Empty lst1\n    ([1, 3, 5], [], \"NO\"),                # Empty lst2\n    ([1, 3, 5], [2, 4, 6], \"YES\"),        # All odd lst1, all even lst2\n    ([2, 4, 6], [1, 3, 5], \"YES\"),        # All even lst1, all odd lst2\n    ([1, 3, 5], [1, 3, 5], \"NO\"),         # All odd lst1, all odd lst2\n    ([2, 4, 6], [2, 4, 6], \"YES\"),        # All even lst1, all even lst2\n    ([1, 2, 3, 4], [1, 2, 3, 'a'], \"NO\"), # Non-integer element in lst2\n    ([1, 2, 3, 'a'], [1, 2, 3, 4], \"NO\"), # Non-integer element in lst1\n    ([-1, -3, -5], [2, 4, 6], \"YES\"),     # Negative numbers\n    ([1], [2], \"YES\"),                    # Single element lists\n    ([1], [1], \"NO\"),                     # Single element lists, both odd\n    ([2], [2], \"YES\"),                    # Single element lists, both even\n    ([10**18 + 1], [10**18], \"YES\"),      # Large numbers\n]\n\nfor i, (lst1, lst2, expected) in enumerate(test_cases):\n    result = exchange(lst1, lst2)\n    assert result == expected, f\"Test case {i+1} failed: {result} != {expected}\"\n\nprint(\"All test cases passed!\")\n"}
{"task_id": "HumanEval/113", "solution": "\ndef odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    result = []\n    for s in lst:\n        if not isinstance(s, str):\n            result.append(\"Invalid input: not a string\")\n            continue\n        if not s.isdigit():\n            result.append(\"Invalid input: contains non-digit characters\")\n            continue\n        odd_count = sum(1 for char in s if char in '13579')\n        template = \"the number of odd elements in the string i of the input.\"\n        result.append(template.replace('i', str(odd_count)))\n    return result\n\n# Test cases\nprint(odd_count(['1234567']))  # [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\nprint(odd_count(['3', '11111111']))  # [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nprint(odd_count([]))  # []\nprint(odd_count(['']))  # [\"Invalid input: contains non-digit characters\"]\nprint(odd_count(['123a', '456']))  # [\"Invalid input: contains non-digit characters\", \"the number of odd elements 1n the str1ng 1 of the 1nput.\"]\nprint(odd_count([123, '456']))  # [\"Invalid input: not a string\", \"the number of odd elements 1n the str1ng 1 of the 1nput.\"]\nprint(odd_count(['1' * 1000]))  # [\"the number of odd elements 1000n the str1000ng 1000 of the 1000nput.\"]\n"}
{"task_id": "HumanEval/114", "solution": "\ndef minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        raise ValueError(\"The input list is empty\")\n    \n    if not all(isinstance(x, int) for x in nums):\n        raise TypeError(\"All elements in the input list must be integers\")\n    \n    min_sum = float('inf')\n    \n    for i in range(len(nums)):\n        current_sum = 0\n        for j in range(i, len(nums)):\n            current_sum += nums[j]\n            if current_sum < min_sum:\n                min_sum = current_sum\n                \n    return min_sum\n\n# Example usage:\nprint(minSubArraySum([2, 3, 4, 1, 2, 4]))  # Output: 1\nprint(minSubArraySum([-1, -2, -3]))        # Output: -6\nprint(minSubArraySum([1]))                 # Output: 1\nprint(minSubArraySum([-1]))                # Output: -1\nprint(minSubArraySum([2, -1, 2, -3, 4]))   # Output: -3\n\n# Edge cases:\ntry:\n    print(minSubArraySum([]))  # Should raise ValueError\nexcept ValueError as e:\n    print(e)\n\ntry:\n    print(minSubArraySum([1, 'a', 3]))  # Should raise TypeError\nexcept TypeError as e:\n    print(e)\n"}
{"task_id": "HumanEval/24", "solution": "\n\ndef largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n\nprint(\"Error\")"}
{"task_id": "HumanEval/115", "solution": "\nimport math\n\ndef max_fill(grid, capacity):\n    # Check if grid is a list of lists\n    if not isinstance(grid, list) or not all(isinstance(row, list) for row in grid):\n        raise ValueError(\"Grid must be a list of lists\")\n    \n    # Check if capacity is a positive integer\n    if not isinstance(capacity, int) or capacity <= 0:\n        raise ValueError(\"Capacity must be a positive integer\")\n    \n    total_buckets = 0\n    \n    for row in grid:\n        # Check if all elements in the row are integers (0 or 1)\n        if not all(isinstance(cell, int) and cell in [0, 1] for cell in row):\n            raise ValueError(\"Grid elements must be integers (0 or 1)\")\n        \n        water_units = sum(row)\n        buckets_needed = math.ceil(water_units / capacity)\n        total_buckets += buckets_needed\n    \n    return total_buckets\n\n# Example usage:\nprint(max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1))  # Output: 6\nprint(max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2))  # Output: 5\nprint(max_fill([[0,0,0], [0,0,0]], 5))  # Output: 0\n\n# Edge cases\ntry:\n    print(max_fill([], 1))  # Output: 0 (Empty grid)\nexcept ValueError as e:\n    print(e)\n\ntry:\n    print(max_fill([[0,0,0], [0,0,0]], 0))  # Should raise ValueError\nexcept ValueError as e:\n    print(e)\n\ntry:\n    print(max_fill([[0,0,0], [0,0,0]], -1))  # Should raise ValueError\nexcept ValueError as e:\n    print(e)\n\ntry:\n    print(max_fill([[0,0,0], [0,0,0]], 2.5))  # Should raise ValueError\nexcept ValueError as e:\n    print(e)\n\ntry:\n    print(max_fill([[0,0,0], [0,0,'a']], 1))  # Should raise ValueError\nexcept ValueError as e:\n    print(e)\n\ntry:\n    print(max_fill(\"not a grid\", 1))  # Should raise ValueError\nexcept ValueError as e:\n    print(e)\n"}
{"task_id": "HumanEval/117", "solution": "\ndef select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    if not isinstance(s, str):\n        raise ValueError(\"Input s must be a string\")\n    if not isinstance(n, int) or n < 1:\n        raise ValueError(\"Input n must be a natural number (positive integer)\")\n\n    if not s:\n        return []\n\n    vowels = set('aeiouAEIOU')\n    words = s.split()\n    result = []\n\n    for word in words:\n        consonant_count = sum(1 for char in word if char.isalpha() and char not in vowels)\n        if consonant_count == n:\n            result.append(word)\n\n    return result\n\n# Example usage\nprint(select_words(\"Mary had a little lamb\", 4))  # [\"little\"]\nprint(select_words(\"Mary had a little lamb\", 3))  # [\"Mary\", \"lamb\"]\nprint(select_words(\"simple white space\", 2))      # []\nprint(select_words(\"Hello world\", 4))             # [\"world\"]\nprint(select_words(\"Uncle sam\", 3))               # [\"Uncle\"]\n\n# Edge cases\nprint(select_words(\"\", 3))                        # []\nprint(select_words(\"aeiou\", 1))                   # []\nprint(select_words(\"bcdfgh\", 6))                  # [\"bcdfgh\"]\nprint(select_words(\"BCDFGH\", 6))                  # [\"BCDFGH\"]\ntry:\n    print(select_words(12345, 3))                 # Error\nexcept ValueError as e:\n    print(e)                                      # \"Input s must be a string\"\ntry:\n    print(select_words(\"Hello world\", -1))        # Error\nexcept ValueError as e:\n    print(e)                                      # \"Input n must be a natural number (positive integer)\"\ntry:\n    print(select_words(\"Hello world\", 0))         # Error\nexcept ValueError as e:\n    print(e)                                      # \"Input n must be a natural number (positive integer)\"\ntry:\n    print(select_words(\"Hello world\", \"three\"))   # Error\nexcept ValueError as e:\n    print(e)                                      # \"Input n must be a natural number (positive integer)\"\n"}
{"task_id": "HumanEval/119", "solution": "\ndef match_parens(lst):\n    def is_balanced(s):\n        balance = 0\n        for char in s:\n            if char == '(':\n                balance += 1\n            elif char == ')':\n                balance -= 1\n            if balance < 0:\n                return False\n        return balance == 0\n\n    # Check if input is a list of exactly two elements\n    if not isinstance(lst, list) or len(lst) != 2:\n        return 'No'\n    \n    s1, s2 = lst\n\n    # Check if both elements are strings\n    if not isinstance(s1, str) or not isinstance(s2, str):\n        return 'No'\n\n    # Check if both strings contain only '(' or ')'\n    if not all(char in '()' for char in s1) or not all(char in '()' for char in s2):\n        return 'No'\n\n    if is_balanced(s1 + s2) or is_balanced(s2 + s1):\n        return 'Yes'\n    else:\n        return 'No'\n\n# Test cases to validate the function\ntest_cases = [\n    (['()(', ')'], 'Yes'),\n    ([')', ')'], 'No'),\n    (['', ''], 'Yes'),\n    (['(', ')'], 'Yes'),\n    (['(()', '())'], 'Yes'),\n    (['(', ''], 'No'),\n    (['(', 'a'], 'No'),\n    (['(', 1], 'No'),\n    (['('], 'No'),\n    ('()', 'No')\n]\n\nfor i, (input_data, expected) in enumerate(test_cases):\n    result = match_parens(input_data)\n    print(f\"Test case {i+1}: input={input_data}, expected={expected}, got={result}, passed={result == expected}\")\n\n"}
{"task_id": "HumanEval/121", "solution": "\ndef solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==> 0\n    \"\"\"\n    if not all(isinstance(x, int) for x in lst):\n        raise ValueError(\"All elements in the list must be integers.\")\n    \n    total = 0\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 != 0:\n            total += lst[i]\n    return total\n\n# Test cases\nprint(solution([5, 8, 7, 1]))  # Expected: 12\nprint(solution([3, 3, 3, 3, 3]))  # Expected: 9\nprint(solution([30, 13, 24, 321]))  # Expected: 0\nprint(solution([]))  # Expected: 0 (Empty list)\nprint(solution([2]))  # Expected: 0 (Single even element)\nprint(solution([1]))  # Expected: 1 (Single odd element)\nprint(solution([2, 4, 6, 8]))  # Expected: 0 (All even numbers)\nprint(solution([1, 3, 5, 7]))  # Expected: 6 (All odd numbers)\nprint(solution([-1, -3, -5, -7]))  # Expected: -6 (Negative odd numbers)\ntry:\n    print(solution([1, 'a', 3]))  # Expected: ValueError\nexcept ValueError as e:\n    print(e)\n<execute>"}
{"task_id": "HumanEval/122", "solution": "\ndef add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    # Check if arr is a list\n    if not isinstance(arr, list):\n        raise ValueError(\"arr should be a list of integers\")\n    \n    # Check if k is an integer\n    if not isinstance(k, int):\n        raise ValueError(\"k should be an integer\")\n    \n    # Check if all elements in arr are integers\n    if not all(isinstance(x, int) for x in arr):\n        raise ValueError(\"All elements in arr should be integers\")\n    \n    # Check if k is within the valid range\n    if not (1 <= k <= len(arr)):\n        raise ValueError(\"k should be within the range 1 to len(arr)\")\n    \n    return sum(x for x in arr[:k] if -99 <= x <= 99)\n\n# Test cases to validate the function\ndef test_add_elements():\n    # Normal case\n    assert add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    # Case with negative numbers\n    assert add_elements([-10, 21, -3, 4000, 5, 6, 7, 8, 9], 4) == 8\n    # Case with boundary values\n    assert add_elements([99, -99, 100, -100], 4) == 0\n    # Case with k equal to len(arr)\n    assert add_elements([1, 2, 3, 4, 5], 5) == 15\n    # Case with k equal to 1\n    assert add_elements([1, 2, 3, 4, 5], 1) == 1\n    # Case with non-integer elements\n    try:\n        add_elements([1, 2, '3', 4, 5], 3)\n    except ValueError as e:\n        assert str(e) == \"All elements in arr should be integers\"\n    # Case with non-list arr\n    try:\n        add_elements(\"12345\", 3)\n    except ValueError as e:\n        assert str(e) == \"arr should be a list of integers\"\n    # Case with non-integer k\n    try:\n        add_elements([1, 2, 3, 4, 5], '3')\n    except ValueError as e:\n        assert str(e) == \"k should be an integer\"\n    # Case with k out of range\n    try:\n        add_elements([1, 2, 3, 4, 5], 6)\n    except ValueError as e:\n        assert str(e) == \"k should be within the range 1 to len(arr)\"\n    \n    print(\"All test cases passed!\")\n\ntest_add_elements()\n"}
{"task_id": "HumanEval/120", "solution": "\ndef maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if not isinstance(arr, list):\n        raise TypeError(\"arr must be a list\")\n    if not all(isinstance(x, int) for x in arr):\n        raise TypeError(\"all elements in arr must be integers\")\n    if not isinstance(k, int):\n        raise TypeError(\"k must be an integer\")\n    if k < 0:\n        raise ValueError(\"k must be a non-negative integer\")\n    if k > len(arr):\n        raise ValueError(\"k must be less than or equal to the length of arr\")\n    if k == 0:\n        return []\n    \n    return sorted(sorted(arr, reverse=True)[:k])\n"}
{"task_id": "HumanEval/116", "solution": "\ndef sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    \"\"\"\n    if not all(isinstance(x, int) for x in arr):\n        raise ValueError(\"All elements must be integers\")\n    \n    return sorted(arr, key=lambda x: (bin(x & 0xffffffff).count('1'), x))\n\n# Test cases\ntest_cases = [\n    ([1, 5, 2, 3, 4], [1, 2, 4, 3, 5]),  # Non-negative integers\n    ([-2, -3, -4, -5, -6], [-6, -4, -5, -3, -2]),  # Negative integers\n    ([1, 0, 2, 3, 4], [0, 1, 2, 4, 3]),  # Mixed non-negative integers and zero\n    ([], []),  # Empty list\n    ([7], [7]),  # Single element list\n    ([1, 'a', 3], ValueError),  # Non-integer values\n    ([1, 2, 3, 4, 5, 1023, 1024], [1, 2, 4, 1024, 3, 5, 1023])  # Large numbers\n]\n\n# Running the test cases\nfor i, (input_data, expected_output) in enumerate(test_cases):\n    try:\n        result = sort_array(input_data)\n        assert result == expected_output, f\"Test case {i+1} failed: expected {expected_output}, got {result}\"\n    except Exception as e:\n        if isinstance(expected_output, type) and issubclass(expected_output, Exception):\n            assert isinstance(e, expected_output), f\"Test case {i+1} failed: expected exception {expected_output}, got {e}\"\n        else:\n            raise e\n\nprint(\"All test cases passed!\")\n"}
{"task_id": "HumanEval/123", "solution": "\ndef get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    if not isinstance(n, int) or isinstance(n, bool):\n        raise ValueError(\"Input must be a positive integer.\")\n    if n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    odd_numbers = []\n    while n != 1:\n        if n % 2 != 0:\n            odd_numbers.append(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n    odd_numbers.append(1)\n    return sorted(odd_numbers)\n\n# Test cases to validate the function\nprint(get_odd_collatz(5))  # Expected output: [1, 5]\nprint(get_odd_collatz(1))  # Expected output: [1]\ntry:\n    print(get_odd_collatz(-5))  # Should raise ValueError\nexcept ValueError as e:\n    print(e)  # Expected output: \"Input must be a positive integer.\"\ntry:\n    print(get_odd_collatz(0))  # Should raise ValueError\nexcept ValueError as e:\n    print(e)  # Expected output: \"Input must be a positive integer.\"\ntry:\n    print(get_odd_collatz(5.5))  # Should raise ValueError\nexcept ValueError as e:\n    print(e)  # Expected output: \"Input must be a positive integer.\"\ntry:\n    print(get_odd_collatz(\"5\"))  # Should raise ValueError\nexcept ValueError as e:\n    print(e)  # Expected output: \"Input must be a positive integer.\"\ntry:\n    print(get_odd_collatz(True))  # Should raise ValueError\nexcept ValueError as e:\n    print(e)  # Expected output: \"Input must be a positive integer.\"\n"}
{"task_id": "HumanEval/124", "solution": "\ndef valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    if not isinstance(date, str) or not date:\n        return False\n\n    parts = date.split('-')\n    if len(parts) != 3:\n        return False\n\n    month, day, year = parts\n\n    if not (month.isdigit() and day.isdigit() and year.isdigit()):\n        return False\n\n    month = int(month)\n    day = int(day)\n    year = int(year)\n\n    if month < 1 or month > 12:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n        if day == 29:\n            # Check for leap year\n            if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):\n                pass\n            else:\n                return False\n\n    if len(parts[2]) != 4:\n        return False\n\n    return True\n\n# Test cases\ntest_cases = [\n    ('03-11-2000', True),\n    ('15-01-2012', False),\n    ('04-0-2040', False),\n    ('06-04-2020', True),\n    ('06/04/2020', False),\n    ('', False),\n    ('02-29-2020', True),  # Leap year\n    ('02-29-2019', False), # Not a leap year\n    ('13-01-2020', False), # Invalid month\n    ('04-31-2020', False), # Invalid day for April\n    ('02-30-2020', False), # Invalid day for February\n    ('02-28-2019', True),  # Valid non-leap year date\n    (None, False),         # Non-string input\n    (12345, False),        # Non-string input\n]\n\nfor date, expected in test_cases:\n    result = valid_date(date)\n    print(f\"valid_date({date}) = {result}, expected = {expected}, passed = {result == expected}\")\n"}
{"task_id": "HumanEval/126", "solution": "\ndef is_sorted(lst):\n    if not all(isinstance(x, int) and x >= 0 for x in lst):\n        raise ValueError(\"List must contain only non-negative integers\")\n    \n    if len(lst) <= 1:\n        return True\n    \n    for i in range(1, len(lst)):\n        if lst[i] < lst[i - 1]:\n            return False\n    \n    counts = {}\n    for num in lst:\n        if num in counts:\n            counts[num] += 1\n            if counts[num] > 2:\n                return False\n        else:\n            counts[num] = 1\n    \n    return True\n"}
{"task_id": "HumanEval/125", "solution": "\ndef split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n    if not isinstance(txt, str):\n        raise TypeError(\"Input must be a string\")\n    \n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and (ord(char) - ord('a')) % 2 == 0)\n\n# Test cases\ntest_cases = [\n    (\"Hello world!\", [\"Hello\", \"world!\"]),\n    (\"Hello,world!\", [\"Hello\", \"world!\"]),\n    (\"abcdef\", 3),\n    (\"\", 0),\n    (\"a b c\", [\"a\", \"b\", \"c\"]),\n    (\"a,b,c\", [\"a\", \"b\", \"c\"]),\n    (\"xyz\", 1),\n    (\"ABC\", 0),\n    (\"aBcDeFgHiJ\", 5),\n    (\"12345\", 0),\n    (\"a1b2c3\", 2),\n    (\"a,b c\", [\"a,b\", \"c\"]),\n    (\"a b,c\", [\"a\", \"b,c\"]),\n]\n\n# Running the test cases\nresults = []\nfor i, (input_str, expected) in enumerate(test_cases):\n    try:\n        result = split_words(input_str)\n        assert result == expected, f\"Test case {i+1} failed: {result} != {expected}\"\n        results.append(f\"Test case {i+1} passed\")\n    except Exception as e:\n        results.append(f\"Test case {i+1} failed with exception: {e}\")\n\nprint(\"\\n\".join(results))\n"}
{"task_id": "HumanEval/82", "solution": "\ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        for i in range(3, int(n**0.5) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n    \n    if not isinstance(string, str):\n        raise ValueError(\"Input must be a string\")\n    \n    length = len(string)\n    return is_prime(length)\n\n# Test cases\nprint(prime_length('Hello'))       # True\nprint(prime_length('abcdcba'))     # True\nprint(prime_length('kittens'))     # True\nprint(prime_length('orange'))      # False\nprint(prime_length(''))            # False (Edge case: empty string)\nprint(prime_length('a'))           # False (Edge case: single character)\nprint(prime_length('!@#$%^'))      # True (Special characters)\nprint(prime_length('   '))         # False (Whitespace characters)\ntry:\n    print(prime_length(12345))     # Should raise ValueError\nexcept ValueError as e:\n    print(e)                       # Input must be a string\n"}
{"task_id": "HumanEval/128", "solution": "\ndef prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n    if not isinstance(arr, list):\n        raise TypeError(\"Input should be a list of integers\")\n    \n    if not arr:\n        return None\n    \n    sum_magnitudes = 0\n    product_signs = 1\n    \n    for num in arr:\n        if not isinstance(num, int):\n            raise ValueError(\"All elements in the array should be integers\")\n        sum_magnitudes += abs(num)\n        if num > 0:\n            product_signs *= 1\n        elif num < 0:\n            product_signs *= -1\n        else:\n            product_signs *= 0\n    \n    return sum_magnitudes * product_signs\n\n# Test cases\nprint(prod_signs([1, 2, 2, -4]))  # Expected output: -9\nprint(prod_signs([0, 1]))         # Expected output: 0\nprint(prod_signs([]))             # Expected output: None\nprint(prod_signs([1, 2, 3]))      # Expected output: 6\nprint(prod_signs([-1, -2, -3]))   # Expected output: -6\nprint(prod_signs([0, -1, 2]))     # Expected output: 0\ntry:\n    print(prod_signs(\"not a list\"))  # Expected to raise TypeError\nexcept TypeError as e:\n    print(e)\ntry:\n    print(prod_signs([1, 2, \"three\"]))  # Expected to raise ValueError\nexcept ValueError as e:\n    print(e)\n"}
{"task_id": "HumanEval/85", "solution": "\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst, add the even elements that are at odd indices.\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    if not all(isinstance(x, int) for x in lst):\n        raise ValueError(\"All elements in the list must be integers.\")\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)\n\n# Test cases\ntest_cases = [\n    [],  # Empty list\n    [1],  # Single element list\n    [1, 3, 5, 7],  # All odd indices have odd numbers\n    [1, 2, 3, 4],  # All odd indices have even numbers\n    [1, 2, 3, 4, 5, 6],  # Mixed even and odd numbers at odd indices\n    [-1, -2, -3, -4],  # Negative even and odd numbers\n    [1, 'a', 3, 4],  # Non-integer elements\n]\n\nfor i, case in enumerate(test_cases):\n    try:\n        print(f\"Test case {i+1}: {case} => {add(case)}\")\n    except Exception as e:\n        print(f\"Test case {i+1}: {case} => Error: {e}\")\n\n<execute>"}
{"task_id": "HumanEval/130", "solution": "\ndef tri(n):\n    if not isinstance(n, int) or isinstance(n, bool):\n        raise ValueError(\"Input must be a non-negative integer\")\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n    \n    def tribonacci(num):\n        if num == 1:\n            return 3\n        elif num % 2 == 0:\n            return 1 + num // 2\n        else:\n            return tribonacci(num - 1) + tribonacci(num - 2) + tribonacci(num + 1)\n    \n    result = [1]\n    for i in range(1, n + 1):\n        result.append(tribonacci(i))\n    \n    return result\n\n# Examples\nprint(tri(2))  # Output: [1, 3, 2]\nprint(tri(3))  # Output: [1, 3, 2, 8]\n\n# Edge cases\ntry:\n    print(tri(-1))  # Should raise ValueError\nexcept ValueError as e:\n    print(e)\n\ntry:\n    print(tri(2.5))  # Should raise ValueError\nexcept ValueError as e:\n    print(e)\n\ntry:\n    print(tri(\"3\"))  # Should raise ValueError\nexcept ValueError as e:\n    print(e)\n\nprint(tri(0))  # Output: [1]\n\n# Large input\nprint(tri(10))  # Output: [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6]\n"}
{"task_id": "HumanEval/129", "solution": "\ndef minPath(grid, k):\n    from heapq import heappop, heappush\n\n    if not grid or not grid[0]:\n        raise ValueError(\"Grid cannot be empty\")\n    \n    N = len(grid)\n    if any(len(row) != N for row in grid):\n        raise ValueError(\"Grid must be N x N\")\n    \n    if k < 1 or k > N * N:\n        raise ValueError(\"k must be between 1 and N*N inclusive\")\n\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n\n    def in_bounds(x, y):\n        return 0 <= x < N and 0 <= y < N\n\n    def neighbors(x, y):\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if in_bounds(nx, ny):\n                yield nx, ny\n\n    min_path = None\n\n    for i in range(N):\n        for j in range(N):\n            heap = [(grid[i][j], i, j, [grid[i][j]])]\n            while heap:\n                value, x, y, path = heappop(heap)\n                if len(path) == k:\n                    if min_path is None or path < min_path:\n                        min_path = path\n                else:\n                    for nx, ny in neighbors(x, y):\n                        heappush(heap, (grid[nx][ny], nx, ny, path + [grid[nx][ny]]))\n\n    return min_path\n\n# Example usage:\nprint(minPath([[1,2,3], [4,5,6], [7,8,9]], 3))  # Output: [1, 2, 1]\nprint(minPath([[5,9,3], [4,1,6], [7,8,2]], 1))  # Output: [1]\n\n# Test cases for edge cases\nprint(minPath([[1, 2], [3, 4]], 2))  # Output: [1, 2]\nprint(minPath([[1, 2], [3, 4]], 4))  # Output: [1, 2, 1, 2]\nprint(minPath([[1, 2], [3, 4]], 1))  # Output: [1]\ntry:\n    print(minPath([[1, 2], [3, 4]], 5))  # Should raise ValueError\nexcept ValueError as e:\n    print(e)\ntry:\n    print(minPath([], 1))  # Should raise ValueError\nexcept ValueError as e:\n    print(e)\ntry:\n    print(minPath([[1, 2, 3], [4, 5, 6]], 3))  # Should raise ValueError\nexcept ValueError as e:\n    print(e)\n"}
{"task_id": "HumanEval/80", "solution": "The function `is_happy` still fails for the following cases:\n- The function returned `False` for the string \"😊😊a\" which should be `True`.\n- The function returned `False` for the string \"AaA\" which should be `True`.\n\nThese issues need to be addressed. The function should be revised to correctly handle these cases.\n\n"}
{"task_id": "HumanEval/133", "solution": "\nimport math\n\ndef sum_squares(lst):\n    if not all(isinstance(x, (int, float)) for x in lst):\n        raise ValueError(\"All elements in the list must be integers or floats.\")\n    return sum(math.ceil(x) ** 2 for x in lst)\n\n# Test cases\nprint(sum_squares([]))  # Expected output: 0\nprint(sum_squares([1, 2, 3]))  # Expected output: 14\nprint(sum_squares([1, 4, 9]))  # Expected output: 98\nprint(sum_squares([1, 3, 5, 7]))  # Expected output: 84\nprint(sum_squares([1.4, 4.2, 0]))  # Expected output: 29\nprint(sum_squares([-2.4, 1, 1]))  # Expected output: 6\nprint(sum_squares([1, 2.5, -3.7]))  # Expected output: 20\n\n# Edge cases\ntry:\n    print(sum_squares([1, 'a', 3]))  # Should raise ValueError\nexcept ValueError as e:\n    print(e)  # Expected output: All elements in the list must be integers or floats.\n\ntry:\n    print(sum_squares([None, 2, 3]))  # Should raise ValueError\nexcept ValueError as e:\n    print(e)  # Expected output: All elements in the list must be integers or floats.\n"}
{"task_id": "HumanEval/132", "solution": "\ndef is_nested(string):\n    if not isinstance(string, str):\n        raise ValueError(\"Input must be a string\")\n    if any(char not in '[]' for char in string):\n        raise ValueError(\"String must contain only square brackets\")\n\n    stack = []\n    for i, char in enumerate(string):\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:\n                stack.pop()\n                if i > 0 and string[i-1] == '[':\n                    return True\n    return False\n\n# Test cases\nprint(is_nested('[[]]'))  # True\nprint(is_nested('[]]]]]]][[[[[]'))  # False\nprint(is_nested('[][]'))  # False\nprint(is_nested('[]'))  # False\nprint(is_nested('[[][]]'))  # True\nprint(is_nested('[[]][['))  # True\n\n# Additional edge cases\nprint(is_nested(''))  # False, empty string\nprint(is_nested('['))  # False, single opening bracket\nprint(is_nested(']'))  # False, single closing bracket\nprint(is_nested('[[[[[['))  # False, only opening brackets\nprint(is_nested(']]]]]]'))  # False, only closing brackets\nprint(is_nested('[[]]]['))  # True, nested brackets with extra brackets\nprint(is_nested('[[[[]]]]'))  # True, deeply nested brackets\n\n# Test cases for invalid inputs\ntry:\n    print(is_nested(123))  # Should raise ValueError\nexcept ValueError as e:\n    print(e)\n\ntry:\n    print(is_nested('[abc]'))  # Should raise ValueError\nexcept ValueError as e:\n    print(e)\n"}
{"task_id": "HumanEval/131", "solution": "\ndef digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer\")\n    \n    product = 1\n    has_odd = False\n    \n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n            has_odd = True\n        n //= 10\n    \n    return product if has_odd else 0\n\n# Test cases to validate the function\ntest_cases = [\n    (1, 1),        # Single odd digit\n    (4, 0),        # Single even digit\n    (235, 15),     # Multiple digits with odd and even\n    (2468, 0),     # All even digits\n    (13579, 945),  # All odd digits\n    (0, ValueError), # Zero input\n    (-123, ValueError), # Negative input\n    (\"123\", ValueError), # Non-integer input\n    (2**31, 0),    # Large integer input\n]\n\nfor i, (input_val, expected) in enumerate(test_cases):\n    try:\n        result = digits(input_val)\n        assert result == expected, f\"Test case {i+1} failed: {result} != {expected}\"\n    except ValueError as e:\n        assert expected == ValueError, f\"Test case {i+1} failed: {e} != {expected}\"\n\nprint(\"All test cases passed.\")\n<execute>"}
{"task_id": "HumanEval/134", "solution": "\ndef check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") ➞ False\n    check_if_last_char_is_a_letter(\"apple pi e\") ➞ True\n    check_if_last_char_is_a_letter(\"apple pi e \") ➞ False\n    check_if_last_char_is_a_letter(\"\") ➞ False \n    '''\n    if not isinstance(txt, str):\n        return False\n    if not txt or txt[-1] == ' ':\n        return False\n    if txt[-1].isalpha() and (len(txt) == 1 or txt[-2] == ' '):\n        return True\n    return False\n\n# Test cases\ntest_cases = [\n    (\"\", False),\n    (\" \", False),\n    (\"a\", True),\n    (\"1\", False),\n    (\"apple pie\", False),\n    (\"apple pi e\", True),\n    (\"apple pi e \", False),\n    (\"apple pi e!\", False),\n    (123, False),\n    (None, False),\n    ([\"apple\", \"pi\", \"e\"], False)\n]\n\n# Execute and print test results\nresults = [(case, check_if_last_char_is_a_letter(case[0])) for case in test_cases]\nprint(results)\n"}
{"task_id": "HumanEval/90", "solution": "\ndef next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    # Filter out non-integer elements\n    lst = [x for x in lst if isinstance(x, int)]\n    \n    if len(lst) < 2:\n        return None\n    \n    unique_elements = set(lst)\n    \n    if len(unique_elements) < 2:\n        return None\n    \n    sorted_elements = sorted(unique_elements)\n    return sorted_elements[1]\n\n# Test cases\nprint(next_smallest([1, 2, 3, 4, 5]))  # Expected: 2\nprint(next_smallest([5, 1, 4, 3, 2]))  # Expected: 2\nprint(next_smallest([]))  # Expected: None\nprint(next_smallest([1, 1]))  # Expected: None\nprint(next_smallest([1]))  # Expected: None\nprint(next_smallest([1, 2]))  # Expected: 2\nprint(next_smallest([2, 2, 2, 2]))  # Expected: None\nprint(next_smallest([-1, -2, -3, -4, -5]))  # Expected: -4\nprint(next_smallest([1, -1, 0]))  # Expected: 0\nprint(next_smallest([1, 2, 'a', 3]))  # Expected: 2\n"}
{"task_id": "HumanEval/94", "solution": "\ndef skjkasdkd(lst):\n    def is_prime(n):\n        if not isinstance(n, int) or n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    primes = [num for num in lst if is_prime(num)]\n    if not primes:\n        return 0\n\n    largest_prime = max(primes)\n    return sum_of_digits(largest_prime)\n\n# Test cases\nprint(skjkasdkd([]))  # Output: 0 (Empty list)\nprint(skjkasdkd([4, 6, 8, 10]))  # Output: 0 (No primes)\nprint(skjkasdkd([-3, -5, -7, 2, 3]))  # Output: 5 (Ignore negative numbers, largest prime is 3)\nprint(skjkasdkd([2.5, 3.1, 5, '7', 11]))  # Output: 2 (Ignore non-integer types, largest prime is 11)\nprint(skjkasdkd([9999991]))  # Output: 46 (Large prime number)\nprint(skjkasdkd([7]))  # Output: 7 (Single element list)\nprint(skjkasdkd([3, 'a', 5, 7.7, 11]))  # Output: 2 (Mixed data types, largest prime is 11)\n<execute>"}
{"task_id": "HumanEval/92", "solution": "\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) ➞ True\n    \n    any_int(3, 2, 2) ➞ False\n\n    any_int(3, -2, 1) ➞ True\n    \n    any_int(3.6, -2.2, 2) ➞ False\n    '''\n    if all(isinstance(i, int) and not isinstance(i, bool) for i in [x, y, z]):\n        return x == y + z or y == x + z or z == x + y\n    return False\n\ndef test_any_int():\n    # Test with all integers\n    assert any_int(5, 2, 7) == True\n    assert any_int(3, 2, 2) == False\n    assert any_int(3, -2, 1) == True\n    assert any_int(0, 0, 0) == True\n    assert any_int(0, 1, -1) == True\n    assert any_int(1000000, 500000, 500000) == True\n    \n    # Test with non-integer types\n    assert any_int(3.6, -2.2, 2) == False\n    assert any_int(\"3\", 2, 1) == False\n    assert any_int([3], 2, 1) == False\n    assert any_int((3,), 2, 1) == False\n    assert any_int({3: 1}, 2, 1) == False\n    \n    # Test with boolean values\n    assert any_int(True, False, 1) == False\n    assert any_int(True, True, 2) == False\n    \n    # Test with mixed types\n    assert any_int(3, 2.0, 1) == False\n    assert any_int(3, \"2\", 1) == False\n    \n    print(\"All tests passed.\")\n\n# Run the tests\ntest_any_int()\n"}
{"task_id": "HumanEval/135", "solution": "\ndef can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list\")\n    \n    if not all(isinstance(x, (int, float)) for x in arr):\n        raise ValueError(\"All elements in the list must be integers or floats\")\n    \n    if len(arr) < 2:\n        return -1\n\n    largest_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            largest_index = i\n    return largest_index\n\n# Example usage and edge cases\ntest_cases = [\n    ([1, 2, 4, 3, 5], 3),\n    ([1, 2, 3], -1),\n    ([], -1),\n    ([1], -1),\n    ([-1, -2, -3], 2),  # Corrected expected result\n    ([1, 2, '3'], ValueError),\n    (\"12345\", TypeError),\n    ([1.1, 2.2, 1.5], 2)\n]\n\nfor i, (input_data, expected) in enumerate(test_cases):\n    try:\n        result = can_arrange(input_data)\n        assert result == expected, f\"Test case {i+1} failed: expected {expected}, got {result}\"\n        print(f\"Test case {i+1} passed\")\n    except Exception as e:\n        assert isinstance(e, expected), f\"Test case {i+1} failed: expected exception {expected}, got {e}\"\n        print(f\"Test case {i+1} passed with exception {e}\")\n"}
{"task_id": "HumanEval/138", "solution": "\ndef is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    # Check if the input is an integer\n    if not isinstance(n, int):\n        raise ValueError(\"Input must be an integer\")\n    \n    # Check if the input is a positive integer\n    if n <= 0:\n        return False\n    \n    # The smallest sum of 4 positive even numbers is 8 (2 + 2 + 2 + 2)\n    if n < 8:\n        return False\n    \n    # Check if n can be written as the sum of 4 positive even numbers\n    # Since the sum of 4 positive even numbers is always even, n must be even\n    return n % 2 == 0\n"}
{"task_id": "HumanEval/140", "solution": "\ndef fix_spaces(text):\n    if not isinstance(text, str):\n        raise ValueError(\"Input must be a string\")\n    \n    import re\n    # Replace more than 2 consecutive spaces with a single hyphen\n    text = re.sub(r'\\s{3,}', '-', text)\n    # Replace single spaces with underscores\n    text = text.replace(' ', '_')\n    return text\n\n# Test cases\nprint(fix_spaces(\"Example\"))  # \"Example\"\nprint(fix_spaces(\"Example 1\"))  # \"Example_1\"\nprint(fix_spaces(\" Example 2\"))  # \"_Example_2\"\nprint(fix_spaces(\" Example   3\"))  # \"_Example-3\"\nprint(fix_spaces(\"\"))  # \"\"\nprint(fix_spaces(\"NoSpaces\"))  # \"NoSpaces\"\nprint(fix_spaces(\"   \"))  # \"-\"\nprint(fix_spaces(\" \\t\\n \"))  # \"_\\t\\n_\"\ntry:\n    print(fix_spaces(123))  # Should raise ValueError\nexcept ValueError as e:\n    print(e)  # \"Input must be a string\"\n"}
{"task_id": "HumanEval/137", "solution": " \n\ndef compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) ➞ 2.5\n    compare_one(1, \"2,3\") ➞ \"2,3\"\n    compare_one(\"5,1\", \"6\") ➞ \"6\"\n    compare_one(\"1\", 1) ➞ None\n    \"\"\"\n    \n    def to_float(value):\n        if isinstance(value, str):\n            value = value.replace(',', '.')\n        try:\n            return float(value)\n        except ValueError:\n            raise ValueError(f\"Invalid input: {value}\")\n    \n    a_float = to_float(a)\n    b_float = to_float(b)\n    \n    if a_float > b_float:\n        return a\n    elif b_float > a_float:\n        return b\n    else:\n        return None\n\n# Test cases\ntest_cases = [\n    (1, 2.5),  # ➞ 2.5\n    (1, \"2,3\"),  # ➞ \"2,3\"\n    (\"5,1\", \"6\"),  # ➞ \"6\"\n    (\"1\", 1),  # ➞ None\n    (\"1.5\", \"1,5\"),  # ➞ None\n    (\"1.5\", \"1.6\"),  # ➞ \"1.6\"\n    (\"1,5\", \"1.6\"),  # ➞ \"1.6\"\n    (\"1,5\", 1.6),  # ➞ 1.6\n    (-1, -2),  # ➞ -1\n    (-1, \"1\"),  # ➞ \"1\"\n    (\"1e10\", \"1e9\"),  # ➞ \"1e10\"\n    (\"1e-10\", \"1e-9\")  # ➞ \"1e-9\"\n]\n\nfor a, b in test_cases:\n    try:\n        result = compare_one(a, b)\n        print(f\"compare_one({a}, {b}) ➞ {result}\")\n    except ValueError as e:\n        print(e)\n\n# Test cases expected to raise ValueError\ninvalid_test_cases = [\n    (\"invalid\", 1.6),  # ➞ ValueError: Invalid input: invalid\n    (1.6, \"invalid\")  # ➞ ValueError: Invalid input: invalid\n]\n\nfor a, b in invalid_test_cases:\n    try:\n        result = compare_one(a, b)\n        print(f\"compare_one({a}, {b}) ➞ {result}\")\n    except ValueError as e:\n        print(e)\n"}
{"task_id": "HumanEval/143", "solution": "\ndef is_prime(n):\n    \"\"\"Helper function to check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n    \"\"\"\n    if not isinstance(sentence, str):\n        return \"\"\n    \n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return \" \".join(prime_length_words)\n\ndef test_words_in_sentence():\n    test_cases = [\n        (\"\", \"\"),  # Empty string\n        (\"a\", \"\"),  # Single word with non-prime length\n        (\"go\", \"go\"),  # Single word with prime length\n        (\"This is a test\", \"is\"),  # Mixed prime and non-prime lengths\n        (\"lets go for swimming\", \"go for\"),  # Mixed prime and non-prime lengths\n        (\"hello world\", \"\"),  # All words with non-prime lengths\n        (\"hi go\", \"hi go\"),  # All words with prime lengths\n        (\"This Is A Test\", \"Is\"),  # Mixed case\n        (\"a\" * 100, \"\"),  # Long sentence with non-prime length words\n        (123, \"\"),  # Non-string input\n    ]\n\n    for i, (input_sentence, expected_output) in enumerate(test_cases):\n        try:\n            result = words_in_sentence(input_sentence)\n            assert result == expected_output, f\"Test case {i+1} failed: expected {expected_output}, got {result}\"\n        except Exception as e:\n            assert isinstance(input_sentence, str), f\"Test case {i+1} failed: expected exception for non-string input, got {e}\"\n\n    print(\"All test cases passed!\")\n\ntest_words_in_sentence()\n"}
{"task_id": "HumanEval/144", "solution": "\ndef simplify(x, n):\n    def parse_fraction(fraction):\n        numerator, denominator = map(int, fraction.split('/'))\n        return numerator, denominator\n    \n    x_num, x_den = parse_fraction(x)\n    n_num, n_den = parse_fraction(n)\n    \n    product_num = x_num * n_num\n    product_den = x_den * n_den\n    \n    return product_num % product_den == 0\n\ndef test_simplify():\n    test_cases = [\n        (\"1/5\", \"5/1\", True),  # Basic valid input\n        (\"1/6\", \"2/1\", False),  # Basic valid input\n        (\"7/10\", \"10/2\", False),  # Basic valid input\n        (\"1000000/1\", \"1/1000000\", True),  # Large numbers\n        (\"13/17\", \"17/13\", True),  # Prime numbers\n        (\"5/5\", \"5/5\", True),  # Equal numerator and denominator\n        (\"1/1\", \"1/1\", True),  # Edge case of 1/1\n        (\"1/1\", \"2/3\", False),  # One as numerator or denominator\n        (\"2/3\", \"1/1\", False),  # One as numerator or denominator\n    ]\n    \n    for x, n, expected in test_cases:\n        result = simplify(x, n)\n        assert result == expected, f\"Test failed for simplify({x}, {n}). Expected {expected}, got {result}\"\n    print(\"All tests passed.\")\n\ntest_simplify()\n"}
{"task_id": "HumanEval/142", "solution": "\ndef sum_squares(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    if not all(isinstance(x, int) for x in lst):\n        raise ValueError(\"All elements in the list must be integers\")\n    \n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total += lst[i] ** 2\n        elif i % 4 == 0:\n            total += lst[i] ** 3\n        else:\n            total += lst[i]\n    return total\n\n# Test cases\nprint(sum_squares([1, 2, 3]))  # Expected output: 6\nprint(sum_squares([]))  # Expected output: 0\nprint(sum_squares([-1, -5, 2, -1, -5]))  # Expected output: -126\nprint(sum_squares([0, 0, 0, 0, 0]))  # Expected output: 0\ntry:\n    print(sum_squares([1, 2, '3']))  # Should raise ValueError\nexcept ValueError as e:\n    print(e)  # Expected output: All elements in the list must be integers\nprint(sum_squares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))  # Large list test\n"}
{"task_id": "HumanEval/136", "solution": "\ndef largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    largest_negative = None\n    smallest_positive = None\n    \n    for num in lst:\n        if isinstance(num, int):\n            if num < 0:\n                if largest_negative is None or num > largest_negative:\n                    largest_negative = num\n            elif num > 0:\n                if smallest_positive is None or num < smallest_positive:\n                    smallest_positive = num\n    \n    return (largest_negative, smallest_positive)\n\ndef test_largest_smallest_integers():\n    test_cases = [\n        ([], (None, None)),\n        ([0], (None, None)),\n        ([2, 4, 1, 3, 5, 7], (None, 1)),\n        ([-2, -4, -1, -3, -5, -7], (-1, None)),\n        ([-2, 4, -1, 3, -5, 7], (-1, 3)),\n        ([2, -4, 1, -3, 5, -7], (-3, 1)),\n        ([2, 4, 1, 3, 5, 7, -2, -4, -1, -3, -5, -7], (-1, 1)),\n        ([2, 4, 1, 3, 5, 7, 0], (None, 1)),\n        ([-2, -4, -1, -3, -5, -7, 0], (-1, None)),\n        ([2, 4, 1, 3, 5, 7, -2, -4, -1, -3, -5, -7, 0], (-1, 1)),\n        ([2, 4, 1, 3, 5, 7, 'a', 'b', 'c'], (None, 1)),\n        ([-2, -4, -1, -3, -5, -7, 'a', 'b', 'c'], (-1, None)),\n        ([2, 4, 1, 3, 5, 7, -2, -4, -1, -3, -5, -7, 'a', 'b', 'c'], (-1, 1)),\n        ([2, 4, 1, 3, 5, 7, 0, 'a', 'b', 'c'], (None, 1)),\n        ([-2, -4, -1, -3, -5, -7, 0, 'a', 'b', 'c'], (-1, None)),\n        ([2, 4, 1, 3, 5, 7, -2, -4, -1, -3, -5, -7, 0, 'a', 'b', 'c'], (-1, 1)),\n        ([2.5, 4.5, 1.5, 3.5, 5.5, 7.5], (None, None)),\n        ([-2.5, -4.5, -1.5, -3.5, -5.5, -7.5], (None, None)),\n        ([2.5, 4.5, 1.5, 3.5, 5.5, 7.5, -2.5, -4.5, -1.5, -3.5, -5.5, -7.5], (None, None)),\n    ]\n\n    for i, (input_data, expected) in enumerate(test_cases):\n        result = largest_smallest_integers(input_data)\n        assert result == expected, f\"Test case {i+1} failed: input({input_data}) => output({result}), expected({expected})\"\n    print(\"All test cases passed!\")\n\ntest_largest_smallest_integers()\n"}
{"task_id": "HumanEval/141", "solution": "\ndef file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    import re\n    \n    # Check if input is a string\n    if not isinstance(file_name, str):\n        return 'No'\n    \n    # Check if there is exactly one dot\n    if file_name.count('.') != 1:\n        return 'No'\n    \n    # Split the file name into prefix and suffix\n    prefix, suffix = file_name.split('.')\n    \n    # Check if the suffix is valid\n    if suffix not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    # Check if the prefix is not empty and starts with a letter\n    if not prefix or not re.match(r'^[a-zA-Z]', prefix):\n        return 'No'\n    \n    # Check if there are more than three digits in the file name\n    if len(re.findall(r'\\d', file_name)) > 3:\n        return 'No'\n    \n    return 'Yes'\n\n# Test cases\ntest_cases = [\n    \"\",  # Empty string\n    \"example\",  # No dot\n    \"example..txt\",  # Multiple dots\n    \"example.pdf\",  # Invalid suffix\n    \"1example.txt\",  # Prefix starts with non-letter\n    \"examp1e2x3a4mple.txt\",  # More than three digits\n    \"example.txt\",  # Valid file name\n    12345,  # Non-string input\n    None,  # Non-string input\n    \"ex4mple.dll\",  # Valid file name with digits\n]\n\n# Execute test cases\nresults = {test: file_name_check(test) for test in test_cases}\nprint(results)\n"}
{"task_id": "HumanEval/146", "solution": "\ndef specialFilter(nums):\n    def is_odd_digit(digit):\n        return digit in {'1', '3', '5', '7', '9'}\n    \n    if not isinstance(nums, list):\n        raise TypeError(\"Input should be a list of integers\")\n    \n    count = 0\n    for num in nums:\n        if not isinstance(num, int):\n            raise TypeError(\"All elements in the list should be integers\")\n        if num > 10:\n            str_num = str(abs(num))\n            if is_odd_digit(str_num[0]) and is_odd_digit(str_num[-1]):\n                count += 1\n    return count\n\n# Test cases\nprint(specialFilter([15, -73, 14, -15]))  # Output: 1\nprint(specialFilter([33, -2, -3, 45, 21, 109]))  # Output: 2\nprint(specialFilter([]))  # Output: 0\nprint(specialFilter([11]))  # Output: 1\nprint(specialFilter([-11]))  # Output: 0\nprint(specialFilter([9, 19, 29, 39, 49, 59, 69, 79, 89, 99]))  # Output: 5\ntry:\n    print(specialFilter([15, '73', 14, -15]))  # Should raise TypeError\nexcept TypeError as e:\n    print(e)\ntry:\n    print(specialFilter(\"15, -73, 14, -15\"))  # Should raise TypeError\nexcept TypeError as e:\n    print(e)\ntry:\n    print(specialFilter([15, 73.5, 14, -15]))  # Should raise TypeError\nexcept TypeError as e:\n    print(e)\n"}
{"task_id": "HumanEval/148", "solution": "\ndef bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closest to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    planet1 = str(planet1).capitalize()\n    planet2 = str(planet2).capitalize()\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    if planet1 == planet2:\n        return ()\n    \n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    \n    if index1 > index2:\n        index1, index2 = index2, index1\n    \n    return tuple(planets[index1 + 1:index2])\n\n# Test cases to validate the function\ntest_cases = [\n    (\"Jupiter\", \"Neptune\"),  # Expected: (\"Saturn\", \"Uranus\")\n    (\"Earth\", \"Mercury\"),    # Expected: (\"Venus\")\n    (\"Mercury\", \"Uranus\"),   # Expected: (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    (\"Pluto\", \"Neptune\"),    # Expected: ()\n    (\"earth\", \"MERCURY\"),    # Expected: (\"Venus\")\n    (\"Mars\", \"Mars\"),        # Expected: ()\n    (123, \"Neptune\"),        # Expected: ()\n    (\"Jupiter\", None)        # Expected: ()\n]\n\nfor planet1, planet2 in test_cases:\n    print(f\"bf({planet1}, {planet2}) = {bf(planet1, planet2)}\")\n"}
{"task_id": "HumanEval/150", "solution": "\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    def is_prime(num):\n        if not isinstance(num, int) or num <= 1:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    if is_prime(n):\n        return x\n    else:\n        return y\n\n# Test cases to validate the function\nprint(x_or_y(7, 34, 12))  # Expected: 34 (7 is prime)\nprint(x_or_y(15, 8, 5))   # Expected: 5 (15 is not prime)\nprint(x_or_y(-5, 'a', 'b'))  # Expected: 'b' (-5 is not prime)\nprint(x_or_y(0, 'a', 'b'))   # Expected: 'b' (0 is not prime)\nprint(x_or_y(1, 'a', 'b'))   # Expected: 'b' (1 is not prime)\nprint(x_or_y(2.5, 'a', 'b')) # Expected: 'b' (2.5 is not an integer)\nprint(x_or_y(29, 'prime', 'not prime')) # Expected: 'prime' (29 is prime)\nprint(x_or_y(1000000007, 'large prime', 'not prime')) # Expected: 'large prime' (1000000007 is prime)\n\n<execute>"}
{"task_id": "HumanEval/149", "solution": "\ndef sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    # Ensure all elements are strings\n    lst = [str(s) for s in lst]\n    \n    # Filter out strings with odd lengths\n    even_length_strings = [s for s in lst if len(s) % 2 == 0]\n    \n    # Sort the list first by length, then alphabetically\n    sorted_strings = sorted(even_length_strings, key=lambda x: (len(x), x))\n    \n    return sorted_strings\n\n# Test cases\nprint(sorted_list_sum([]))  # Output: []\nprint(sorted_list_sum([\"a\", \"aaa\", \"aaaaa\"]))  # Output: []\nprint(sorted_list_sum([\"aa\", \"bbbb\", \"cccc\"]))  # Output: [\"aa\", \"bbbb\", \"cccc\"]\nprint(sorted_list_sum([\"a\", \"aa\", \"aaa\", \"aaaa\", \"aaaaa\"]))  # Output: [\"aa\", \"aaaa\"]\nprint(sorted_list_sum([\"aa\", \"aa\", \"bbbb\", \"bbbb\"]))  # Output: [\"aa\", \"aa\", \"bbbb\", \"bbbb\"]\nprint(sorted_list_sum([\"ab\", \"cd\", \"ef\", \"gh\"]))  # Output: [\"ab\", \"cd\", \"ef\", \"gh\"]\nprint(sorted_list_sum([\"a\", 123, \"aaa\", \"abcd\", \"efgh\"]))  # Output: [\"abcd\", \"efgh\"]\n\n<execute>"}
{"task_id": "HumanEval/151", "solution": "\ndef double_the_difference(lst):\n    total = 0\n    for num in lst:\n        if isinstance(num, int) and not isinstance(num, bool) and num >= 0 and num % 2 != 0:\n            total += num ** 2\n    return total\n"}
{"task_id": "HumanEval/147", "solution": "\ndef get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    # Check if n is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    # Create the array a\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    \n    # Initialize the count of valid triples\n    count = 0\n    \n    # Iterate through all possible triples (a[i], a[j], a[k])\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    \n    return count\n\n# Example usage\nprint(get_max_triples(5))  # Output: 1\n\n# Test cases for edge cases and different data types\ntry:\n    print(get_max_triples(0))  # Should raise ValueError\nexcept ValueError as e:\n    print(e)\n\ntry:\n    print(get_max_triples(-1))  # Should raise ValueError\nexcept ValueError as e:\n    print(e)\n\ntry:\n    print(get_max_triples(1.5))  # Should raise ValueError\nexcept ValueError as e:\n    print(e)\n\ntry:\n    print(get_max_triples(\"5\"))  # Should raise ValueError\nexcept ValueError as e:\n    print(e)\n\nprint(get_max_triples(1))  # Output: 0 (no triples possible)\nprint(get_max_triples(2))  # Output: 0 (no triples possible)\nprint(get_max_triples(10))  # Test with a larger value of n\n"}
{"task_id": "HumanEval/152", "solution": "\ndef compare(game, guess):\n    # Check if inputs are lists\n    if not isinstance(game, list) or not isinstance(guess, list):\n        raise ValueError(\"Both game and guess should be lists.\")\n    \n    # Check if lists are of the same length\n    if len(game) != len(guess):\n        raise ValueError(\"Both lists should be of the same length.\")\n    \n    result = []\n    for g, gu in zip(game, guess):\n        # Check if elements are integers\n        if not isinstance(g, int) or not isinstance(gu, int):\n            raise ValueError(\"All elements in the lists should be integers.\")\n        \n        if g == gu:\n            result.append(0)\n        else:\n            result.append(abs(g - gu))\n    return result\n\n# Examples\nprint(compare([1,2,3,4,5,1],[1,2,3,4,2,-2]))  # [0,0,0,0,3,3]\nprint(compare([0,5,0,0,0,4],[4,1,1,0,0,-2]))  # [4,4,1,0,0,6]\n\n# Edge cases\ntry:\n    print(compare([], []))  # []\nexcept ValueError as e:\n    print(e)\n\ntry:\n    print(compare([1, 2, 3], [1, 2]))  # Error: Both lists should be of the same length.\nexcept ValueError as e:\n    print(e)\n\ntry:\n    print(compare([1, 2, 3], [1, 2, '3']))  # Error: All elements in the lists should be integers.\nexcept ValueError as e:\n    print(e)\n\ntry:\n    print(compare([1, 2, 3], \"1, 2, 3\"))  # Error: Both game and guess should be lists.\nexcept ValueError as e:\n    print(e)\n\ntry:\n    print(compare([1, 2, 3], [1.0, 2.0, 3.0]))  # Error: All elements in the lists should be integers.\nexcept ValueError as e:\n    print(e)\n\n<execute>"}
{"task_id": "HumanEval/154", "solution": "\ndef cycpattern_check(a, b):\n    # Check if inputs are strings\n    if not isinstance(a, str) or not isinstance(b, str):\n        raise ValueError(\"Both inputs must be strings\")\n    \n    # Check for empty strings\n    if not a or not b:\n        return False\n    \n    def get_rotations(s):\n        rotations = []\n        for i in range(len(s)):\n            rotations.append(s[i:] + s[:i])\n        return rotations\n    \n    rotations = get_rotations(b)\n    for rotation in rotations:\n        if rotation in a:\n            return True\n    return False\n\n# Test cases to cover edge cases\nprint(cycpattern_check(\"\", \"\"))  # False\nprint(cycpattern_check(\"a\", \"a\"))  # True\nprint(cycpattern_check(\"a\", \"b\"))  # False\nprint(cycpattern_check(\"abc\", \"abcd\"))  # False\nprint(cycpattern_check(\"hello\", \"ell\"))  # True\nprint(cycpattern_check(\"whassup\", \"psus\"))  # False\nprint(cycpattern_check(\"abab\", \"baa\"))  # True\nprint(cycpattern_check(\"efef\", \"eeff\"))  # False\nprint(cycpattern_check(\"himenss\", \"simen\"))  # True\nprint(cycpattern_check(\"hello\", \"HELLO\"))  # False (case sensitivity)\nprint(cycpattern_check(\"hello world\", \"world\"))  # True\nprint(cycpattern_check(\"12345\", \"45123\"))  # True\nprint(cycpattern_check(\"special!@#\", \"!@#\"))  # True\n\n# Test case for non-string input\ntry:\n    print(cycpattern_check(123, \"123\"))\nexcept ValueError as e:\n    print(e)  # Both inputs must be strings\n\n<execute>"}
{"task_id": "HumanEval/158", "solution": "\ndef find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"aaaaaaa\"\n    \"\"\"\n    if not words:\n        return \"\"\n    \n    max_word = \"\"\n    max_unique_chars = 0\n    \n    for word in words:\n        if not isinstance(word, str):\n            continue\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_unique_chars = unique_chars\n            max_word = word\n    \n    return max_word\n\n# Test cases\nprint(find_max([]))  # Should return \"\"\nprint(find_max([\"single\"]))  # Should return \"single\"\nprint(find_max([\"name\", \"of\", \"string\"]))  # Should return \"string\"\nprint(find_max([\"name\", \"enam\", \"game\"]))  # Should return \"enam\"\nprint(find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]))  # Should return \"aaaaaaa\"\nprint(find_max([\"a\", \"ab\", \"abc\", \"abcd\"]))  # Should return \"abcd\"\nprint(find_max([\"abcd\", \"abce\", \"abcf\"]))  # Should return \"abcd\"\nprint(find_max([\"abcd\", \"abce\", \"abcf\", 123, None, [\"list\"], {\"set\"}]))  # Should return \"abcd\"\nprint(find_max([\"aA\", \"Aa\"]))  # Should return \"Aa\" (case-sensitive)\n"}
{"task_id": "HumanEval/157", "solution": "\ndef right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    # Check if inputs are numeric\n    if not all(isinstance(x, (int, float)) for x in [a, b, c]):\n        return False\n    \n    # Check if inputs are positive\n    if any(x <= 0 for x in [a, b, c]):\n        return False\n    \n    # Check if inputs can form a triangle\n    if a + b <= c or a + c <= b or b + c <= a:\n        return False\n    \n    sides = sorted([a, b, c])\n    return round(sides[0]**2 + sides[1]**2, 5) == round(sides[2]**2, 5)\n\n# Test cases to validate the function\ntest_cases = [\n    (3, 4, 5),  # True\n    (1, 2, 3),  # False\n    (0, 4, 5),  # False\n    (-3, 4, 5),  # False\n    (3, 4, '5'),  # False\n    (3, 4, [5]),  # False\n    (3.0, 4.0, 5.0),  # True\n    (3.0, 4.0, 5.00001)  # False\n]\n\nresults = [right_angle_triangle(*case) for case in test_cases]\nprint(results)\n"}
{"task_id": "HumanEval/156", "solution": "\ndef int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if not isinstance(number, int) or number < 1 or number > 1000:\n        return None\n    \n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syb = [\n        \"M\", \"CM\", \"D\", \"CD\",\n        \"C\", \"XC\", \"L\", \"XL\",\n        \"X\", \"IX\", \"V\", \"IV\",\n        \"I\"\n        ]\n    roman_num = ''\n    i = 0\n    while  number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syb[i]\n            number -= val[i]\n        i += 1\n    return roman_num.lower()\n\n# Test cases\ndef test_int_to_mini_roman():\n    test_cases = [\n        (1, 'i'),\n        (4, 'iv'),\n        (9, 'ix'),\n        (19, 'xix'),\n        (40, 'xl'),\n        (90, 'xc'),\n        (152, 'clii'),\n        (426, 'cdxxvi'),\n        (999, 'cmxcix'),\n        (1000, 'm'),\n        (0, None),  # Edge case: out of range\n        (1001, None),  # Edge case: out of range\n        (-1, None),  # Edge case: negative number\n        (3.5, None),  # Edge case: non-integer\n        ('a', None)  # Edge case: non-integer\n    ]\n    \n    for number, expected in test_cases:\n        try:\n            result = int_to_mini_roman(number)\n            assert result == expected, f\"Test failed for input {number}: expected {expected}, got {result}\"\n        except Exception as e:\n            assert expected is None, f\"Test failed for input {number}: expected {expected}, got exception {e}\"\n    \n    print(\"All test cases passed!\")\n\ntest_int_to_mini_roman()\n"}
{"task_id": "HumanEval/145", "solution": "\ndef order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(abs(n)))\n\n    # Check for non-integer elements\n    if not all(isinstance(x, int) for x in nums):\n        raise ValueError(\"All elements in the list must be integers\")\n\n    return sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))\n\n# Test cases\nprint(order_by_points([1, 11, -1, -11, -12]))  # Expected: [-1, -11, 1, -12, 11]\nprint(order_by_points([]))  # Expected: []\nprint(order_by_points([5]))  # Expected: [5]\nprint(order_by_points([10, 20, 30, 40]))  # Expected: [10, 20, 30, 40]\nprint(order_by_points([-10, -20, -30, -40]))  # Expected: [-10, -20, -30, -40]\nprint(order_by_points([123, 321, 213]))  # Expected: [123, 321, 213]\nprint(order_by_points([123, -321, 213]))  # Expected: [123, -321, 213]\ntry:\n    print(order_by_points([1, 'a', 3]))  # Expected: ValueError\nexcept ValueError as e:\n    print(e)\n"}
{"task_id": "HumanEval/161", "solution": "\ndef solve(s):\n    if not isinstance(s, str):\n        raise ValueError(\"Input must be a string\")\n    \n    has_letter = any(c.isalpha() for c in s)\n    \n    if not has_letter:\n        return s[::-1]\n    \n    result = []\n    for c in s:\n        if c.isalpha():\n            if c.islower():\n                result.append(c.upper())\n            else:\n                result.append(c.lower())\n        else:\n            result.append(c)\n    \n    return ''.join(result)\n\n# Test cases\nprint(solve(\"1234\"))  # Output: \"4321\"\nprint(solve(\"ab\"))    # Output: \"AB\"\nprint(solve(\"#a@C\"))  # Output: \"#A@c\"\nprint(solve(\"\"))      # Output: \"\"\nprint(solve(\"!@#$\"))  # Output: \"$#@!\"\nprint(solve(\"123aBc\"))# Output: \"123AbC\"\nprint(solve(\"A1b2C3\"))# Output: \"a1B2c3\"\n\n# Edge cases\ntry:\n    print(solve(1234))  # Should raise ValueError\nexcept ValueError as e:\n    print(e)  # Output: \"Input must be a string\"\n\ntry:\n    print(solve(None))  # Should raise ValueError\nexcept ValueError as e:\n    print(e)  # Output: \"Input must be a string\"\n"}
{"task_id": "HumanEval/159", "solution": "\ndef eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n    # Input validation\n    if not (isinstance(number, int) and isinstance(need, int) and isinstance(remaining, int)):\n        raise ValueError(\"All inputs must be integers.\")\n    if not (0 <= number <= 1000 and 0 <= need <= 1000 and 0 <= remaining <= 1000):\n        raise ValueError(\"All inputs must be between 0 and 1000 inclusive.\")\n    \n    total_needed = number + need\n    if remaining >= need:\n        return [total_needed, remaining - need]\n    else:\n        return [number + remaining, 0]\n\n# Test cases to validate the function\nprint(eat(5, 6, 10))  # Expected: [11, 4]\nprint(eat(4, 8, 9))   # Expected: [12, 1]\nprint(eat(1, 10, 10)) # Expected: [11, 0]\nprint(eat(2, 11, 5))  # Expected: [7, 0]\n\n# Edge cases\nprint(eat(0, 0, 0))   # Expected: [0, 0]\nprint(eat(1000, 0, 0))# Expected: [1000, 0]\nprint(eat(0, 1000, 1000)) # Expected: [1000, 0]\nprint(eat(1000, 1000, 1000)) # Expected: [2000, 0]\n\n# Invalid inputs\ntry:\n    print(eat(-1, 5, 10))  # Should raise ValueError\nexcept ValueError as e:\n    print(e)\n\ntry:\n    print(eat(5, \"6\", 10))  # Should raise ValueError\nexcept ValueError as e:\n    print(e)\n\ntry:\n    print(eat(5, 6, 1001))  # Should raise ValueError\nexcept ValueError as e:\n    print(e)\n"}
{"task_id": "HumanEval/127", "solution": "\ndef intersection(interval1, interval2):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    # Validate input types\n    if not (isinstance(interval1, tuple) and isinstance(interval2, tuple)):\n        return \"NO\"\n    if not (len(interval1) == 2 and len(interval2) == 2):\n        return \"NO\"\n    if not (all(isinstance(x, int) for x in interval1) and all(isinstance(x, int) for x in interval2)):\n        return \"NO\"\n\n    start1, end1 = interval1\n    start2, end2 = interval2\n\n    # Validate interval correctness\n    if start1 > end1 or start2 > end2:\n        return \"NO\"\n\n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n\n    if intersection_start > intersection_end:\n        return \"NO\"\n\n    intersection_length = intersection_end - intersection_start + 1\n\n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\"\n\n# Test cases\nprint(intersection((1, 2), (2, 3)))  # \"NO\"\nprint(intersection((-1, 1), (0, 4)))  # \"NO\"\nprint(intersection((-3, -1), (-5, 5)))  # \"YES\"\nprint(intersection((1, 1), (1, 1)))  # \"NO\"\nprint(intersection((1, 1), (2, 2)))  # \"NO\"\nprint(intersection((1, 10), (5, 15)))  # \"NO\"\nprint(intersection((1, 10), (5, 7)))  # \"NO\"\nprint(intersection((1, 10), (5, 5)))  # \"NO\"\nprint(intersection((1, 10), (11, 15)))  # \"NO\"\nprint(intersection((1, 10), (10, 15)))  # \"NO\"\nprint(intersection((1, 10), (9, 15)))  # \"YES\"\nprint(intersection((1, 10), (8, 15)))  # \"NO\"\nprint(intersection((1, 10), (7, 15)))  # \"NO\"\nprint(intersection((1, 10), (6, 15)))  # \"NO\"\nprint(intersection((1, 10), (5, 15)))  # \"NO\"\nprint(intersection((1, 10), (4, 15)))  # \"NO\"\nprint(intersection((1, 10), (3, 15)))  # \"NO\"\nprint(intersection((1, 10), (2, 15)))  # \"NO\"\nprint(intersection((1, 10), (1, 15)))  # \"NO\"\nprint(intersection((1, 10), (0, 15)))  # \"NO\"\nprint(intersection((1, 10), (-1, 15)))  # \"NO\"\nprint(intersection((1, 10), (-2, 15)))  # \"NO\"\nprint(intersection((1, 10), (-3, 15)))  # \"NO\"\nprint(intersection((1, 10), (-4, 15)))  # \"NO\"\nprint(intersection((1, 10), (-5, 15)))  # \"NO\"\nprint(intersection((1, 10), (-6, 15)))  # \"NO\"\nprint(intersection((1, 10), (-7, 15)))  # \"NO\"\nprint(intersection((1, 10), (-8, 15)))  # \"NO\"\nprint(intersection((1, 10), (-9, 15)))  # \"NO\"\nprint(intersection((1, 10), (-10, 15)))  # \"NO\"\nprint(intersection((1, 10), (-11, 15)))  # \"NO\"\nprint(intersection((1, 10), (-12, 15)))  # \"NO\"\nprint(intersection((1, 10), (-13, 15)))  # \"NO\"\nprint(intersection((1, 10), (-14, 15)))  # \"NO\"\nprint(intersection((1, 10), (-15, 15)))  # \"NO\"\nprint(intersection((1, 10), (-16, 15)))  # \"NO\"\nprint(intersection((1, 10), (-17, 15)))  # \"NO\"\nprint(intersection((1, 10), (-18, 15)))  # \"NO\"\nprint(intersection((1, 10), (-19, 15)))  # \"NO\"\nprint(intersection((1, 10), (-20, 15)))  # \"NO\"\nprint(intersection((1, 10), (-21, 15)))  # \"NO\"\nprint(intersection((1, 10), (-22, 15)))  # \"NO\"\nprint(intersection((1, 10), (-23, 15)))  # \"NO\"\nprint(intersection((1, 10), (-24, 15)))  # \"NO\"\nprint(intersection((1, 10), (-25, 15)))  # \"NO\"\nprint(intersection((1, 10), (-26, 15)))  # \"NO\"\nprint(intersection((1, 10), (-27, 15)))  # \"NO\"\nprint(intersection((1, 10), (-28, 15)))  # \"NO\"\nprint(intersection((1, 10), (-29, 15)))  # \"NO\"\nprint(intersection((1, 10), (-30, 15)))  # \"NO\"\nprint(intersection((1, 10), (-31, 15)))  # \"NO\"\nprint(intersection((1, 10), (-32, 15)))  # \"NO\"\nprint(intersection((1, 10), (-33, 15)))  # \"NO\"\nprint(intersection((1, 10), (-34, 15)))  # \"NO\"\nprint(intersection((1, 10), (-35, 15)))  # \"NO\"\nprint(intersection((1, 10), (-36, 15)))  # \"NO\"\nprint(intersection((1, 10), (-37, 15)))  # \"NO\"\nprint(intersection((1, 10), (-38, 15)))  # \"NO\"\nprint(intersection((1, 10), (-39, 15)))  # \"NO\"\nprint(intersection((1, 10), (-40, 15)))  # \"NO\"\nprint(intersection((1, 10), (-41, 15)))  # \"NO\"\nprint(intersection((1, 10), (-42, 15)))  # \"NO\"\nprint(intersection((1, 10), (-43, 15)))  # \"NO\"\nprint(intersection((1, 10), (-44, 15)))  # \"NO\"\nprint(intersection((1, 10), (-45, 15)))  # \"NO\"\nprint(intersection((1, 10), (-46, 15)))  # \"NO\"\nprint(intersection((1, 10), (-47, 15)))  # \"NO\"\nprint(intersection((1, 10), (-48, 15)))  # \"NO\"\nprint(intersection((1, 10), (-49, 15)))  # \"NO\"\nprint(intersection((1, 10), (-50, 15)))  # \"NO\"\nprint(intersection((1, 10), (-51, 15)))  # \"NO\"\nprint(intersection((1, 10), (-52, 15)))  # \"NO\"\nprint(intersection((1, 10), (-53, 15)))  # \"NO\"\nprint(intersection((1, 10), (-54, 15)))  # \"NO\"\nprint(intersection((1, 10), (-55, 15)))  # \"NO\"\nprint(intersection((1, 10), (-56, 15)))  # \"NO\"\nprint(intersection((1, 10), (-57, 15)))  # \"NO\"\nprint(intersection((1, 10), (-58, 15)))  # \"NO\"\nprint(intersection((1, 10), (-59, 15)))  # \"NO\"\nprint(intersection((1, 10), (-60, 15)))  # \"NO\"\nprint(intersection((1, 10), (-61, 15)))  # \"NO\"\nprint(intersection((1, 10), (-62, 15)))  # \"NO\"\nprint(intersection((1, 10), (-63, 15)))  # \"NO\"\nprint(intersection((1, 10), (-64, 15)))  # \"NO\"\nprint(intersection((1, 10), (-65, 15)))  # \"NO\"\nprint(intersection((1, 10), (-66, 15)))  # \"NO\"\nprint(intersection((1, 10), (-67, 15)))  # \"NO\"\nprint(intersection((1, 10), (-68, 15)))  # \"NO\"\nprint(intersection((1, 10), (-69, 15)))  # \"NO\"\nprint(intersection((1, 10), (-70, 15)))  # \"NO\"\nprint(intersection((1, 10), (-71, 15)))  # \"NO\"\nprint(intersection((1, 10), (-72, 15)))  # \"NO\"\nprint(intersection((1, 10), (-73, 15)))  # \"NO\"\nprint(intersection((1, 10), (-74, 15)))  # \"NO\"\nprint(intersection((1, 10), (-75, 15)))  # \"NO\"\nprint(intersection((1, 10), (-76, 15)))  # \"NO\"\nprint(intersection((1, 10), (-77, 15)))  # \"NO\"\nprint(intersection((1, 10), (-78, 15)))  # \"NO\"\nprint(intersection((1, 10), (-79, 15)))  # \"NO\"\nprint(intersection((1, 10), (-80, 15)))  # \"NO\"\nprint(intersection((1, 10), (-81, 15)))  # \"NO\"\nprint(intersection((1, 10), (-82, 15)))  # \"NO\"\nprint(intersection((1, 10), (-83, 15)))  # \"NO\"\nprint(intersection((1, 10), (-84, 15)))  # \"NO\"\nprint(intersection((1, 10), (-85, 15)))  # \"NO\"\nprint(intersection((1, 10), (-86, 15)))  # \"NO\"\nprint(intersection((1, 10), (-87, 15)))  # \"NO\"\nprint(intersection((1, 10), (-88, 15)))  # \"NO\"\nprint(intersection((1, 10), (-89, 15)))  # \"NO\"\nprint(intersection((1, 10), (-90, 15)))  # \"NO\"\nprint(intersection((1, 10), (-91, 15)))  # \"NO\"\nprint(intersection((1, 10), (-92, 15)))  # \"NO\"\nprint(intersection((1, 10), (-93, 15)))  # \"NO\"\nprint(intersection((1, 10), (-94, 15)))  # \"NO\"\nprint(intersection((1, 10), (-95, 15)))  # \"NO\"\nprint(intersection((1, 10), (-96, 15)))  # \"NO\"\nprint(intersection((1, 10), (-97, 15)))  # \"NO\"\nprint(intersection((1, 10), (-98, 15)))  # \"NO\"\nprint(intersection((1, 10), (-99, 15)))  # \"NO\"\nprint(intersection((1, 10), (-100, 15)))  # \"NO\"\nprint(intersection((1, 10), (-101, 15)))  # \"NO\"\nprint(intersection((1, 10), (-102, 15)))  # \"NO\"\nprint(intersection((1, 10), (-103, 15)))  # \"NO\"\nprint(intersection((1, 10), (-104, 15)))  # \"NO\"\nprint(intersection((1, 10), (-105, 15)))  # \"NO\"\nprint(intersection((1, 10), (-106, 15)))  # \"NO\"\nprint(intersection((1, 10), (-107, 15)))  # \"NO\"\nprint(intersection((1, 10), (-108, 15)))  # \"NO\"\nprint(intersection((1, 10), (-109, 15)))  # \"NO\"\nprint(intersection((1, 10), (-110, 15)))  # \"NO\"\nprint(intersection((1, 10), (-111, 15)))  # \"NO\"\nprint(intersection((1, 10), (-112, 15)))  # \"NO\"\nprint(intersection((1, 10), (-113, 15)))  # \"NO\"\nprint(intersection((1, 10), (-114, 15)))  # \"NO\"\nprint(intersection((1, 10), (-115, 15)))  # \"NO\"\nprint(intersection((1, 10), (-116, 15)))  # \"NO\"\nprint(intersection((1, 10), (-117, 15)))  # \"NO\"\nprint(intersection((1, 10), (-118, 15)))  # \"NO\"\nprint(intersection((1, 10), (-119, 15)))  # \"NO\"\nprint(intersection((1, 10), (-120, 15)))  # \"NO\"\nprint(intersection((1, 10), (-121, 15)))  # \"NO\"\nprint(intersection((1, 10), (-122, 15)))  # \"NO\"\nprint(intersection((1, 10), (-123, 15)))  # \"NO\"\nprint(intersection((1, 10), (-124, 15)))  # \"NO\"\nprint(intersection((1, 10), (-125, 15)))  # \"NO\"\nprint(intersection((1, 10), (-126, 15)))  # \"NO\"\nprint(intersection((1, 10), (-127, 15)))  # \"NO\"\nprint(intersection((1, 10), (-128, 15)))  # \"NO\"\nprint(intersection((1, 10), (-129, 15)))  # \"NO\"\nprint(intersection((1, 10), (-130, 15)))  # \"NO\"\nprint(intersection((1, 10), (-131, 15)))  # \"NO\"\nprint(intersection((1, 10), (-132, 15)))  # \"NO\"\nprint(intersection((1, 10), (-133, 15)))  # \"NO\"\nprint(intersection((1, 10), (-134, 15)))  # \"NO\"\nprint(intersection((1, 10), (-135, 15)))  # \"NO\"\nprint(intersection((1, 10), (-136, 15)))  # \"NO\"\nprint(intersection((1, 10), (-137, 15)))  # \"NO\"\nprint(intersection((1, 10), (-138, 15)))  # \"NO\"\nprint(intersection((1, 10), (-139, 15)))  # \"NO\"\nprint(intersection((1, 10), (-140, 15)))  # \"NO\"\nprint(intersection((1, 10), (-141, 15)))  # \"NO\"\nprint(intersection((1, 10), (-142, 15)))  # \"NO\"\nprint(intersection((1, 10), (-143, 15)))  # \"NO\"\nprint(intersection((1, 10), (-144, 15)))  # \"NO\"\nprint(intersection((1, 10), (-145, 15)))  # \"NO\"\nprint(intersection((1, 10), (-146, 15)))  # \"NO\"\nprint(intersection((1, 10), (-147, 15)))  # \"NO\"\nprint(intersection((1, 10), (-148, 15)))  # \"NO\"\nprint(intersection((1, 10), (-149, 15)))  # \"NO\"\nprint(intersection((1, 10), (-150, 15)))  # \"NO\"\nprint(intersection((1, 10), (-151, 15)))  # \"NO\"\nprint(intersection((1, 10), (-152, 15)))  # \"NO\"\nprint(intersection((1, 10), (-153, 15)))  # \"NO\"\nprint(intersection((1, 10), (-154, 15)))  # \"NO\"\nprint(intersection((1, 10), (-155, 15)))  # \"NO\"\nprint(intersection((1, 10), (-156, 15)))  # \"NO\"\nprint(intersection((1, 10), (-157, 15)))  # \"NO\"\nprint(intersection((1, 10), (-158, 15)))  # \"NO\"\nprint(intersection((1, 10), (-159, 15)))  # \"NO\"\nprint(intersection((1, 10), (-160, 15)))  # \"NO\"\nprint(intersection((1, 10), (-161, 15)))  # \"NO\"\nprint(intersection((1, 10), (-162, 15)))  # \"NO\"\nprint(intersection((1, 10), (-163, 15)))  # \"NO\"\nprint(intersection((1, 10), (-164, 15)))  # \"NO\"\nprint(intersection((1, 10), (-165, 15)))  # \"NO\"\nprint(intersection((1, 10), (-166, 15)))  # \"NO\"\nprint(intersection((1, 10), (-167, 15)))  # \"NO\"\nprint(intersection((1, 10), (-"}
{"task_id": "HumanEval/163", "solution": "\ndef generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    # Check if inputs are integers\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise ValueError(\"Both inputs must be integers.\")\n    \n    # Check if inputs are positive\n    if a < 0 or b < 0:\n        raise ValueError(\"Both inputs must be positive integers.\")\n    \n    # Check if inputs are within the range of single-digit numbers\n    if a > 9 or b > 9:\n        return []\n    \n    # Ensure a is less than or equal to b\n    if a > b:\n        a, b = b, a\n    \n    even_digits = [2, 4, 6, 8]\n    return [digit for digit in even_digits if a <= digit <= b]\n\n# Test cases to validate the function\ntest_cases = [\n    (2, 8),  # [2, 4, 6, 8]\n    (8, 2),  # [2, 4, 6, 8]\n    (10, 14),  # []\n    (0, 8),  # [2, 4, 6, 8]\n    (3, 3),  # []\n    (2, 2),  # [2]\n    (1, 1),  # []\n    (0, 0),  # []\n]\n\nfor a, b in test_cases:\n    try:\n        print(f\"generate_integers({a}, {b}) = {generate_integers(a, b)}\")\n    except ValueError as e:\n        print(f\"generate_integers({a}, {b}) raised ValueError: {e}\")\n\n# Additional test cases to check error handling\nadditional_test_cases = [\n    (2.5, 8),  # ValueError\n    (-2, 8),  # ValueError\n    (\"2\", 8),  # ValueError\n]\n\nfor a, b in additional_test_cases:\n    try:\n        print(f\"generate_integers({a}, {b}) = {generate_integers(a, b)}\")\n    except ValueError as e:\n        print(f\"generate_integers({a}, {b}) raised ValueError: {e}\")\n"}
{"task_id": "HumanEval/118", "solution": "\ndef get_closest_vowel(word):\n    vowels = 'aeiouAEIOU'\n    length = len(word)\n    \n    # Filter out non-alphabetic characters\n    filtered_word = ''.join([char for char in word if char.isalpha()])\n    \n    for i in range(len(filtered_word) - 2, 0, -1):\n        if filtered_word[i] in vowels and filtered_word[i-1] not in vowels and filtered_word[i+1] not in vowels:\n            return filtered_word[i]\n    \n    return \"\"\n\n# Test cases\ntest_cases = [\n    (\"\", \"\"),\n    (\"a\", \"\"),\n    (\"b\", \"\"),\n    (\"aeiou\", \"\"),\n    (\"bcdfg\", \"\"),\n    (\"yogurt\", \"u\"),\n    (\"FULL\", \"U\"),\n    (\"quick\", \"\"),\n    (\"ab\", \"\"),\n    (\"aEiOu\", \"\"),\n    (\"bCdFg\", \"\"),\n    (\"yOgUrT\", \"U\"),\n    (\"FUlL\", \"U\"),\n    (\"quIck\", \"\"),\n    (\"aB\", \"\"),\n    (\"a!e@i#o$u%\", \"\"),\n    (\"b!c@d#f$g%\", \"\"),\n    (\"yo!gu@rt\", \"u\"),\n    (\"FU!LL\", \"U\"),\n    (\"qu!ic@k\", \"\"),\n    (\"a!b\", \"\")\n]\n\nfor word, expected in test_cases:\n    result = get_closest_vowel(word)\n    print(f\"get_closest_vowel({word!r}) = {result!r} (expected: {expected!r})\")\n"}
{"task_id": "HumanEval/153", "solution": "\ndef Strongest_Extension(class_name, extensions):\n    if not isinstance(class_name, str):\n        raise ValueError(\"Class name must be a string.\")\n    \n    if not isinstance(extensions, list):\n        raise ValueError(\"Extensions must be provided as a list.\")\n    \n    if not extensions:\n        return f\"{class_name}.\"\n    \n    def calculate_strength(extension):\n        if not isinstance(extension, str):\n            raise ValueError(\"All extensions must be strings.\")\n        CAP = sum(1 for c in extension if c.isupper())\n        SM = sum(1 for c in extension if c.islower())\n        return CAP - SM\n\n    strongest_extension = max(extensions, key=calculate_strength, default=\"\")\n    return f\"{class_name}.{strongest_extension}\"\n\n# Example usage:\nprint(Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']))  # Should return 'Slices.SErviNGSliCes'\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))  # Should return 'my_class.AA'\nprint(Strongest_Extension('my_class', []))  # Should return 'my_class.'\nprint(Strongest_Extension('my_class', ['']))  # Should return 'my_class.'\nprint(Strongest_Extension('my_class', ['a', 'B']))  # Should return 'my_class.B'\nprint(Strongest_Extension('my_class', ['a', 'b']))  # Should return 'my_class.a'\nprint(Strongest_Extension('my_class', ['A', 'B']))  # Should return 'my_class.A'\nprint(Strongest_Extension('my_class', ['A1', 'B2']))  # Should return 'my_class.A1'\nprint(Strongest_Extension('my_class', ['A!', 'B@']))  # Should return 'my_class.A!'\nprint(Strongest_Extension('my_class', ['A', 'A']))  # Should return 'my_class.A'\nprint(Strongest_Extension('my_class', ['a', 'a']))  # Should return 'my_class.a'\nprint(Strongest_Extension('my_class', ['A', 'a']))  # Should return 'my_class.A'\nprint(Strongest_Extension('my_class', ['a', 'A']))  # Should return 'my_class.A'\nprint(Strongest_Extension('my_class', ['a', 'A', 'B']))  # Should return 'my_class.A'\nprint(Strongest_Extension('my_class', ['a', 'A', 'B', 'b']))  # Should return 'my_class.A'\nprint(Strongest_Extension('my_class', ['a', 'A', 'B', 'b', 'C']))  # Should return 'my_class.A'\nprint(Strongest_Extension('my_class', ['a', 'A', 'B', 'b', 'C', 'c']))  # Should return 'my_class.A'\nprint(Strongest_Extension('my_class', ['a', 'A', 'B', 'b', 'C', 'c', 'D']))  # Should return 'my_class.A'\nprint(Strongest_Extension('my_class', ['a', 'A', 'B', 'b', 'C', 'c', 'D', 'd']))  # Should return 'my_class.A'\nprint(Strongest_Extension('my_class', ['a', 'A', 'B', 'b', 'C', 'c', 'D', 'd', 'E']))  # Should return 'my_class.A'\nprint(Strongest_Extension('my_class', ['a', 'A', 'B', 'b', 'C', 'c', 'D', 'd', 'E', 'e']))  # Should return 'my_class.A'\nprint(Strongest_Extension('my_class', ['a', 'A', 'B', 'b', 'C', 'c', 'D', 'd', 'E', 'e', 'F']))  # Should return 'my_class.A'\nprint(Strongest_Extension('my_class', ['a', 'A', 'B', 'b', 'C', 'c', 'D', 'd', 'E', 'e', 'F', 'f']))  # Should return 'my_class.A'\nprint(Strongest_Extension('my_class', ['a', 'A', 'B', 'b', 'C', 'c', 'D', 'd', 'E', 'e', 'F', 'f', 'G']))  # Should return 'my_class.A'\nprint(Strongest_Extension('my_class', ['a', 'A', 'B', 'b', 'C', 'c', 'D', 'd', 'E', 'e', 'F', 'f', 'G', 'g']))  # Should return 'my_class.A'\nprint(Strongest_Extension('my_class', ['a', 'A', 'B', 'b', 'C', 'c', 'D', 'd', 'E', 'e', 'F', 'f', 'G', 'g', 'H']))  # Should return 'my_class.A'\nprint(Strongest_Extension('my_class', ['a', 'A', 'B', 'b', 'C', 'c', 'D', 'd', 'E', 'e', 'F', 'f', 'G', 'g', 'H', 'h']))  # Should return 'my_class.A'\nprint(Strongest_Extension('my_class', ['a', 'A', 'B', 'b', 'C', 'c', 'D', 'd', 'E', 'e', 'F', 'f', 'G', 'g', 'H', 'h', 'I']))  # Should return 'my_class.A'\nprint(Strongest_Extension('my_class', ['a', 'A', 'B', 'b', 'C', 'c', 'D', 'd', 'E', 'e', 'F', 'f', 'G', 'g', 'H', 'h', 'I', 'i']))  # Should return 'my_class.A'\nprint(Strongest_Extension('my_class', ['a', 'A', 'B', 'b', 'C', 'c', 'D', 'd', 'E', 'e', 'F', 'f', 'G', 'g', 'H', 'h', 'I', 'i', 'J']))  # Should return 'my_class.A'\nprint(Strongest_Extension('my_class', ['a', 'A', 'B', 'b', 'C', 'c', 'D', 'd', 'E', 'e', 'F', 'f', 'G', 'g', 'H', 'h', 'I', 'i', 'J', 'j']))  # Should return 'my_class.A'\nprint(Strongest_Extension('my_class', ['a', 'A', 'B', 'b', 'C', 'c', 'D', 'd', 'E', 'e', 'F', 'f', 'G', 'g', 'H', 'h', 'I', 'i', 'J', 'j', 'K']))  # Should return 'my_class.A'\nprint(Strongest_Extension('my_class', ['a', 'A', 'B', 'b', 'C', 'c', 'D', 'd', 'E', 'e', 'F', 'f', 'G', 'g', 'H', 'h', 'I', 'i', 'J', 'j', 'K', 'k']))  # Should return 'my_class.A'\nprint(Strongest_Extension('my_class', ['a', 'A', 'B', 'b', 'C', 'c', 'D', 'd', 'E', 'e', 'F', 'f', 'G', 'g', 'H', 'h', 'I', 'i', 'J', 'j', 'K', 'k', 'L']))  # Should return 'my_class.A'\nprint(Strongest_Extension('my_class', ['a', 'A', 'B', 'b', 'C', 'c', 'D', 'd', 'E', 'e', 'F', 'f', 'G', 'g', 'H', 'h', 'I', 'i', 'J', 'j', 'K', 'k', 'L', 'l']))  # Should return 'my_class.A'\nprint(Strongest_Extension('my_class', ['a', 'A', 'B', 'b', 'C', 'c', 'D', 'd', 'E', 'e', 'F', 'f', 'G', 'g', 'H', 'h', 'I', 'i', 'J', 'j', 'K', 'k', 'L', 'l', 'M']))  # Should return 'my_class.A'\nprint(Strongest_Extension('my_class', ['a', 'A', 'B', 'b', 'C', 'c', 'D', 'd', 'E', 'e', 'F', 'f', 'G', 'g', 'H', 'h', 'I', 'i', 'J', 'j', 'K', 'k', 'L', 'l', 'M', 'm']))  # Should return 'my_class.A'\nprint(Strongest_Extension('my_class', ['a', 'A', 'B', 'b', 'C', 'c', 'D', 'd', 'E', 'e', 'F', 'f', 'G', 'g', 'H', 'h', 'I', 'i', 'J', 'j', 'K', 'k', 'L', 'l', 'M', 'm', 'N']))  # Should return 'my_class.A'\nprint(Strongest_Extension('my_class', ['a', 'A', 'B', 'b', 'C', 'c', 'D', 'd', 'E', 'e', 'F', 'f', 'G', 'g', 'H', 'h', 'I', 'i', 'J', 'j', 'K', 'k', 'L', 'l', 'M', 'm', 'N', 'n']))  # Should return 'my_class.A'\nprint(Strongest_Extension('my_class', ['a', 'A', 'B', 'b', 'C', 'c', 'D', 'd', 'E', 'e', 'F', 'f', 'G', 'g', 'H', 'h', 'I', 'i', 'J', 'j', 'K', 'k', 'L', 'l', 'M', 'm', 'N', 'n', 'O']))  # Should return 'my_class.A'\nprint(Strongest_Extension('my_class', ['a', 'A', 'B', 'b', 'C', 'c', 'D', 'd', 'E', 'e', 'F', 'f', 'G', 'g', 'H', 'h', 'I', 'i', 'J', 'j', 'K', 'k', 'L', 'l', 'M', 'm', 'N', 'n', 'O', 'o']))  # Should return 'my_class.A'\nprint(Strongest_Extension('my_class', ['a', 'A', 'B', 'b', 'C', 'c', 'D', 'd', 'E', 'e', 'F', 'f', 'G', 'g', 'H', 'h', 'I', 'i', 'J', 'j', 'K', 'k', 'L', 'l', 'M', 'm', 'N', 'n', 'O', 'o', 'P']))  # Should return 'my_class.A'\nprint(Strongest_Extension('my_class', ['a', 'A', 'B', 'b', 'C', 'c', 'D', 'd', 'E', 'e', 'F', 'f', 'G', 'g', 'H', 'h', 'I', 'i', 'J', 'j', 'K', 'k', 'L', 'l', 'M', 'm', 'N', 'n', 'O', 'o', 'P', 'p']))  # Should return 'my_class.A'\nprint(Strongest_Extension('my_class', ['a', 'A', 'B', 'b', 'C', 'c', 'D', 'd', 'E', 'e', 'F', 'f', 'G', 'g', 'H', 'h', 'I', 'i', 'J', 'j', 'K', 'k', 'L', 'l', 'M', 'm', 'N', 'n', 'O', 'o', 'P', 'p', 'Q']))  # Should return 'my_class.A'\nprint(Strongest_Extension('my_class', ['a', 'A', 'B', 'b', 'C', 'c', 'D', 'd', 'E', 'e', 'F', 'f', 'G', 'g', 'H', 'h', 'I', 'i', 'J', 'j', 'K', 'k', 'L', 'l', 'M', 'm', 'N', 'n', 'O', 'o', 'P', 'p', 'Q', 'q']))  # Should return 'my_class.A'\nprint(Strongest_Extension('my_class', ['a', 'A', 'B', 'b', 'C', 'c', 'D', 'd', 'E', 'e', 'F', 'f', 'G', 'g', 'H', 'h', 'I', 'i', 'J', 'j', 'K', 'k', 'L', 'l', 'M', 'm', 'N', 'n', 'O', 'o', 'P', 'p', 'Q', 'q', 'R']))  # Should return 'my_class.A'\nprint(Strongest_Extension('my_class', ['a', 'A', 'B', 'b', 'C', 'c', 'D', 'd', 'E', 'e', 'F', 'f', 'G', 'g', 'H', 'h', 'I', 'i', 'J', 'j', 'K', 'k', 'L', 'l', 'M', 'm', 'N', 'n', 'O', 'o', 'P', 'p', 'Q', 'q', 'R', 'r']))  # Should return 'my_class.A'\nprint(Strongest_Extension('my_class', ['a', 'A', 'B', 'b', 'C', 'c', 'D', 'd', 'E', 'e', 'F', 'f', 'G', 'g', 'H', 'h', 'I', 'i', 'J', 'j', 'K', 'k', 'L', 'l', 'M', 'm', 'N', 'n', 'O', 'o', 'P', 'p', 'Q', 'q', 'R', 'r', 'S']))  # Should return 'my_class.A'\nprint(Strongest_Extension('my_class', ['a', 'A', 'B', 'b', 'C', 'c', 'D', 'd', 'E', 'e', 'F', 'f', 'G', 'g', 'H', 'h', 'I', 'i', 'J', 'j', 'K', 'k', 'L', 'l', 'M', 'm', 'N', 'n', 'O', 'o', 'P', 'p', 'Q', 'q', 'R', 'r', 'S', 's']))  # Should return 'my_class.A'\nprint(Strongest_Extension('my_class', ['a', 'A', 'B', 'b', 'C', 'c', 'D', 'd', 'E', 'e', 'F', 'f', 'G', 'g', 'H', 'h', 'I', 'i', 'J', 'j', 'K', 'k', 'L', 'l', 'M', 'm', 'N', 'n', 'O', 'o', 'P', 'p', 'Q', 'q', 'R', 'r', 'S', 's', 'T']))  # Should return 'my_class.A'\nprint(Strongest_Extension('my_class', ['a', 'A', 'B', 'b', 'C', 'c', 'D', 'd', 'E', 'e', 'F', 'f', 'G', 'g', 'H', 'h', 'I', 'i', 'J', 'j', 'K', 'k', 'L', 'l', 'M', 'm', 'N', 'n', 'O', 'o', 'P', 'p', 'Q', 'q', 'R', 'r', 'S', 's', 'T', 't']))  # Should return 'my_class.A'\nprint(Strongest_Extension('my_class', ['a', 'A', 'B', 'b', 'C', 'c', 'D', 'd', 'E', 'e', 'F', 'f', 'G', 'g', 'H', 'h', 'I', 'i', 'J', 'j', 'K', 'k', 'L', 'l', 'M', 'm', 'N', 'n', 'O', 'o', 'P', 'p', 'Q', 'q', 'R', 'r', 'S', 's', 'T', 't', 'U']))  # Should return 'my_class.A'\nprint(Strongest_Extension('my_class', ['a', 'A', 'B', 'b', 'C', 'c', 'D', 'd', 'E', 'e', 'F', 'f', 'G', 'g', 'H', 'h', 'I', 'i', 'J', 'j', 'K', 'k', 'L', 'l', 'M', 'm', 'N', 'n', 'O', 'o', 'P', 'p', 'Q', 'q', 'R', 'r', 'S', 's', 'T', 't', 'U', 'u']))  # Should return 'my_class.A'\nprint(Strongest_Extension('my_class', ['a', 'A', 'B', 'b', 'C', 'c', 'D', 'd', 'E', 'e', 'F', 'f', 'G', 'g', 'H', 'h', 'I', 'i', 'J', 'j', 'K', 'k', 'L', 'l', 'M', 'm', 'N', 'n', 'O', 'o', 'P', 'p"}
{"task_id": "HumanEval/76", "solution": "\ndef is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n\nprint(\"Error\")"}
{"task_id": "HumanEval/139", "solution": "\nimport math\n\ndef special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer\")\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n    \n    result = 1\n    for i in range(1, n + 1):\n        result *= math.factorial(i)\n    return result\n\n# Example usage\nprint(special_factorial(4))  # Output should be 288\n\n# Test cases for edge cases and different data types\ntry:\n    print(special_factorial(-1))  # Should raise ValueError\nexcept ValueError as e:\n    print(e)\n\ntry:\n    print(special_factorial(0))  # Should return 1\nexcept ValueError as e:\n    print(e)\n\ntry:\n    print(special_factorial(3.5))  # Should raise TypeError\nexcept TypeError as e:\n    print(e)\n\ntry:\n    print(special_factorial(\"4\"))  # Should raise TypeError\nexcept TypeError as e:\n    print(e)\n\n# Large input test\nprint(special_factorial(20))  # Should handle large input efficiently\n"}
{"task_id": "HumanEval/162", "solution": "\nimport hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n    If 'text' is not a string, raise a TypeError.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string\")\n    if text == \"\":\n        return None\n    md5_hash = hashlib.md5(text.encode()).hexdigest()\n    return md5_hash\n\n# Test cases\nassert string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\nassert string_to_md5('') == None\nassert string_to_md5('你好') == '7eca689f0d3389d9dea66ae112e5cfd7'\nassert string_to_md5('a' * 1000) == 'cabe45dcc9ae5b66ba86600cca6b8ba8'\n\ntry:\n    string_to_md5(123)\nexcept TypeError as e:\n    assert str(e) == \"Input must be a string\"\n\nprint(\"All test cases passed.\")\n<execute>"}
{"task_id": "HumanEval/160", "solution": "\ndef do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebraic \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n    \"\"\"\n    if not isinstance(operator, list) or not isinstance(operand, list):\n        raise TypeError(\"Both operator and operand should be lists.\")\n    \n    if len(operator) != len(operand) - 1:\n        raise ValueError(\"The length of operator list must be one less than the length of operand list.\")\n    \n    valid_operators = {'+', '-', '*', '//', '**'}\n    if not all(op in valid_operators for op in operator):\n        raise ValueError(\"Operator list contains invalid operators.\")\n    \n    if not all(isinstance(num, int) and num >= 0 for num in operand):\n        raise ValueError(\"Operand list should contain non-negative integers only.\")\n    \n    expression = str(operand[0])\n    for op, num in zip(operator, operand[1:]):\n        expression += f\" {op} {num}\"\n    \n    return eval(expression)\n\n# Test cases to validate the function\nprint(do_algebra(['+', '*', '-'], [2, 3, 4, 5]))  # Expected output: 9\nprint(do_algebra(['**', '//'], [2, 3, 4]))        # Expected output: 0\nprint(do_algebra(['+', '+'], [0, 0, 0]))          # Expected output: 0\nprint(do_algebra(['*'], [0, 1]))                  # Expected output: 0\nprint(do_algebra(['+'], [1, 0]))                  # Expected output: 1\n\n# Edge cases\ntry:\n    print(do_algebra([], [1]))  # Should raise ValueError\nexcept ValueError as e:\n    print(e)\n\ntry:\n    print(do_algebra(['+'], [1]))  # Should raise ValueError\nexcept ValueError as e:\n    print(e)\n\ntry:\n    print(do_algebra(['+'], [1, -1]))  # Should raise ValueError\nexcept ValueError as e:\n    print(e)\n\ntry:\n    print(do_algebra(['invalid'], [1, 1]))  # Should raise ValueError\nexcept ValueError as e:\n    print(e)\n\ntry:\n    print(do_algebra('+', [1, 1]))  # Should raise TypeError\nexcept TypeError as e:\n    print(e)\n\ntry:\n    print(do_algebra(['+'], '1, 1'))  # Should raise TypeError\nexcept TypeError as e:\n    print(e)\n"}
{"task_id": "HumanEval/155", "solution": "\ndef even_odd_count(num):\n    \"\"\"Given an integer, return a tuple that has the number of even and odd digits respectively.\n\n    Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if not isinstance(num, int):\n        raise ValueError(\"Input must be an integer.\")\n    \n    num_str = str(abs(num))  # Convert the number to a string and remove the sign if negative\n    even_count = 0\n    odd_count = 0\n    \n    for digit in num_str:\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    return (even_count, odd_count)\n\n# Example usage\nprint(even_odd_count(-12))  # Output: (1, 1)\nprint(even_odd_count(123))  # Output: (1, 2)\nprint(even_odd_count(0))    # Output: (1, 0)\nprint(even_odd_count}
