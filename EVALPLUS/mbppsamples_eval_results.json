{
    "date": "2024-08-12 14:12",
    "hash": "ebe95df0d5220f00cedd6f4bddea35e4",
    "eval": {
        "Mbpp/8": [
            {
                "task_id": "Mbpp/8",
                "solution": "\ndef square_nums(nums):\n    return [x**2 for x in nums]\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/12": [
            {
                "task_id": "Mbpp/12",
                "solution": "\ndef sort_matrix(matrix):\n    return sorted(matrix, key=lambda row: sum(row))\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/9": [
            {
                "task_id": "Mbpp/9",
                "solution": "\ndef find_Rotations(s):\n    n = len(s)\n    for i in range(1, n):\n        if s == s[i:] + s[:i]:\n            return i\n    return n\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/2": [
            {
                "task_id": "Mbpp/2",
                "solution": "\ndef similar_elements(list1, list2):\n    return list(set(list1) & set(list2))\n",
                "base_status": "fail",
                "plus_status": "fail",
                "base_fail_tests": [],
                "plus_fail_tests": [
                    [
                        [
                            "LsgdJOGUO",
                            "nsDO",
                            "ceRuVEV",
                            "BohovaWqz",
                            "vovSNBB",
                            "BohovaWqz"
                        ],
                        [
                            true,
                            false,
                            false
                        ]
                    ]
                ]
            }
        ],
        "Mbpp/14": [
            {
                "task_id": "Mbpp/14",
                "solution": "\ndef find_Volume(base_area, height, length):\n    return base_area * height * length / 2\n\n# Example usage:\n# assert find_Volume(10, 8, 6) == 240\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/6": [
            {
                "task_id": "Mbpp/6",
                "solution": "\ndef differ_At_One_Bit_Pos(a, b):\n    xor = a ^ b\n    return xor != 0 and (xor & (xor - 1)) == 0\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/7": [
            {
                "task_id": "Mbpp/7",
                "solution": "\ndef find_char_long(s):\n    return [word for word in s.split() if len(word) >= 4]\n",
                "base_status": "pass",
                "plus_status": "fail",
                "base_fail_tests": [],
                "plus_fail_tests": [
                    [
                        ""
                    ]
                ]
            }
        ],
        "Mbpp/11": [
            {
                "task_id": "Mbpp/11",
                "solution": "\ndef remove_Occ(s, ch):\n    first_occ = s.find(ch)\n    last_occ = s.rfind(ch)\n    if first_occ == -1 or last_occ == -1 or first_occ == last_occ:\n        return s\n    return s[:first_occ] + s[first_occ+1:last_occ] + s[last_occ+1]\n",
                "base_status": "fail",
                "plus_status": "fail",
                "base_fail_tests": [
                    [
                        "hello",
                        "l"
                    ]
                ],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/17": [
            {
                "task_id": "Mbpp/17",
                "solution": "\ndef square_perimeter(side_length):\n    return 4 * side_length\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/3": [
            {
                "task_id": "Mbpp/3",
                "solution": "\ndef is_not_prime(n):\n    if n <= 1:\n        return True\n    if n == 2:\n        return False\n    if n % 2 == 0:\n        return True\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return True\n    return False\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/18": [
            {
                "task_id": "Mbpp/18",
                "solution": "\ndef remove_dirty_chars(str1, str2):\n    return ''.join([char for char in str1 if char not in str2])\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/19": [
            {
                "task_id": "Mbpp/19",
                "solution": "\ndef test_duplicate(arr):\n    return len(arr) != len(set(arr))\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/58": [
            {
                "task_id": "Mbpp/58",
                "solution": "\ndef opposite_Signs(a, b):\n    return (a ^ b) < 0\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/4": [
            {
                "task_id": "Mbpp/4",
                "solution": "\nimport heapq\n\ndef heap_queue_largest(numbers, n):\n    return heapq.nlargest(n, numbers)\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/16": [
            {
                "task_id": "Mbpp/16",
                "solution": "\nimport re\n\ndef text_lowercase_underscore(s):\n    return bool(re.fullmatch(r'[a-z]+(_[a-z]+)*', s))\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/57": [
            {
                "task_id": "Mbpp/57",
                "solution": "\ndef find_Max_Num(digits):\n    digits = sorted(digits, reverse=True)\n    max_num = int(''.join(map(str, digits)))\n    return max_num\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/59": [
            {
                "task_id": "Mbpp/59",
                "solution": "\ndef is_octagonal(n):\n    return n * (3 * n - 2)\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/63": [
            {
                "task_id": "Mbpp/63",
                "solution": "\ndef max_difference(pairs):\n    return max(abs(a - b) for a, b in pairs)\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/56": [
            {
                "task_id": "Mbpp/56",
                "solution": "\ndef check(n):\n    reverse_n = int(str(n)[::-1])\n    return n == 2 * reverse_n - 1\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/66": [
            {
                "task_id": "Mbpp/66",
                "solution": "\ndef pos_count(lst):\n    return sum(1 for x in lst if x > 0)\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/64": [
            {
                "task_id": "Mbpp/64",
                "solution": "\ndef subject_marks(marks):\n    return sorted(marks, key=lambda x: x[1])\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/65": [
            {
                "task_id": "Mbpp/65",
                "solution": "\ndef recursive_list_sum(lst):\n    total = 0\n    for element in lst:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/20": [
            {
                "task_id": "Mbpp/20",
                "solution": "\ndef is_woodall(n):\n    k = 1\n    while True:\n        woodall_number = k * (2 ** k) - 1\n        if woodall_number == n:\n            return True\n        elif woodall_number > n:\n            return False\n        k += 1\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/62": [
            {
                "task_id": "Mbpp/62",
                "solution": "\ndef smallest_num(lst):\n    if not lst:\n        return None\n    smallest = lst[0]\n    for num in lst:\n        if num < smallest:\n            smallest = num\n    return smallest\n\n# Test case\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/68": [
            {
                "task_id": "Mbpp/68",
                "solution": "\ndef is_Monotonic(arr):\n    increasing = decreasing = True\n    for i in range(1, arr.length):\n        if arr[i] > arr[i - 1]:\n            decreasing = False\n        if arr[i] < arr[i - 1]:\n            increasing = False\n    return increasing or decreasing\n",
                "base_status": "fail",
                "plus_status": "fail",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/67": [
            {
                "task_id": "Mbpp/67",
                "solution": "\ndef bell_number(n):\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n\n    return bell[n][0]\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/70": [
            {
                "task_id": "Mbpp/70",
                "solution": "\ndef get_equal(tuples_list):\n    if not tuples_list:\n        return True\n    first_length = len(tuples_list[0])\n    return all(len(t) == first_length for t in tuples_list)\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/77": [
            {
                "task_id": "Mbpp/77",
                "solution": "\ndef is_Diff(number):\n    return number % 11 == 0\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/69": [
            {
                "task_id": "Mbpp/69",
                "solution": "\ndef is_sublist(main_list, sub_list):\n    sub_len = len(sub_list)\n    for i in range(len(main_list) - sub_len + 1):\n        if main_list[i:i + sub_len] == sub_list:\n            return True\n    return False\n\nassert is_sublist([2,4,3,5,7],[3,7])==False\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/80": [
            {
                "task_id": "Mbpp/80",
                "solution": "\ndef tetrahedral_number(n):\n    return n * (n + 1) * (n + 2) // 6\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/79": [
            {
                "task_id": "Mbpp/79",
                "solution": "\ndef word_len(word):\n    return len(word) % 2 != 0\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/75": [
            {
                "task_id": "Mbpp/75",
                "solution": "\ndef find_tuples(lst, k):\n    return [tup for tup in lst if all(x % k == 0 for x in tup)]\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/61": [
            {
                "task_id": "Mbpp/61",
                "solution": "\ndef count_Substrings(s):\n    def digit_sum(sub):\n        return sum(int(char) for char in sub)\n    \n    count = 0\n    n = len(s)\n    \n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            sub = s[i:j]\n            if digit_sum(sub) == len(sub):\n                count += 1\n                \n    return count\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/82": [
            {
                "task_id": "Mbpp/82",
                "solution": "\nimport math\n\ndef volume_sphere(radius):\n    return (4/3) * math.pi * radius**3\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/74": [
            {
                "task_id": "Mbpp/74",
                "solution": "\ndef is_samepatterns(strings, patterns):\n    if len(strings) != len(patterns):\n        return False\n    \n    str_to_pat = {}\n    pat_to_str = {}\n    \n    for s, p in zip(strings, patterns):\n        if s not in str_to_pat:\n            str_to_pat[s] = p\n        if p not in pat_to_str:\n            pat_to_str[p] = s\n        \n        if str_to_pat[s] != p or pat_to_str[p] != s:\n            return False\n    \n    return True\n",
                "base_status": "pass",
                "plus_status": "fail",
                "base_fail_tests": [],
                "plus_fail_tests": [
                    [
                        [
                            "red",
                            "green",
                            "blue",
                            "yellow"
                        ],
                        [
                            "a",
                            "b",
                            "c",
                            "a"
                        ]
                    ]
                ]
            }
        ],
        "Mbpp/71": [
            {
                "task_id": "Mbpp/71",
                "solution": "\ndef comb_sort(arr):\n    def get_next_gap(gap):\n        gap = (gap * 10) // 13\n        if gap < 1:\n            return 1\n        return gap\n\n    n = len(arr)\n    gap = n\n    swapped = True\n\n    while gap != 1 or swapped:\n        gap = get_next_gap(gap)\n        swapped = False\n\n        for i in range(0, n - gap):\n            if arr[i] > arr[i + gap]:\n                arr[i], arr[i + gap] = arr[i + gap], arr[i]\n                swapped = True\n\n    return arr\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/72": [
            {
                "task_id": "Mbpp/72",
                "solution": "\ndef dif_Square(n):\n    if n < 0:\n        return False\n    for i in range(int(n**0.5) + 1):\n        j = int((i**2 - n)**0.5)\n        if i**2 - j**2 == n:\n            return True\n    return False\n",
                "base_status": "fail",
                "plus_status": "fail",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/87": [
            {
                "task_id": "Mbpp/87",
                "solution": "\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/85": [
            {
                "task_id": "Mbpp/85",
                "solution": "\nimport math\n\ndef surfacearea_sphere(radius):\n    return 4 * math.pi * radius ** 2\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/89": [
            {
                "task_id": "Mbpp/89",
                "solution": "\ndef closest_num(n):\n    return n - 1\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/88": [
            {
                "task_id": "Mbpp/88",
                "solution": "\ndef freq_count(lst):\n    freq_dict = {}\n    for item in lst:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/93": [
            {
                "task_id": "Mbpp/93",
                "solution": "\ndef power(a, b):\n    return a ** b\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/91": [
            {
                "task_id": "Mbpp/91",
                "solution": "\ndef find_substring(lst, substr):\n    for string in lst:\n        if substr in string:\n            return True\n    return False\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/92": [
            {
                "task_id": "Mbpp/92",
                "solution": "\ndef is_undulating(number):\n    num_str = str(number)\n    if len(num_str) < 3:\n        return False\n    first_digit = num_str[0]\n    second_digit = num_str[1]\n    if first_digit == second_digit:\n        return False\n    for i in range(2, len(num_str)):\n        if i % 2 == 0 and num_str[i] != first_digit:\n            return False\n        if i % 2 != 0 and num_str[i] != second_digit:\n            return False\n    return True\n",
                "base_status": "pass",
                "plus_status": "fail",
                "base_fail_tests": [],
                "plus_fail_tests": [
                    [
                        2121212121212127
                    ]
                ]
            }
        ],
        "Mbpp/96": [
            {
                "task_id": "Mbpp/96",
                "solution": "\ndef divisor(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n\nassert divisor(15) == 4\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/90": [
            {
                "task_id": "Mbpp/90",
                "solution": "\ndef len_log(words):\n    return max(len(word) for word in words)\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/95": [
            {
                "task_id": "Mbpp/95",
                "solution": "\ndef Find_Min_Length(list_of_lists):\n    if not list_of_lists:\n        return 0\n    return min(len(lst) for lst in list_of_lists)\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/98": [
            {
                "task_id": "Mbpp/98",
                "solution": "\ndef multiply_num(numbers):\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/86": [
            {
                "task_id": "Mbpp/86",
                "solution": "\ndef centered_hexagonal_number(n):\n    return 3 * n * (n - 1) + 1\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/94": [
            {
                "task_id": "Mbpp/94",
                "solution": "\ndef index_minimum(lst):\n    return min(lst, key=lambda x: x[1])[0]\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/99": [
            {
                "task_id": "Mbpp/99",
                "solution": "\ndef decimal_to_binary(n):\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary\n",
                "base_status": "pass",
                "plus_status": "fail",
                "base_fail_tests": [],
                "plus_fail_tests": [
                    [
                        0
                    ]
                ]
            }
        ],
        "Mbpp/104": [
            {
                "task_id": "Mbpp/104",
                "solution": "\ndef sort_sublists(list_of_lists):\n    return [sorted(sublist) for sublist in list_of_lists]\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/101": [
            {
                "task_id": "Mbpp/101",
                "solution": "\ndef kth_element(arr, k):\n    return arr[k-1]\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/100": [
            {
                "task_id": "Mbpp/100",
                "solution": "\ndef next_smallest_palindrome(n):\n    def is_palindrome(x):\n        return str(x) == str(x)[::-1]\n    \n    n += 1\n    while not is_palindrome(n):\n        n += 1\n    return n\n\n# Test case\nassert next_smallest_palindrome(99) == 101\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/105": [
            {
                "task_id": "Mbpp/105",
                "solution": "\ndef count(boolean_list):\n    return boolean_list.count(True)\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/97": [
            {
                "task_id": "Mbpp/97",
                "solution": "\ndef frequency_lists(list_of_lists):\n    flat_list = [item for sublist in list_of_lists for item in sublist]\n    frequency_dict = {}\n    for item in flat_list:\n        if item in frequency_dict:\n            frequency_dict[item] += 1\n        else:\n            frequency_dict[item] = 1\n    return frequency_dict\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/84": [
            {
                "task_id": "Mbpp/84",
                "solution": "\ndef sequence(n):\n    if n == 1 or n == 2:\n        return 1\n    seq = [0] * (n + 1)\n    seq[1], seq[2] = 1, 1\n    for i in range(3, n + 1):\n        seq[i] = seq[seq[i - 1]] + seq[i - seq[i - 1]]\n    return seq[n]\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/103": [
            {
                "task_id": "Mbpp/103",
                "solution": "\ndef eulerian_num(n, m):\n    if m >= n or n == 0:\n        return 0\n    if m == 0:\n        return 1\n    return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n\n# Example usage\nassert eulerian_num(3, 1) == 4\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/106": [
            {
                "task_id": "Mbpp/106",
                "solution": "\ndef add_lists(lst, tpl):\n    return tpl + tuple(lst)\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/102": [
            {
                "task_id": "Mbpp/102",
                "solution": "\ndef snake_to_camel(snake_str):\n    components = snake_str.split('_')\n    return ''.join(x.title() for x in components)\n",
                "base_status": "pass",
                "plus_status": "fail",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/113": [
            {
                "task_id": "Mbpp/113",
                "solution": "\ndef check_integer(s):\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False\n",
                "base_status": "pass",
                "plus_status": "fail",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/108": [
            {
                "task_id": "Mbpp/108",
                "solution": "\ndef merge_sorted_list(list1, list2, list3):\n    combined_list = list1 + list2 + list3\n    combined_list.sort()\n    return combined_list\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/116": [
            {
                "task_id": "Mbpp/116",
                "solution": "\ndef tuple_to_int(tup):\n    return int(''.join(map(str, tup)))\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/109": [
            {
                "task_id": "Mbpp/109",
                "solution": "\ndef odd_Equivalent(binary_string, rotations):\n    def is_odd(binary_str):\n        return int(binary_str, 2) % 2 != 0\n\n    count = 0\n    length = len(binary_string)\n    for i in range(rotations):\n        rotated_string = binary_string[-i % length:] + binary_string[:-i % length]\n        if is_odd(rotated_string):\n            count += 1\n    return count\n",
                "base_status": "pass",
                "plus_status": "fail",
                "base_fail_tests": [],
                "plus_fail_tests": [
                    [
                        "0000",
                        3
                    ]
                ]
            }
        ],
        "Mbpp/118": [
            {
                "task_id": "Mbpp/118",
                "solution": "\ndef string_to_list(s):\n    return s.split(' ')\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/111": [
            {
                "task_id": "Mbpp/111",
                "solution": "\ndef common_in_nested_lists(nested_lists):\n    if not nested_lists:\n        return []\n    common_elements = set(nested_lists[0])\n    for lst in nested_lists[1:]:\n        common_elements.intersection_update(lst)\n    return list(common_elements)\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/120": [
            {
                "task_id": "Mbpp/120",
                "solution": "\ndef max_product_tuple(lst):\n    max_product = 0\n    for a, b in lst:\n        product = abs(a * b)\n        if product > max_product:\n            max_product = product\n    return max_product\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/119": [
            {
                "task_id": "Mbpp/119",
                "solution": "\ndef search(arr):\n    left, right = 0, len(arr) - 1\n    while left < right:\n        mid = left + (right - left) // 2\n        if mid % 2 == 1:\n            mid -= 1\n        if arr[mid] == arr[mid + 1]:\n            left = mid + 2\n        else:\n            right = mid\n    return arr[left]\n\nassert search([1,1,2,2,3]) == 3\n",
                "base_status": "pass",
                "plus_status": "fail",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/124": [
            {
                "task_id": "Mbpp/124",
                "solution": "\nimport cmath\n\ndef angle_complex(z):\n    return cmath.phase(z)\n",
                "base_status": "fail",
                "plus_status": "fail",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/127": [
            {
                "task_id": "Mbpp/127",
                "solution": "\ndef multiply_int(a, b):\n    return a * b\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/128": [
            {
                "task_id": "Mbpp/128",
                "solution": "\ndef long_words(n, sentence):\n    words = sentence.split()\n    return [word for word in words if len(word) > n]\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/130": [
            {
                "task_id": "Mbpp/130",
                "solution": "\ndef max_occurrences(lst):\n    from collections import Counter\n    count = Counter(lst)\n    return count.most_common(1)[0][0]\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/125": [
            {
                "task_id": "Mbpp/125",
                "solution": "\ndef find_length(binary_string):\n    max_diff = 0\n    current_diff = 0\n    \n    for char in binary_string:\n        if char == '0':\n            current_diff += 1\n        else:\n            current_diff -= 1\n        \n        if current_diff < 0:\n            current_diff = 0\n        \n        max_diff = max(max_diff, current_diff)\n    \n    return max_diff\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/126": [
            {
                "task_id": "Mbpp/126",
                "solution": "\ndef sum_common_divisors(a, b):\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n\n    def sum_divisors(n):\n        total = 0\n        for i in range(1, n + 1):\n            if n % i == 0:\n                total += i\n        return total\n\n    common_gcd = gcd(a, b)\n    return sum_divisors(common_gcd)\n\nassert sum_common_divisors(10, 15) == 6\n",
                "base_status": "fail",
                "plus_status": "fail",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/133": [
            {
                "task_id": "Mbpp/133",
                "solution": "\ndef sum_negativenum(numbers):\n    return sum(num for num in numbers if num < 0)\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/132": [
            {
                "task_id": "Mbpp/132",
                "solution": "\ndef tup_string(tup):\n    return ''.join(tup)\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/129": [
            {
                "task_id": "Mbpp/129",
                "solution": "\ndef magic_square_test(matrix):\n    n = len(matrix)\n    if n == 0 or any(len(row) != n for row in matrix):\n        return False\n\n    magic_sum = sum(matrix[0])\n\n    for row in matrix:\n        if sum(row) != magic_sum:\n            return False\n\n    for col in range(n):\n        if sum(matrix[row][col] for row in range(n)) != magic_sum:\n            return False\n\n    if sum(matrix[i][i] for i in range(n)) != magic_sum:\n        return False\n\n    if sum(matrix[i][n - 1 - i] for i in range(n)) != magic_sum:\n        return False\n\n    return True\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/137": [
            {
                "task_id": "Mbpp/137",
                "solution": "\nimport math\n\ndef zero_count(arr):\n    if not arr:\n        return 0\n    zeroes = arr.count(0)\n    non_zeroes = len(arr) - zeroes\n    if non_zeroes == 0:\n        return float('inf')  # Avoid division by zero\n    return zeroes / non_zeroes\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/139": [
            {
                "task_id": "Mbpp/139",
                "solution": "\nimport math\n\ndef circle_circumference(radius):\n    return 2 * math.pi * radius\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/131": [
            {
                "task_id": "Mbpp/131",
                "solution": "\ndef reverse_vowels(s):\n    vowels = \"aeiouAEIOU\"\n    s = list(s)\n    i, j = 0, len(s) - 1\n    while i < j:\n        if s[i] in vowels and s[j] in vowels:\n            s[i], s[j] = s[j], s[i]\n            i += 1\n            j -= 1\n        if s[i] not in vowels:\n            i += 1\n        if s[j] not in vowels:\n            j -= 1\n    return ''.join(s)\n\nassert reverse_vowels(\"Python\") == \"Python\"\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/138": [
            {
                "task_id": "Mbpp/138",
                "solution": "\ndef is_Sum_Of_Powers_Of_Two(n):\n    while n > 0:\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n -= 1\n    return n == 0\n",
                "base_status": "fail",
                "plus_status": "fail",
                "base_fail_tests": [
                    [
                        10
                    ]
                ],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/141": [
            {
                "task_id": "Mbpp/141",
                "solution": "\ndef pancake_sort(arr):\n    def flip(sublist, k):\n        return sublist[:k][::-1] + sublist[k:]\n\n    n = len(arr)\n    for size in range(n, 1, -1):\n        max_index = arr.index(max(arr[:size]))\n        if max_index != size - 1:\n            arr = flip(arr, max_index + 1)\n            arr = flip(arr, size)\n    return arr\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/135": [
            {
                "task_id": "Mbpp/135",
                "solution": "\ndef hexagonal_num(n):\n    return n * (2 * n - 1)\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/145": [
            {
                "task_id": "Mbpp/145",
                "solution": "\ndef max_Abs_Diff(arr):\n    if not arr:\n        return 0\n    return max(arr) - min(arr)\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/161": [
            {
                "task_id": "Mbpp/161",
                "solution": "\ndef remove_elements(source_list, remove_list):\n    return [item for item in source_list if item not in remove_list]\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/160": [
            {
                "task_id": "Mbpp/160",
                "solution": "\ndef find_solution(a, b, n):\n    for x in range(n // a + 1):\n        for y in range(n // b + 1):\n            if a * x + b * y == n:\n                return (x, y)\n    return None\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/140": [
            {
                "task_id": "Mbpp/140",
                "solution": "\ndef extract_singly(list_of_lists):\n    result_set = set()\n    for sublist in list_of_lists:\n        for item in sublist:\n            result_set.add(item)\n    return result_set\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/165": [
            {
                "task_id": "Mbpp/165",
                "solution": "\ndef count_char_position(s):\n    count = 0\n    s = s.lower()\n    for i, char in enumerate(s):\n        if ord(char) - ord('a') == i:\n            count += 1\n    return count\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/166": [
            {
                "task_id": "Mbpp/166",
                "solution": "\ndef find_even_pair(lst):\n    count = 0\n    n = len(lst)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (lst[i] ^ lst[j]) % 2 == 0:\n                count += 1\n    return count\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/167": [
            {
                "task_id": "Mbpp/167",
                "solution": "\ndef next_power_of_2(n):\n    if n <= 0:\n        return 1\n    power = 1\n    while power < n:\n        power *= 2\n    return power\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/162": [
            {
                "task_id": "Mbpp/162",
                "solution": "\ndef sum_series(n):\n    total = 0\n    for i in range(n // 2 + 1):\n        total += (n - 2 * i)\n    return total\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/168": [
            {
                "task_id": "Mbpp/168",
                "solution": "\ndef frequency(lst, num):\n    return lst.count(num)\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/170": [
            {
                "task_id": "Mbpp/170",
                "solution": "\ndef sum_range_list(lst, start_idx, end_idx):\n    return sum(lst[start_idx:end_idx+1])\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/172": [
            {
                "task_id": "Mbpp/172",
                "solution": "\ndef count_occurance(s):\n    return s.count('std')\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/171": [
            {
                "task_id": "Mbpp/171",
                "solution": "\ndef perimeter_pentagon(side_length):\n    return 5 * side_length\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/223": [
            {
                "task_id": "Mbpp/223",
                "solution": "\ndef is_majority(arr, n, element):\n    count = arr.count(element)\n    return count > n // 2\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/222": [
            {
                "task_id": "Mbpp/222",
                "solution": "\ndef check_type(t):\n    if not t:\n        return True\n    first_type = type(t[0])\n    return all(type(item) == first_type for item in t)\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/224": [
            {
                "task_id": "Mbpp/224",
                "solution": "\ndef count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/230": [
            {
                "task_id": "Mbpp/230",
                "solution": "\ndef replace_blank(string, char):\n    return string.replace(' ', char)\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/233": [
            {
                "task_id": "Mbpp/233",
                "solution": "\nimport math\n\ndef lateralsurface_cylinder(radius, height):\n    return 2 * math.pi * radius * height\n",
                "base_status": "fail",
                "plus_status": "fail",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/226": [
            {
                "task_id": "Mbpp/226",
                "solution": "\ndef odd_values_string(s):\n    return ''.join([s[i] for i in range(len(s)) if i % 2 == 0])\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/123": [
            {
                "task_id": "Mbpp/123",
                "solution": "\ndef amicable_numbers_sum(n):\n    def sum_of_divisors(x):\n        return sum(i for i in range(1, x) if x % i == 0)\n    \n    amicable_sum = 0\n    for a in range(1, n + 1):\n        b = sum_of_divisors(a)\n        if b != a and sum_of_divisors(b) == a:\n            amicable_sum += a\n    \n    return amicable_sum\n\nassert amicable_numbers_sum(999) == 504\n",
                "base_status": "fail",
                "plus_status": "fail",
                "base_fail_tests": [
                    [
                        999
                    ]
                ],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/142": [
            {
                "task_id": "Mbpp/142",
                "solution": "\ndef count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(min(len(list1), len(list2), len(list3))):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/227": [
            {
                "task_id": "Mbpp/227",
                "solution": "\ndef min_of_three(a, b, c):\n    return min(a, b, c)\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/232": [
            {
                "task_id": "Mbpp/232",
                "solution": "\ndef larg_nnum(lst, n):\n    return sorted(lst, reverse=True)[:n]\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/238": [
            {
                "task_id": "Mbpp/238",
                "solution": "\ndef number_of_substrings(s):\n    n = len(s)\n    return n * (n + 1) // 2\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/237": [
            {
                "task_id": "Mbpp/237",
                "solution": "\ndef check_occurences(lst):\n    occurences = {}\n    for item in lst:\n        sorted_item = tuple(sorted(item))\n        if sorted_item in occurences:\n            occurences[sorted_item] += 1\n        else:\n            occurences[sorted_item] = 1\n    return occurences\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/242": [
            {
                "task_id": "Mbpp/242",
                "solution": "\ndef count_charac(s):\n    return len(s)\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/240": [
            {
                "task_id": "Mbpp/240",
                "solution": "\ndef replace_list(list1, list2):\n    return list1[:-1] + list2\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/234": [
            {
                "task_id": "Mbpp/234",
                "solution": "\ndef volume_cube(side_length):\n    return side_length ** 3\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/235": [
            {
                "task_id": "Mbpp/235",
                "solution": "\ndef even_bit_set_number(n):\n    mask = 0\n    for i in range(0, 32, 2):\n        mask |= (1 << i)\n    return n | mask\n",
                "base_status": "fail",
                "plus_status": "fail",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/244": [
            {
                "task_id": "Mbpp/244",
                "solution": "\nimport math\n\ndef next_Perfect_Square(n):\n    root = math.isqrt(n)\n    next_root = root + 1\n    return next_root * next_root\n",
                "base_status": "pass",
                "plus_status": "fail",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/250": [
            {
                "task_id": "Mbpp/250",
                "solution": "\ndef count_X(tup, element):\n    return tup.count(element)\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/252": [
            {
                "task_id": "Mbpp/252",
                "solution": "\nimport cmath\n\ndef convert(z):\n    if isinstance(z, (int, float)):\n        z = complex(z)\n    r, theta = cmath.polar(z)\n    return (r, theta)\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/253": [
            {
                "task_id": "Mbpp/253",
                "solution": "\ndef count_integer(lst):\n    return sum(1 for x in lst if isinstance(x, int))\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/251": [
            {
                "task_id": "Mbpp/251",
                "solution": "\ndef insert_element(lst, elem):\n    result = []\n    for item in lst:\n        result.append(elem)\n        result.append(item)\n    return result\n\n# Example usage:\n# assert insert_element(['Red', 'Green', 'Black'], 'c') == ['c', 'Red', 'c', 'Green', 'c', 'Black']\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/247": [
            {
                "task_id": "Mbpp/247",
                "solution": "\ndef lps(s: str) -> int:\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n    \n    for i in range(n):\n        dp[i][i] = 1\n    \n    for cl in range(2, n + 1):\n        for i in range(n - cl + 1):\n            j = i + cl - 1\n            if s[i] == s[j] and cl == 2:\n                dp[i][j] = 2\n            elif s[i] == s[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i][j - 1], dp[i + 1][j])\n    \n    return dp[0][n - 1]\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/257": [
            {
                "task_id": "Mbpp/257",
                "solution": "\ndef swap_numbers(a, b):\n    return (b, a)\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/245": [
            {
                "task_id": "Mbpp/245",
                "solution": "\ndef max_sum(arr):\n    n = len(arr)\n    \n    # Initialize the increasing and decreasing subsequence sums\n    inc = [0] * n\n    dec = [0] * n\n    \n    # Fill the increasing subsequence sum array\n    for i in range(n):\n        inc[i] = arr[i]\n        for j in range(i):\n            if arr[i] > arr[j] and inc[i] < inc[j] + arr[i]:\n                inc[i] = inc[j] + arr[i]\n    \n    # Fill the decreasing subsequence sum array\n    for i in range(n-1, -1, -1):\n        dec[i] = arr[i]\n        for j in range(n-1, i, -1):\n            if arr[i] > arr[j] and dec[i] < dec[j] + arr[i]:\n                dec[i] = dec[j] + arr[i]\n    \n    # Find the maximum sum of bitonic subsequence\n    max_sum = 0\n    for i in range(n):\n        max_sum = max(max_sum, inc[i] + dec[i] - arr[i])\n    \n    return max_sum\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/259": [
            {
                "task_id": "Mbpp/259",
                "solution": "\ndef maximize_elements(tuple1, tuple2):\n    return tuple((max(a, b), max(c, d)) for ((a, c), (b, d)) in zip(tuple1, tuple2))\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/256": [
            {
                "task_id": "Mbpp/256",
                "solution": "\ndef count_Primes_nums(n):\n    if n <= 2:\n        return 0\n    sieve = [True] * n\n    sieve[0] = sieve[1] = False\n    for start in range(2, int(n**0.5) + 1):\n        if sieve[start]:\n            for multiple in range(start*start, n, start):\n                sieve[multiple] = False\n    return sum(sieve)\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/262": [
            {
                "task_id": "Mbpp/262",
                "solution": "\ndef split_two_parts(lst, L):\n    return (lst[:L], lst[L:])\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/260": [
            {
                "task_id": "Mbpp/260",
                "solution": "\ndef newman_prime(n):\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    ns = [1, 1]\n    for i in range(2, n + 1):\n        ns.append(2 * ns[i - 1] + ns[i - 2])\n    return ns[n]\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/264": [
            {
                "task_id": "Mbpp/264",
                "solution": "\ndef dog_age(human_years):\n    if human_years <= 2:\n        return human_years * 10.5\n    else:\n        return 21 + (human_years - 2) * 4\n\nassert dog_age(12) == 61\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/265": [
            {
                "task_id": "Mbpp/265",
                "solution": "\ndef list_split(lst, n):\n    result = [[] for _ in range(n)]\n    for i, item in enumerate(lst):\n        result[i % n].append(item)\n    return result\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/261": [
            {
                "task_id": "Mbpp/261",
                "solution": "\ndef division_elements(tuple1, tuple2):\n    return tuple(a // b for a, b in zip(tuple1, tuple2))\n",
                "base_status": "pass",
                "plus_status": "fail",
                "base_fail_tests": [],
                "plus_fail_tests": [
                    [
                        [
                            5,
                            3,
                            3,
                            3
                        ],
                        [
                            5,
                            3,
                            3,
                            3
                        ]
                    ]
                ]
            }
        ],
        "Mbpp/268": [
            {
                "task_id": "Mbpp/268",
                "solution": "\ndef find_star_num(n):\n    return 6 * n * (n - 1) + 1\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/269": [
            {
                "task_id": "Mbpp/269",
                "solution": "\ndef ascii_value(char):\n    return ord(char)\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/266": [
            {
                "task_id": "Mbpp/266",
                "solution": "\ndef lateralsurface_cube(side_length):\n    return 4 * side_length * side_length\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/272": [
            {
                "task_id": "Mbpp/272",
                "solution": "\ndef rear_extract(tuples_list):\n    return [t[-1] for t in tuples_list]\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/267": [
            {
                "task_id": "Mbpp/267",
                "solution": "\ndef square_Sum(n):\n    sum_squares = 0\n    count = 0\n    num = 1\n    while count < n:\n        if num % 2 != 0:\n            sum_squares += num ** 2\n            count += 1\n        num += 1\n    return sum_squares\n",
                "base_status": "pass",
                "plus_status": "fail",
                "base_fail_tests": [],
                "plus_fail_tests": [
                    [
                        1000000.0
                    ]
                ]
            }
        ],
        "Mbpp/270": [
            {
                "task_id": "Mbpp/270",
                "solution": "\ndef sum_even_and_even_index(lst):\n    return sum(num for i, num in enumerate(lst) if i % 2 == 0 and num % 2 == 0)\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/277": [
            {
                "task_id": "Mbpp/277",
                "solution": "\ndef dict_filter(d, n):\n    return {k: v for k, v in d.items() if v >= n}\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/276": [
            {
                "task_id": "Mbpp/276",
                "solution": "\nimport math\n\ndef volume_cylinder(radius, height):\n    return math.pi * radius ** 2 * height\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/281": [
            {
                "task_id": "Mbpp/281",
                "solution": "\ndef all_unique(lst):\n    return len(lst) == len(set(lst))\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/274": [
            {
                "task_id": "Mbpp/274",
                "solution": "\ndef even_binomial_Coeff_Sum(n):\n    def binomial_coefficient(n, k):\n        if k > n - k:\n            k = n - k\n        res = 1\n        for i in range(k):\n            res = res * (n - i) // (i + 1)\n        return res\n\n    sum_even_index = 0\n    for k in range(0, n + 1, 2):\n        sum_even_index += binomial_coefficient(n, k)\n    \n    return sum_even_index\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/280": [
            {
                "task_id": "Mbpp/280",
                "solution": "\ndef sequential_search(arr, element):\n    for index, value in enumerate(arr):\n        if value == element:\n            return (True, index)\n    return (False, -1)\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/279": [
            {
                "task_id": "Mbpp/279",
                "solution": "\ndef is_num_decagonal(n):\n    return n * (4 * n - 3)\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/278": [
            {
                "task_id": "Mbpp/278",
                "solution": "\ndef count_first_elements(tup):\n    for i, element in enumerate(tup):\n        if isinstance(element, tuple):\n            return i\n    return len(tup)\n",
                "base_status": "pass",
                "plus_status": "fail",
                "base_fail_tests": [],
                "plus_fail_tests": [
                    [
                        [
                            [
                                [
                                    [
                                        [
                                            [
                                                [
                                                    [
                                                        [
                                                            1,
                                                            2
                                                        ],
                                                        [
                                                            3,
                                                            [
                                                                [
                                                                    [
                                                                        4,
                                                                        5
                                                                    ],
                                                                    6
                                                                ],
                                                                7
                                                            ]
                                                        ]
                                                    ],
                                                    8
                                                ],
                                                9
                                            ],
                                            [
                                                10,
                                                11
                                            ]
                                        ],
                                        12
                                    ],
                                    13
                                ],
                                14
                            ],
                            15
                        ]
                    ]
                ]
            }
        ],
        "Mbpp/282": [
            {
                "task_id": "Mbpp/282",
                "solution": "\ndef sub_list(list1, list2):\n    return [a - b for a, b in zip(list1, list2)]\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/284": [
            {
                "task_id": "Mbpp/284",
                "solution": "\ndef check_element(lst, element):\n    return all(item == element for item in lst)\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/285": [
            {
                "task_id": "Mbpp/285",
                "solution": "\nimport re\n\ndef text_match_two_three(text):\n    pattern = r'ab{2,3}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/292": [
            {
                "task_id": "Mbpp/292",
                "solution": "\ndef find(a, b):\n    return a // b\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/271": [
            {
                "task_id": "Mbpp/271",
                "solution": "\ndef even_Power_Sum(n):\n    return sum((2 * i) ** 5 for i in range(1, n + 1))\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/283": [
            {
                "task_id": "Mbpp/283",
                "solution": "\ndef validate(n):\n    from collections import Counter\n    digit_count = Counter(str(n))\n    for digit, count in digit_count.items():\n        if count > int(digit):\n            return False\n    return True\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/290": [
            {
                "task_id": "Mbpp/290",
                "solution": "\ndef max_length(lists):\n    max_list = max(lists, key=len)\n    return (len(max_list), max_list)\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/293": [
            {
                "task_id": "Mbpp/293",
                "solution": "\nimport math\n\ndef otherside_rightangle(a, b):\n    return math.sqrt(a**2 + b**2)\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/294": [
            {
                "task_id": "Mbpp/294",
                "solution": "\ndef max_val(lst):\n    return max(item for item in lst if isinstance(item, (int, float)))\n",
                "base_status": "pass",
                "plus_status": "fail",
                "base_fail_tests": [],
                "plus_fail_tests": [
                    [
                        [
                            25,
                            {
                                "y": [
                                    26,
                                    27,
                                    28,
                                    28
                                ],
                                "z": {
                                    "a": 29,
                                    "b": 30
                                }
                            }
                        ]
                    ]
                ]
            }
        ],
        "Mbpp/273": [
            {
                "task_id": "Mbpp/273",
                "solution": "\ndef subtract_elements(tuple1, tuple2):\n    return tuple(a - b for a, b in zip(tuple1, tuple2))\n",
                "base_status": "fail",
                "plus_status": "fail",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/301": [
            {
                "task_id": "Mbpp/301",
                "solution": "\ndef dict_depth(d):\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/297": [
            {
                "task_id": "Mbpp/297",
                "solution": "\ndef flatten_list(nested_list):\n    flat_list = []\n    for item in nested_list:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/287": [
            {
                "task_id": "Mbpp/287",
                "solution": "\ndef square_Sum(n):\n    return sum((2 * i) ** 2 for i in range(1, n + 1))\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/286": [
            {
                "task_id": "Mbpp/286",
                "solution": "\ndef max_sub_array_sum_repeated(arr, n, k):\n    def kadane(arr):\n        max_ending_here = max_so_far = arr[0]\n        for x in arr[1:]:\n            max_ending_here = max(x, max_ending_here + x)\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n\n    if k == 1:\n        return kadane(arr)\n    \n    max_kadane = kadane(arr)\n    max_prefix_sum = max_suffix_sum = total_sum = 0\n    current_prefix_sum = current_suffix_sum = 0\n    \n    for i in range(n):\n        total_sum += arr[i]\n        current_prefix_sum += arr[i]\n        max_prefix_sum = max(max_prefix_sum, current_prefix_sum)\n    \n    for i in range(n-1, -1, -1):\n        current_suffix_sum += arr[i]\n        max_suffix_sum = max(max_suffix_sum, current_suffix_sum)\n    \n    if total_sum > 0:\n        return max(max_kadane, max_prefix_sum + max_suffix_sum + (k-2) * total_sum)\n    else:\n        return max(max_kadane, max_prefix_sum + max_suffix_sum)\n",
                "base_status": "fail",
                "plus_status": "pass",
                "base_fail_tests": [
                    [
                        [
                            -1,
                            10,
                            20
                        ],
                        3,
                        2
                    ]
                ],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/299": [
            {
                "task_id": "Mbpp/299",
                "solution": "\ndef max_aggregate(scores):\n    aggregate = {}\n    for name, score in scores:\n        if name in aggregate:\n            aggregate[name] += score\n        else:\n            aggregate[name] = score\n    max_name = max(aggregate, key=aggregate.get)\n    return (max_name, aggregate[max_name])\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/305": [
            {
                "task_id": "Mbpp/305",
                "solution": "\ndef start_withp(words):\n    for sentence in words:\n        for word in sentence.split():\n            if word.startswith('P'):\n                if 'first' not in locals():\n                    first = word\n                else:\n                    return (first, word)\n    return ()\n",
                "base_status": "pass",
                "plus_status": "fail",
                "base_fail_tests": [],
                "plus_fail_tests": [
                    [
                        [
                            "Python Programming",
                            "Java Programming",
                            "Perl Programming",
                            "Ruby Programming",
                            "PHP Programming",
                            "C Programming"
                        ]
                    ]
                ]
            }
        ],
        "Mbpp/308": [
            {
                "task_id": "Mbpp/308",
                "solution": "\ndef large_product(list1, list2, n):\n    products = []\n    for i in list1:\n        for j in list2:\n            products.append(i * j)\n    products.sort(reverse=True)\n    return products[:n]\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/300": [
            {
                "task_id": "Mbpp/300",
                "solution": "\nimport math\n\ndef count_binary_seq(n):\n    def binomial_coeff(n, k):\n        if k > n:\n            return 0\n        if k == 0 or k == n:\n            return 1\n        k = min(k, n - k)\n        c = 1\n        for i in range(k):\n            c = c * (n - i) // (i + 1)\n        return c\n\n    total_count = 0\n    for k in range(n + 1):\n        total_count += binomial_coeff(n, k) ** 2\n    return total_count\n\nassert math.isclose(count_binary_seq(1), 2.0, rel_tol=0.001)\n",
                "base_status": "pass",
                "plus_status": "fail",
                "base_fail_tests": [],
                "plus_fail_tests": [
                    [
                        20
                    ]
                ]
            }
        ],
        "Mbpp/309": [
            {
                "task_id": "Mbpp/309",
                "solution": "\ndef maximum(a, b):\n    if a > b:\n        return a\n    else:\n        return b\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/310": [
            {
                "task_id": "Mbpp/310",
                "solution": "\ndef string_to_tuple(s):\n    return tuple(s)\n",
                "base_status": "fail",
                "plus_status": "fail",
                "base_fail_tests": [],
                "plus_fail_tests": [
                    [
                        ""
                    ]
                ]
            }
        ],
        "Mbpp/311": [
            {
                "task_id": "Mbpp/311",
                "solution": "\ndef set_left_most_unset_bit(n):\n    if n == 0:\n        return 1\n    m = 1\n    while n & m:\n        m <<= 1\n    return n | m\n",
                "base_status": "fail",
                "plus_status": "fail",
                "base_fail_tests": [],
                "plus_fail_tests": [
                    [
                        125
                    ]
                ]
            }
        ],
        "Mbpp/388": [
            {
                "task_id": "Mbpp/388",
                "solution": "\ndef highest_Power_of_2(n):\n    if n < 1:\n        return 0\n    power = 1\n    while power * 2 <= n:\n        power *= 2\n    return power\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/296": [
            {
                "task_id": "Mbpp/296",
                "solution": "\ndef get_Inv_Count(arr):\n    def merge_sort(arr, temp_arr, left, right):\n        inv_count = 0\n        if left < right:\n            mid = (left + right) // 2\n            inv_count += merge_sort(arr, temp_arr, left, mid)\n            inv_count += merge_sort(arr, temp_arr, mid + 1, right)\n            inv_count += merge(arr, temp_arr, left, mid, right)\n        return inv_count\n\n    def merge(arr, temp_arr, left, mid, right):\n        i = left\n        j = mid + 1\n        k = left\n        inv_count = 0\n\n        while i <= mid and j <= right:\n            if arr[i] <= arr[j]:\n                temp_arr[k] = arr[i]\n                i += 1\n            else:\n                temp_arr[k] = arr[j]\n                inv_count += (mid - i + 1)\n                j += 1\n            k += 1\n\n        while i <= mid:\n            temp_arr[k] = arr[i]\n            i += 1\n            k += 1\n\n        while j <= right:\n            temp_arr[k] = arr[j]\n            j += 1\n            k += 1\n\n        for i in range(left, right + 1):\n            arr[i] = temp_arr[i]\n\n        return inv_count\n\n    return merge_sort(arr, [0] * len(arr), 0, len(arr) - 1)\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/306": [
            {
                "task_id": "Mbpp/306",
                "solution": "\ndef max_sum_increasing_subseq(arr, n, i, k):\n    if k <= i or i >= n or k >= n:\n        return 0\n\n    dp = [0] * n\n    dp[0] = arr[0]\n\n    for j in range(1, i + 1):\n        max_sum = 0\n        for m in range(j):\n            if arr[j] > arr[m]:\n                max_sum = max(max_sum, dp[m])\n        dp[j] = max_sum + arr[j]\n\n    max_sum_i = max(dp[:i + 1])\n    if arr[k] > arr[i]:\n        return max_sum_i + arr[k]\n    else:\n        return max_sum_i\n\n# Example usage\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5], 7, 4, 6) == 11\n",
                "base_status": "fail",
                "plus_status": "fail",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/312": [
            {
                "task_id": "Mbpp/312",
                "solution": "\nimport math\n\ndef volume_cone(radius, height):\n    return (1/3) * math.pi * radius**2 * height\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/389": [
            {
                "task_id": "Mbpp/389",
                "solution": "\ndef find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = 2, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/394": [
            {
                "task_id": "Mbpp/394",
                "solution": "\ndef check_distinct(tup):\n    return len(tup) == len(set(tup))\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/390": [
            {
                "task_id": "Mbpp/390",
                "solution": "\ndef add_string(lst, fmt):\n    return [fmt.format(i) for i in lst]\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/392": [
            {
                "task_id": "Mbpp/392",
                "solution": "\ndef get_max_sum(n, memo={}):\n    if n in memo:\n        return memo[n]\n    if n == 0:\n        return 0\n    max_sum = max(get_max_sum(n // 2, memo) + get_max_sum(n // 3, memo) + get_max_sum(n // 4, memo) + get_max_sum(n // 5, memo), n)\n    memo[n] = max_sum\n    return max_sum\n\nassert get_max_sum(60) == 106\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/405": [
            {
                "task_id": "Mbpp/405",
                "solution": "\ndef check_tuplex(tuplex, element):\n    return element in tuplex\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/404": [
            {
                "task_id": "Mbpp/404",
                "solution": "\ndef minimum(a, b):\n    return a if a < b else b\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/397": [
            {
                "task_id": "Mbpp/397",
                "solution": "\ndef median_numbers(a, b, c):\n    return sorted([a, b, c])[1]\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/406": [
            {
                "task_id": "Mbpp/406",
                "solution": "\ndef find_Parity(n):\n    return n % 2 != 0\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/395": [
            {
                "task_id": "Mbpp/395",
                "solution": "\ndef first_non_repeating_character(s):\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in s:\n        if char_count[char] == 1:\n            return char\n    return None\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/391": [
            {
                "task_id": "Mbpp/391",
                "solution": "\ndef convert_list_dictionary(list1, list2, list3):\n    return [{list1[i]: {list2[i]: list3[i]}} for i in range(len(list1))]\n",
                "base_status": "pass",
                "plus_status": "fail",
                "base_fail_tests": [],
                "plus_fail_tests": [
                    [
                        [
                            "A1",
                            "A2",
                            "A3",
                            "A4"
                        ],
                        [
                            10,
                            20,
                            30,
                            40
                        ],
                        [
                            [
                                "a",
                                "b"
                            ],
                            [
                                "c",
                                "d",
                                "e"
                            ],
                            [
                                1,
                                2,
                                3,
                                4
                            ],
                            {
                                "x": 1,
                                "y": 2
                            }
                        ]
                    ]
                ]
            }
        ],
        "Mbpp/410": [
            {
                "task_id": "Mbpp/410",
                "solution": "\ndef min_val(lst):\n    numeric_values = [x for x in lst if isinstance(x, (int, float))]\n    return min(numeric_values) if numeric_values else None\n",
                "base_status": "pass",
                "plus_status": "fail",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/413": [
            {
                "task_id": "Mbpp/413",
                "solution": "\ndef extract_nth_element(tuples_list, n):\n    return [t[n] for t in tuples_list]\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/412": [
            {
                "task_id": "Mbpp/412",
                "solution": "\ndef remove_odd(numbers):\n    return [num for num in numbers if num % 2 == 0]\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/398": [
            {
                "task_id": "Mbpp/398",
                "solution": "\ndef sum_of_digits(numbers):\n    return sum(sum(int(digit) for digit in str(number)) for number in numbers)\n",
                "base_status": "fail",
                "plus_status": "fail",
                "base_fail_tests": [
                    [
                        [
                            10,
                            2,
                            56
                        ]
                    ]
                ],
                "plus_fail_tests": [
                    [
                        [
                            7
                        ]
                    ]
                ]
            }
        ],
        "Mbpp/255": [
            {
                "task_id": "Mbpp/255",
                "solution": "\nfrom itertools import combinations_with_replacement\n\ndef combinations_colors(lst, n):\n    return list(combinations_with_replacement(lst, n))\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/409": [
            {
                "task_id": "Mbpp/409",
                "solution": "\ndef min_product_tuple(lst):\n    return min(a * b for a, b in lst)\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/414": [
            {
                "task_id": "Mbpp/414",
                "solution": "\ndef overlapping(seq1, seq2):\n    return any(item in seq2 for item in seq1)\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/419": [
            {
                "task_id": "Mbpp/419",
                "solution": "\ndef round_and_sum(numbers):\n    rounded_numbers = [round(num) for num in numbers]\n    total_sum = sum(rounded_numbers)\n    result = total_sum * len(numbers)\n    return result\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/418": [
            {
                "task_id": "Mbpp/418",
                "solution": "\ndef Find_Max(lst):\n    if not lst:\n        return None\n    max_length = -1\n    max_element = None\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n    return max_element\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/415": [
            {
                "task_id": "Mbpp/415",
                "solution": "\ndef max_Product(arr):\n    if len(arr) < 2:\n        return None\n    \n    max1 = max2 = float('-inf')\n    \n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n    \n    return (max1, max2)\n\n# Example usage:\n# assert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n",
                "base_status": "fail",
                "plus_status": "fail",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/420": [
            {
                "task_id": "Mbpp/420",
                "solution": "\ndef cube_Sum(n):\n    return sum((2 * i) ** 3 for i in range(1, n + 1))\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/425": [
            {
                "task_id": "Mbpp/425",
                "solution": "\ndef count_element_in_list(lst, element):\n    count = 0\n    for sublist in lst:\n        if element in sublist:\n            count += 1\n    return count\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/426": [
            {
                "task_id": "Mbpp/426",
                "solution": "\ndef filter_oddnumbers(numbers):\n    return [num for num in numbers if num % 2 != 0]\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/427": [
            {
                "task_id": "Mbpp/427",
                "solution": "\ndef change_date_format(date_str):\n    parts = date_str.split('-')\n    return f\"{parts[2]}-{parts[1]}-{parts[0]}\"\n",
                "base_status": "pass",
                "plus_status": "fail",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/424": [
            {
                "task_id": "Mbpp/424",
                "solution": "\ndef extract_rear(tup):\n    return [s[-1] for s in tup]\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/422": [
            {
                "task_id": "Mbpp/422",
                "solution": "\ndef find_Average_Of_Cube(n):\n    total_sum = sum(i**3 for i in range(1, n+1))\n    return total_sum / n\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/429": [
            {
                "task_id": "Mbpp/429",
                "solution": "\ndef and_tuples(tuple1, tuple2):\n    return tuple(a & b for a, b in zip(tuple1, tuple2))\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/432": [
            {
                "task_id": "Mbpp/432",
                "solution": "\ndef median_trapezium(a, b, h):\n    return (a + b) / 2\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/430": [
            {
                "task_id": "Mbpp/430",
                "solution": "\ndef parabola_directrix(a, b, c):\n    return c - (b**2 + 1) / (4 * a)\n",
                "base_status": "fail",
                "plus_status": "fail",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/428": [
            {
                "task_id": "Mbpp/428",
                "solution": "\ndef shell_sort(arr):\n    n = arr.length\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n\n    return arr\n",
                "base_status": "fail",
                "plus_status": "fail",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/421": [
            {
                "task_id": "Mbpp/421",
                "solution": "\ndef concatenate_tuple(tup, delimiter='-'):\n    return delimiter.join(map(str, tup))\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/433": [
            {
                "task_id": "Mbpp/433",
                "solution": "\ndef check_greater(arr, num):\n    for element in arr:\n        if num <= element:\n            return False\n    return True\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/436": [
            {
                "task_id": "Mbpp/436",
                "solution": "\ndef neg_nos(lst):\n    return [num for num in lst if num < 0]\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/437": [
            {
                "task_id": "Mbpp/437",
                "solution": "\ndef remove_odd(s):\n    return ''.join([char for i, char in enumerate(s) if i % 2 != 0])\n\n# Test case\nassert remove_odd(\"\") == \"yhn\"\n",
                "base_status": "fail",
                "plus_status": "fail",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/439": [
            {
                "task_id": "Mbpp/439",
                "solution": "\ndef multiple_to_single(numbers):\n    return int(''.join(map(str, numbers)))\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/435": [
            {
                "task_id": "Mbpp/435",
                "solution": "\ndef last_Digit(number):\n    return abs(number) % 10\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/440": [
            {
                "task_id": "Mbpp/440",
                "solution": "\nimport re\n\ndef find_adverb_position(sentence):\n    match = re.search(r'\\b\\w+ly\\b', sentence)\n    if match:\n        start = match.start()\n        end = match.end()\n        adverb = match.group()\n        return (start, end, adverb)\n    return None\n",
                "base_status": "pass",
                "plus_status": "fail",
                "base_fail_tests": [],
                "plus_fail_tests": [
                    [
                        "dark"
                    ]
                ]
            }
        ],
        "Mbpp/447": [
            {
                "task_id": "Mbpp/447",
                "solution": "\ndef cube_nums(nums):\n    return [x**3 for x in nums]\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/441": [
            {
                "task_id": "Mbpp/441",
                "solution": "\ndef surfacearea_cube(size):\n    return 6 * (size ** 2)\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/445": [
            {
                "task_id": "Mbpp/445",
                "solution": "\ndef index_multiplication(tuple1, tuple2):\n    return tuple((a * c, b * d) for (a, b), (c, d) in zip(tuple1, tuple2))\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/450": [
            {
                "task_id": "Mbpp/450",
                "solution": "\ndef extract_string(strings, size):\n    return [s for s in strings if len(s) == size]\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/448": [
            {
                "task_id": "Mbpp/448",
                "solution": "\ndef cal_sum(n):\n    if n < 0:\n        return 0\n    perrin = [3, 0, 2]\n    for i in range(3, n + 1):\n        perrin.append(perrin[i - 2] + perrin[i - 3])\n    return sum(perrin[:n + 1])\n",
                "base_status": "pass",
                "plus_status": "fail",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/446": [
            {
                "task_id": "Mbpp/446",
                "solution": "\ndef count_Occurrence(tup, lst):\n    return sum(tup.count(item) for item in lst)\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/451": [
            {
                "task_id": "Mbpp/451",
                "solution": "\ndef remove_whitespaces(s):\n    return s.replace(' ', '')\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/454": [
            {
                "task_id": "Mbpp/454",
                "solution": "\nimport re\n\ndef text_match_wordz(text):\n    pattern = r'\\b\\w*z\\w*\\b'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/456": [
            {
                "task_id": "Mbpp/456",
                "solution": "\ndef reverse_string_list(strings):\n    return [s[::-1] for s in strings]\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/458": [
            {
                "task_id": "Mbpp/458",
                "solution": "\ndef rectangle_area(length, width):\n    return length * width\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/457": [
            {
                "task_id": "Mbpp/457",
                "solution": "\ndef Find_Min(lst):\n    if not lst:\n        return []\n    min_length = float('inf')\n    min_list = []\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_list = sublist\n    return min_list\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/459": [
            {
                "task_id": "Mbpp/459",
                "solution": "\ndef remove_uppercase(s):\n    result = []\n    temp = []\n    for char in s:\n        if char.isupper():\n            if temp:\n                result.extend(temp)\n                temp = []\n        else:\n            temp.append(char)\n    if temp:\n        result.extend(temp)\n    return ''.join(result)\n\n# Test\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n",
                "base_status": "pass",
                "plus_status": "fail",
                "base_fail_tests": [],
                "plus_fail_tests": [
                    [
                        "ABCDEFG"
                    ]
                ]
            }
        ],
        "Mbpp/455": [
            {
                "task_id": "Mbpp/455",
                "solution": "\ndef check_monthnumb_number(month):\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        return False\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/453": [
            {
                "task_id": "Mbpp/453",
                "solution": "\ndef sumofFactors(n):\n    sum_even_factors = 0\n    for i in range(1, n + 1):\n        if n % i == 0 and i % 2 == 0:\n            sum_even_factors += i\n    return sum_even_factors\n\n# Test case\nassert sumofFactors(18) == 26\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/465": [
            {
                "task_id": "Mbpp/465",
                "solution": "\ndef drop_empty(d):\n    return {k: v for k, v in d.items() if v is not None}\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/462": [
            {
                "task_id": "Mbpp/462",
                "solution": "\nfrom itertools import combinations\n\ndef combinations_list(elements):\n    result = [[]]\n    for i in range(1, len(elements) + 1):\n        for combo in combinations(elements, i):\n            result.append(list(combo))\n    return result\n",
                "base_status": "fail",
                "plus_status": "fail",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/470": [
            {
                "task_id": "Mbpp/470",
                "solution": "\ndef add_pairwise(t):\n    return tuple(t[i] + t[i+1] for i in range(len(t) - 1))\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/460": [
            {
                "task_id": "Mbpp/460",
                "solution": "\ndef Extract(lst):\n    return [sublist[0] for sublist in lst]\n\n# Test the function\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/471": [
            {
                "task_id": "Mbpp/471",
                "solution": "\ndef find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product\n\n# Test case\nassert find_remainder([100, 10, 5, 25, 35, 14], 11) == 9\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/468": [
            {
                "task_id": "Mbpp/468",
                "solution": "\ndef max_product(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n\n    # Initialize the maximum product for each element\n    max_prod = [0] * n\n\n    # Initialize the result\n    result = 0\n\n    # Fill the max_prod array\n    for i in range(n):\n        max_prod[i] = arr[i]\n        for j in range(i):\n            if arr[i] > arr[j] and max_prod[i] < max_prod[j] * arr[i]:\n                max_prod[i] = max_prod[j] * arr[i]\n        result = max(result, max_prod[i])\n\n    return result\n",
                "base_status": "fail",
                "plus_status": "fail",
                "base_fail_tests": [],
                "plus_fail_tests": [
                    [
                        [
                            3,
                            -5,
                            2,
                            6,
                            -1,
                            4,
                            -3
                        ]
                    ]
                ]
            }
        ],
        "Mbpp/472": [
            {
                "task_id": "Mbpp/472",
                "solution": "\ndef check_Consecutive(lst):\n    if len(lst) < 2:\n        return True\n    lst_sorted = sorted(lst)\n    for i in range(1, len(lst_sorted)):\n        if lst_sorted[i] != lst_sorted[i - 1] + 1:\n            return False\n    return True\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/463": [
            {
                "task_id": "Mbpp/463",
                "solution": "\ndef max_subarray_product(nums):\n    if not nums:\n        return 0\n\n    max_product = min_product = result = nums[0]\n\n    for num in nums[1:]:\n        if num < 0:\n            max_product, min_product = min_product, max_product\n\n        max_product = max(num, max_product * num)\n        min_product = min(num, min_product * num)\n\n        result = max(result, max_product)\n\n    return result\n\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/475": [
            {
                "task_id": "Mbpp/475",
                "solution": "\ndef sort_counter(d):\n    return sorted(d.items(), key=lambda item: item[1], reverse=True)\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/474": [
            {
                "task_id": "Mbpp/474",
                "solution": "\ndef replace_char(s, old_char, new_char):\n    return s.replace(old_char, new_char)\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/473": [
            {
                "task_id": "Mbpp/473",
                "solution": "\ndef tuple_intersection(list1, list2):\n    set1 = {tuple(sorted(t)) for t in list1}\n    set2 = {tuple(sorted(t)) for t in list2}\n    return set1 & set2\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/477": [
            {
                "task_id": "Mbpp/477",
                "solution": "\ndef is_lower(s):\n    return s.lower()\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/476": [
            {
                "task_id": "Mbpp/476",
                "solution": "\ndef big_sum(arr):\n    if not arr:\n        return 0\n    return min(arr) + max(arr)\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/554": [
            {
                "task_id": "Mbpp/554",
                "solution": "\ndef Split(lst):\n    return [x for x in lst if x % 2 != 0]\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/478": [
            {
                "task_id": "Mbpp/478",
                "solution": "\ndef remove_lowercase(s):\n    result = []\n    temp = []\n    for char in s:\n        if char.islower():\n            temp.append(char)\n        else:\n            if temp:\n                temp = []\n            result.append(char)\n    return ''.join(result)\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/556": [
            {
                "task_id": "Mbpp/556",
                "solution": "\ndef find_Odd_Pair(arr, n):\n    odd_count = 0\n    even_count = 0\n    \n    for num in arr:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    return odd_count * even_count\n",
                "base_status": "pass",
                "plus_status": "fail",
                "base_fail_tests": [],
                "plus_fail_tests": [
                    [
                        [
                            2,
                            4,
                            6,
                            8
                        ],
                        -2
                    ]
                ]
            }
        ],
        "Mbpp/557": [
            {
                "task_id": "Mbpp/557",
                "solution": "\ndef toggle_string(s):\n    return s.swapcase()\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/560": [
            {
                "task_id": "Mbpp/560",
                "solution": "\ndef union_elements(tuple1, tuple2):\n    return tuple(sorted(set(tuple1).union(set(tuple2))))\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/479": [
            {
                "task_id": "Mbpp/479",
                "solution": "\ndef first_Digit(number):\n    number = abs(number)  # Ensure the number is positive\n    while number >= 10:\n        number //= 10\n    return number\n\n# Test case\nassert first_Digit(123) == 1\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/562": [
            {
                "task_id": "Mbpp/562",
                "solution": "\ndef Find_Max_Length(lst):\n    return max(len(sublist) for sublist in lst)\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/563": [
            {
                "task_id": "Mbpp/563",
                "solution": "\nimport re\n\ndef extract_values(s):\n    return re.findall(r'\"(.*?)\"', s)\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/558": [
            {
                "task_id": "Mbpp/558",
                "solution": "\ndef digit_distance_nums(num1, num2):\n    str_num1, str_num2 = str(num1), str(num2)\n    max_len = max(len(str_num1), len(str_num2))\n    str_num1 = str_num1.zfill(max_len)\n    str_num2 = str_num2.zfill(max_len)\n    \n    total_distance = 0\n    for digit1, digit2 in zip(str_num1, str_num2):\n        total_distance += abs(int(digit1) - int(digit2))\n    \n    return total_distance\n",
                "base_status": "pass",
                "plus_status": "fail",
                "base_fail_tests": [],
                "plus_fail_tests": [
                    [
                        123456789,
                        987654321
                    ]
                ]
            }
        ],
        "Mbpp/555": [
            {
                "task_id": "Mbpp/555",
                "solution": "\ndef difference(n):\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    sum_of_numbers = sum(i for i in range(1, n+1))\n    return sum_of_cubes - sum_of_numbers\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/565": [
            {
                "task_id": "Mbpp/565",
                "solution": "\ndef split(string):\n    return list(string)\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/559": [
            {
                "task_id": "Mbpp/559",
                "solution": "\ndef max_sub_array_sum(arr, n):\n    max_so_far = float('-inf')\n    max_ending_here = 0\n\n    for i in range(n):\n        max_ending_here = max_ending_here + arr[i]\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n        if max_ending_here < 0:\n            max_ending_here = 0\n\n    return max_so_far\n",
                "base_status": "pass",
                "plus_status": "fail",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/567": [
            {
                "task_id": "Mbpp/567",
                "solution": "\ndef issort_list(lst):\n    return lst == sorted(lst)\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/568": [
            {
                "task_id": "Mbpp/568",
                "solution": "\ndef empty_list(N):\n    return [{} for _ in range(N)]\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/566": [
            {
                "task_id": "Mbpp/566",
                "solution": "\ndef sum_digits(n):\n    return sum(int(digit) for digit in str(n))\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/569": [
            {
                "task_id": "Mbpp/569",
                "solution": "\ndef sort_sublists(lst):\n    return [sorted(sublist) for sublist in lst]\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/573": [
            {
                "task_id": "Mbpp/573",
                "solution": "\ndef unique_product(numbers):\n    unique_numbers = set(numbers)\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/572": [
            {
                "task_id": "Mbpp/572",
                "solution": "\ndef two_unique_nums(nums):\n    from collections import Counter\n    count = Counter(nums)\n    return [num for num in nums if count[num] == 1]\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/564": [
            {
                "task_id": "Mbpp/564",
                "solution": "\ndef count_Pairs(lst, n):\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if lst[i] != lst[j]:\n                count += 1\n    return count\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/576": [
            {
                "task_id": "Mbpp/576",
                "solution": "\ndef is_Sub_Array(main_list, sub_list):\n    sub_len = len(sub_list)\n    for i in range(len(main_list) - sub_len + 1):\n        if main_list[i:i + sub_len] == sub_list:\n            return True\n    return False\n\nassert is_Sub_Array([1,4,3,5],[1,2]) == False\n",
                "base_status": "pass",
                "plus_status": "fail",
                "base_fail_tests": [],
                "plus_fail_tests": [
                    [
                        [
                            1,
                            2,
                            3
                        ],
                        []
                    ]
                ]
            }
        ],
        "Mbpp/577": [
            {
                "task_id": "Mbpp/577",
                "solution": "\ndef last_Digit_Factorial(n):\n    if n == 0:\n        return 1\n    factorial = 1\n    for i in range(1, n + 1):\n        factorial *= i\n    return factorial % 10\n",
                "base_status": "pass",
                "plus_status": "fail",
                "base_fail_tests": [],
                "plus_fail_tests": [
                    [
                        1000
                    ]
                ]
            }
        ],
        "Mbpp/579": [
            {
                "task_id": "Mbpp/579",
                "solution": "\ndef find_dissimilar(tuple1, tuple2):\n    set1 = set(tuple1)\n    set2 = set(tuple2)\n    dissimilar_elements = set1.symmetric_difference(set2)\n    return tuple(dissimilar_elements)\n",
                "base_status": "pass",
                "plus_status": "fail",
                "base_fail_tests": [],
                "plus_fail_tests": [
                    [
                        [
                            1,
                            1,
                            2,
                            2,
                            3,
                            3,
                            4,
                            4,
                            5,
                            5
                        ],
                        [
                            2,
                            2,
                            4,
                            4,
                            6,
                            6,
                            8,
                            8,
                            10,
                            10
                        ]
                    ]
                ]
            }
        ],
        "Mbpp/580": [
            {
                "task_id": "Mbpp/580",
                "solution": "\ndef extract_even(data):\n    if isinstance(data, tuple):\n        return tuple(extract_even(item) for item in data if isinstance(item, tuple) or item % 2 == 0)\n    return data\n\n# Test case\nassert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/578": [
            {
                "task_id": "Mbpp/578",
                "solution": "\ndef interleave_lists(list1, list2, list3):\n    interleaved_list = []\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    return interleaved_list\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/587": [
            {
                "task_id": "Mbpp/587",
                "solution": "\ndef list_tuple(lst):\n    return tuple(lst)\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/588": [
            {
                "task_id": "Mbpp/588",
                "solution": "\ndef big_diff(lst):\n    return max(lst) - min(lst)\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/583": [
            {
                "task_id": "Mbpp/583",
                "solution": "\ndef catalan_number(n):\n    if n == 0 or n == 1:\n        return 1\n    catalan = [0] * (n + 1)\n    catalan[0] = 1\n    catalan[1] = 1\n    for i in range(2, n + 1):\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i - j - 1]\n    return catalan[n]\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/581": [
            {
                "task_id": "Mbpp/581",
                "solution": "\nimport math\n\ndef surface_Area(base_edge, height):\n    base_area = base_edge ** 2\n    slant_height = math.sqrt((base_edge / 2) ** 2 + height ** 2)\n    lateral_area = 2 * base_edge * slant_height\n    return base_area + lateral_area\n\nassert surface_Area(3, 4) == 33\n",
                "base_status": "fail",
                "plus_status": "fail",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/586": [
            {
                "task_id": "Mbpp/586",
                "solution": "\ndef split_Arr(arr, n):\n    return arr[n:] + arr[:n]\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/589": [
            {
                "task_id": "Mbpp/589",
                "solution": "\nimport math\n\ndef perfect_squares(start, end):\n    result = []\n    for num in range(start, end + 1):\n        if math.isqrt(num) ** 2 == num:\n            result.append(num)\n    return result\n",
                "base_status": "pass",
                "plus_status": "fail",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/591": [
            {
                "task_id": "Mbpp/591",
                "solution": "\ndef swap_List(lst):\n    if len(lst) > 1:\n        lst[0], lst[-1] = lst[-1, lst[0]\n    return lst\n",
                "base_status": "fail",
                "plus_status": "fail",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/585": [
            {
                "task_id": "Mbpp/585",
                "solution": "\ndef expensive_items(items, n):\n    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/593": [
            {
                "task_id": "Mbpp/593",
                "solution": "\ndef removezero_ip(ip):\n    return '.'.join(str(int(part)) for part in ip.split('.'))\n",
                "base_status": "pass",
                "plus_status": "fail",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/596": [
            {
                "task_id": "Mbpp/596",
                "solution": "\nimport sys\n\ndef tuple_size(t):\n    return sys.getsizeof(t)\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/590": [
            {
                "task_id": "Mbpp/590",
                "solution": "\nimport cmath\nimport math\n\ndef polar_rect(r, theta):\n    # Convert polar to rectangular using math module\n    x = r * math.cos(theta)\n    y = r * math.sin(theta)\n    rect_math = (x, y)\n    \n    # Convert polar to rectangular using cmath module\n    rect_cmath = cmath.rect(r, theta)\n    \n    return rect_math, rect_cmath\n\n# Example usage\n# assert polar_rect(3, 4) == ((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))\n",
                "base_status": "fail",
                "plus_status": "fail",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/598": [
            {
                "task_id": "Mbpp/598",
                "solution": "\ndef armstrong_number(n):\n    num_str = str(n)\n    num_len = len(num_str)\n    sum_of_powers = sum(int(digit) ** num_len for digit in num_str)\n    return sum_of_powers == n\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/600": [
            {
                "task_id": "Mbpp/600",
                "solution": "\ndef is_Even(number):\n    return number % 2 == 0\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/599": [
            {
                "task_id": "Mbpp/599",
                "solution": "\ndef sum_average(n):\n    total_sum = n * (n + 1) // 2\n    average = total_sum / n\n    return total_sum, average\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/594": [
            {
                "task_id": "Mbpp/594",
                "solution": "\ndef diff_even_odd(lst):\n    first_even = next((x for x in lst if x % 2 == 0), None)\n    first_odd = next((x for x in lst if x % 2 != 0), None)\n    if first_even is not None and first_odd is not None:\n        return abs(first_even - first_odd)\n    return None\n",
                "base_status": "pass",
                "plus_status": "fail",
                "base_fail_tests": [],
                "plus_fail_tests": [
                    [
                        [
                            1,
                            3,
                            5,
                            2,
                            4,
                            6,
                            8,
                            7,
                            9,
                            11,
                            13,
                            15,
                            16,
                            18,
                            20
                        ]
                    ]
                ]
            }
        ],
        "Mbpp/602": [
            {
                "task_id": "Mbpp/602",
                "solution": "\ndef first_repeated_char(s):\n    seen = set()\n    for char in s:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/597": [
            {
                "task_id": "Mbpp/597",
                "solution": "\ndef find_kth(arr1, arr2, k):\n    def kth(arr1, arr2, k):\n        if not arr1:\n            return arr2[k]\n        if not arr2:\n            return arr1[k]\n        mid1, mid2 = len(arr1) // 2, len(arr2) // 2\n        if mid1 + mid2 < k:\n            if arr1[mid1] > arr2[mid2]:\n                return kth(arr1, arr2[mid2 + 1:], k - mid2 - 1)\n            else:\n                return kth(arr1[mid1 + 1:], arr2, k - mid1 - 1)\n        else:\n            if arr1[mid1] > arr2[mid2]:\n                return kth(arr1[:mid1], arr2, k)\n            else:\n                return kth(arr1, arr2[:mid2], k)\n    \n    return kth(arr1, arr2, k - 1)\n",
                "base_status": "pass",
                "plus_status": "fail",
                "base_fail_tests": [],
                "plus_fail_tests": [
                    [
                        [
                            1,
                            2,
                            3
                        ],
                        [
                            true,
                            true,
                            false
                        ],
                        3
                    ]
                ]
            }
        ],
        "Mbpp/607": [
            {
                "task_id": "Mbpp/607",
                "solution": "\nimport re\n\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    return None\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/604": [
            {
                "task_id": "Mbpp/604",
                "solution": "\ndef reverse_words(s):\n    return ' '.join(s.split()[::-1])\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/606": [
            {
                "task_id": "Mbpp/606",
                "solution": "\nimport math\n\ndef radian_degree(degree):\n    return degree * (math.pi / 180)\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/603": [
            {
                "task_id": "Mbpp/603",
                "solution": "\ndef get_ludic(n):\n    if n < 1:\n        return []\n    \n    ludic_numbers = list(range(1, n + 1))\n    i = 1\n    \n    while i < len(ludic_numbers):\n        step = ludic_numbers[i]\n        ludic_numbers = [num for j, num in enumerate(ludic_numbers) if (j + 1) % step != 0 or j == 0]\n        i += 1\n    \n    return ludic_numbers\n",
                "base_status": "fail",
                "plus_status": "fail",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/592": [
            {
                "task_id": "Mbpp/592",
                "solution": "\ndef sum_Of_product(n):\n    def binomial_coefficient(n, k):\n        if k == 0 or k == n:\n            return 1\n        return binomial_coefficient(n-1, k-1) + binomial_coefficient(n-1, k)\n    \n    total_sum = 0\n    for k in range(n):\n        total_sum += binomial_coefficient(n, k) * binomial_coefficient(n, k+1)\n    \n    return total_sum\n\n# Test the function\nassert sum_Of_product(3) == 15\n",
                "base_status": "pass",
                "plus_status": "fail",
                "base_fail_tests": [],
                "plus_fail_tests": [
                    [
                        10
                    ]
                ]
            }
        ],
        "Mbpp/605": [
            {
                "task_id": "Mbpp/605",
                "solution": "\ndef prime_num(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/610": [
            {
                "task_id": "Mbpp/610",
                "solution": "\ndef remove_kth_element(lst, k):\n    if k < 0 or k >= len(lst):\n        return lst\n    return lst[:k] + lst[k+1:]\n",
                "base_status": "fail",
                "plus_status": "fail",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/611": [
            {
                "task_id": "Mbpp/611",
                "solution": "\ndef max_of_nth(matrix, n):\n    return max(row[n] for row in matrix)\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/608": [
            {
                "task_id": "Mbpp/608",
                "solution": "\ndef bell_Number(n):\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n\n    return bell[n][0]\n\nassert bell_Number(2) == 2\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/612": [
            {
                "task_id": "Mbpp/612",
                "solution": "\ndef merge(list_of_lists):\n    first_elements = [sublist[0] for sublist in list_of_lists]\n    second_elements = [sublist[1] for sublist in list_of_lists]\n    return [first_elements, second_elements]\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/615": [
            {
                "task_id": "Mbpp/615",
                "solution": "\ndef average_tuple(tuples):\n    return [sum(t) / len(t) for t in tuples]\n",
                "base_status": "fail",
                "plus_status": "fail",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/614": [
            {
                "task_id": "Mbpp/614",
                "solution": "\ndef cummulative_sum(tuple_list):\n    return sum(sum(t) for t in tuple_list)\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/618": [
            {
                "task_id": "Mbpp/618",
                "solution": "\ndef div_list(list1, list2):\n    return [a / b for a, b in zip(list1, list2)]\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/616": [
            {
                "task_id": "Mbpp/616",
                "solution": "\ndef tuple_modulo(tuple1, tuple2):\n    return tuple(a % b for a, b in zip(tuple1, tuple2))\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/619": [
            {
                "task_id": "Mbpp/619",
                "solution": "\ndef move_num(s):\n    letters = []\n    numbers = []\n    for char in s:\n        if char.isdigit():\n            numbers.append(char)\n        else:\n            letters.append(char)\n    return ''.join(letters) + ''.join(numbers)\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/620": [
            {
                "task_id": "Mbpp/620",
                "solution": "\ndef largest_subset(nums):\n    nums.sort()\n    dp = [1] * len(nums)\n    for i in range(len(nums)):\n        for j in range(i):\n            if nums[i] % nums[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)\n",
                "base_status": "pass",
                "plus_status": "fail",
                "base_fail_tests": [],
                "plus_fail_tests": [
                    [
                        [
                            2,
                            99,
                            5,
                            7,
                            11,
                            17,
                            19,
                            23,
                            29,
                            31,
                            37,
                            43,
                            47,
                            53,
                            59,
                            67,
                            71,
                            5,
                            79,
                            83,
                            89,
                            97,
                            7
                        ]
                    ]
                ]
            }
        ],
        "Mbpp/624": [
            {
                "task_id": "Mbpp/624",
                "solution": "\ndef is_upper(s):\n    return s.upper()\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/623": [
            {
                "task_id": "Mbpp/623",
                "solution": "\ndef nth_nums(lst, n):\n    return [x ** n for x in lst]\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/628": [
            {
                "task_id": "Mbpp/628",
                "solution": "\ndef replace_spaces(s: str) -> str:\n    return s.replace(' ', '%20')\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/629": [
            {
                "task_id": "Mbpp/629",
                "solution": "\ndef Split(numbers):\n    return [num for num in numbers if num % 2 == 0]\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/631": [
            {
                "task_id": "Mbpp/631",
                "solution": "\ndef replace_spaces(s):\n    return ''.join(['_' if c == ' ' else ' ' if c == '_' else c for c in s])\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/626": [
            {
                "task_id": "Mbpp/626",
                "solution": "\nimport math\n\ndef triangle_area(radius):\n    if radius <= 0:\n        return None\n    return (radius ** 2) * (3 ** 0.5)\n",
                "base_status": "fail",
                "plus_status": "fail",
                "base_fail_tests": [
                    [
                        -1
                    ]
                ],
                "plus_fail_tests": [
                    [
                        -0.5
                    ]
                ]
            }
        ],
        "Mbpp/632": [
            {
                "task_id": "Mbpp/632",
                "solution": "\ndef move_zero(lst):\n    non_zeroes = [x for x in lst if x != 0]\n    zeroes = [0] * (len(lst) - len(non_zeroes))\n    return non_zeroes + zeroes\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/630": [
            {
                "task_id": "Mbpp/630",
                "solution": "\ndef get_coordinates(coord):\n    x, y = coord\n    adjacent_coords = []\n    for i in range(x-1, x+2):\n        for j in range(y-1, y+2):\n            adjacent_coords.append([i, j])\n    return adjacent_coords\n",
                "base_status": "pass",
                "plus_status": "fail",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/633": [
            {
                "task_id": "Mbpp/633",
                "solution": "\ndef pair_xor_Sum(arr, n):\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/637": [
            {
                "task_id": "Mbpp/637",
                "solution": "\ndef noprofit_noloss(cost_price, selling_price):\n    return cost_price == selling_price\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/638": [
            {
                "task_id": "Mbpp/638",
                "solution": "\nimport math\n\ndef wind_chill(velocity, temperature):\n    if velocity < 4.8:\n        return temperature\n    else:\n        wci = 13.12 + 0.6215 * temperature - 11.37 * (velocity ** 0.16) + 0.3965 * temperature * (velocity ** 0.16)\n        return math.ceil(wci)\n",
                "base_status": "fail",
                "plus_status": "fail",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/643": [
            {
                "task_id": "Mbpp/643",
                "solution": "\ndef text_match_wordz_middle(text):\n    if 'z' in text[1:-1]:\n        return True\n    return False\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/639": [
            {
                "task_id": "Mbpp/639",
                "solution": "\ndef sample_nam(names):\n    return sum(len(name) for name in names if name[0].isupper())\n",
                "base_status": "pass",
                "plus_status": "fail",
                "base_fail_tests": [],
                "plus_fail_tests": [
                    [
                        []
                    ]
                ]
            }
        ],
        "Mbpp/641": [
            {
                "task_id": "Mbpp/641",
                "solution": "\ndef is_nonagonal(n):\n    return n * (7 * n - 5) // 2\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/644": [
            {
                "task_id": "Mbpp/644",
                "solution": "\ndef reverse_Array_Upto_K(arr, k):\n    if k > len(arr):\n        return \"Invalid position\"\n    return arr[:k][::-1] + arr[k:]\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/720": [
            {
                "task_id": "Mbpp/720",
                "solution": "\ndef add_dict_to_tuple(tup, dct):\n    return tup + (dct,)\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/635": [
            {
                "task_id": "Mbpp/635",
                "solution": "\ndef heap_sort(arr):\n    def heapify(arr, n, i):\n        largest = i\n        l = 2 * i + 1\n        r = 2 * i + 2\n\n        if l < n and arr[i] < arr[l]:\n            largest = l\n\n        if r < n and arr[largest] < arr[r]:\n            largest = r\n\n        if largest != i:\n            arr[i], arr[largest] = arr[largest], arr[i]\n            heapify(arr, n, largest)\n\n    n = len(arr)\n\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n\n    for i in range(n-1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        heapify(arr, i, 0)\n\n    return arr\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/622": [
            {
                "task_id": "Mbpp/622",
                "solution": "\ndef get_median(arr1, arr2, n):\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 2:\n        return (max(arr1[0], arr2[0]) + min(arr1[1], arr2[1])) / 2\n\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n\n    if m1 == m2:\n        return m1\n\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(arr1[n//2:], arr2[:n//2], n - n//2)\n        return get_median(arr1[n//2:], arr2[:n//2 + 1], n - n//2)\n\n    if n % 2 == 0:\n        return get_median(arr1[:n//2], arr2[n//2:], n - n//2)\n    return get_median(arr1[:n//2 + 1], arr2[n//2:], n - n//2)\n\ndef median(arr, n):\n    if n % 2 == 0:\n        return (arr[n//2] + arr[n//2 - 1]) / 2\n    return arr[n//2]\n",
                "base_status": "pass",
                "plus_status": "fail",
                "base_fail_tests": [],
                "plus_fail_tests": [
                    [
                        [
                            1,
                            1,
                            2,
                            3
                        ],
                        [
                            3,
                            3,
                            4,
                            5
                        ],
                        4
                    ]
                ]
            }
        ],
        "Mbpp/722": [
            {
                "task_id": "Mbpp/722",
                "solution": "\ndef filter_data(students, min_height, min_weight):\n    return {name: (height, weight) for name, (height, weight) in students.items() if height > min_height and weight > min_weight}\n",
                "base_status": "fail",
                "plus_status": "fail",
                "base_fail_tests": [],
                "plus_fail_tests": [
                    [
                        {},
                        5.7,
                        64
                    ]
                ]
            }
        ],
        "Mbpp/721": [
            {
                "task_id": "Mbpp/721",
                "solution": "\ndef maxAverageOfPath(matrix):\n    N = len(matrix)\n    dp = [[0] * N for _ in range(N)]\n    dp[0][0] = matrix[0][0]\n\n    for i in range(1, N):\n        dp[i][0] = dp[i-1][0] + matrix[i][0]\n        dp[0][i] = dp[0][i-1] + matrix[0][i]\n\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + matrix[i][j]\n\n    total_cost = dp[N-1][N-1]\n    num_cells = 2 * N - 1\n    return total_cost / num_cells\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/723": [
            {
                "task_id": "Mbpp/723",
                "solution": "\ndef count_same_pair(list1, list2):\n    return sum(1 for i in range(len(list1)) if list1[i] == list2[i])\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/728": [
            {
                "task_id": "Mbpp/728",
                "solution": "\ndef sum_list(list1, list2):\n    return [a + b for a, b in zip(list1, list2)]\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/732": [
            {
                "task_id": "Mbpp/732",
                "solution": "\ndef replace_specialchar(text):\n    return text.replace(' ', ':').replace(',', ':').replace('.', ':')\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/726": [
            {
                "task_id": "Mbpp/726",
                "solution": "\ndef multiply_elements(t):\n    return tuple(t[i] * t[i+1] for i in range(len(t) - 1))\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/731": [
            {
                "task_id": "Mbpp/731",
                "solution": "\nimport math\n\ndef lateralsurface_cone(r, h):\n    slant_height = math.sqrt(r**2 + h**2)\n    lateral_surface_area = math.pi * r * slant_height\n    return lateral_surface_area\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/725": [
            {
                "task_id": "Mbpp/725",
                "solution": "\nimport re\n\ndef extract_quotation(s):\n    return re.findall(r'\"(.*?)\"', s)\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/724": [
            {
                "task_id": "Mbpp/724",
                "solution": "\ndef power_base_sum(base, power):\n    result = base ** power\n    return sum(int(digit) for digit in str(result))\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/730": [
            {
                "task_id": "Mbpp/730",
                "solution": "\ndef consecutive_duplicates(lst):\n    if not lst:\n        return []\n    result = [lst[0]]\n    for i in range(1, len(lst)):\n        if lst[i] != lst[i - 1]:\n            result.append(lst[i])\n    return result\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/733": [
            {
                "task_id": "Mbpp/733",
                "solution": "\ndef find_first_occurrence(arr, target):\n    left, right = 0, len(arr) - 1\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            result = mid\n            right = mid - 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/734": [
            {
                "task_id": "Mbpp/734",
                "solution": "\ndef sum_Of_Subarray_Prod(lst):\n    n = len(lst)\n    total_sum = 0\n    for i in range(n):\n        product = 1\n        for j in range(i, n):\n            product *= lst[j]\n            total_sum += product\n    return total_sum\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/740": [
            {
                "task_id": "Mbpp/740",
                "solution": "\ndef tuple_to_dict(tpl):\n    return {tpl[i]: tpl[i + 1] for i in range(0, len(tpl), 2)}\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/737": [
            {
                "task_id": "Mbpp/737",
                "solution": "\nimport re\n\ndef check_str(s):\n    return bool(re.match(r'^[aeiouAEIOU]', s))\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/239": [
            {
                "task_id": "Mbpp/239",
                "solution": "\ndef get_total_number_of_sequences(m, n):\n    def count_sequences(current, length):\n        if length == n:\n            return 1\n        total = 0\n        for next_num in range(current * 2, m + 1):\n            total += count_sequences(next_num, length + 1)\n        return total\n\n    total_sequences = 0\n    for start in range(1, m + 1):\n        total_sequences += count_sequences(start, 1)\n    \n    return total_sequences\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/741": [
            {
                "task_id": "Mbpp/741",
                "solution": "\ndef all_Characters_Same(s):\n    return len(set(s)) == 1\n",
                "base_status": "pass",
                "plus_status": "fail",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/742": [
            {
                "task_id": "Mbpp/742",
                "solution": "\nimport math\n\ndef area_tetrahedron(side_length):\n    return math.sqrt(3) * side_length ** 2\n\n# Test\nassert area_tetrahedron(3) == 15.588457268119894\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/736": [
            {
                "task_id": "Mbpp/736",
                "solution": "\ndef left_insertion(arr, x):\n    left, right = 0, len(arr)\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid\n    return left\n\n# Test case\nassert left_insertion([1, 2, 4, 5], 6) == 4\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/735": [
            {
                "task_id": "Mbpp/735",
                "solution": "\ndef toggle_middle_bits(n):\n    if n == 0:\n        return 0\n    num_bits = n.bit_length()\n    if num_bits <= 2:\n        return n\n    mask = (1 << (num_bits - 2)) - 1\n    mask <<= 1\n    return n ^ mask\n\n# Test case\nassert toggle_middle_bits(9) == 15\n",
                "base_status": "pass",
                "plus_status": "fail",
                "base_fail_tests": [],
                "plus_fail_tests": [
                    [
                        31578
                    ]
                ]
            }
        ],
        "Mbpp/744": [
            {
                "task_id": "Mbpp/744",
                "solution": "\ndef check_none(tup):\n    return any(x is None for x in tup)\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/743": [
            {
                "task_id": "Mbpp/743",
                "solution": "\ndef rotate_right(lst, k):\n    k = k % len(lst)  # In case k is greater than the length of the list\n    return lst[-k:] + lst[:-k]\n",
                "base_status": "pass",
                "plus_status": "fail",
                "base_fail_tests": [],
                "plus_fail_tests": [
                    [
                        [
                            "apple",
                            2,
                            true,
                            [
                                1,
                                2,
                                3
                            ]
                        ],
                        2
                    ]
                ]
            }
        ],
        "Mbpp/750": [
            {
                "task_id": "Mbpp/750",
                "solution": "\ndef add_tuple(lst, tpl):\n    return lst + list(tpl)\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/748": [
            {
                "task_id": "Mbpp/748",
                "solution": "\ndef capital_words_spaces(s):\n    result = []\n    for char in s:\n        if char.isupper() and result:\n            result.append(' ')\n        result.append(char)\n    return ''.join(result)\n",
                "base_status": "pass",
                "plus_status": "fail",
                "base_fail_tests": [],
                "plus_fail_tests": [
                    [
                        ""
                    ]
                ]
            }
        ],
        "Mbpp/749": [
            {
                "task_id": "Mbpp/749",
                "solution": "\ndef sort_numeric_strings(lst):\n    return sorted(lst, key=int)\n\n# Test case\nassert sort_numeric_strings(['4','12','45','7','0','100','200','-12','-500']) == [-500, -12, 0, 4, 7, 12, 45, 100, 200]\n",
                "base_status": "fail",
                "plus_status": "fail",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/751": [
            {
                "task_id": "Mbpp/751",
                "solution": "\ndef check_min_heap(arr):\n    n = len(arr)\n    for i in range((n - 2) // 2 + 1):\n        if arr[i] > arr[2 * i + 1]:\n            return False\n        if 2 * i + 2 < n and arr[i] > arr[2 * i + 2]:\n            return False\n    return True\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/745": [
            {
                "task_id": "Mbpp/745",
                "solution": "\ndef divisible_by_digits(startnum, endnum):\n    def is_divisible_by_digits(num):\n        for digit in str(num):\n            if digit == '0' or num % int(digit) != 0:\n                return False\n        return True\n\n    result = []\n    for num in range(startnum, endnum + 1):\n        if is_divisible_by_digits(num):\n            result.append(num)\n    return result\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/753": [
            {
                "task_id": "Mbpp/753",
                "solution": "\ndef min_k(records, k):\n    return sorted(records, key=lambda x: x[1])[:k]\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/760": [
            {
                "task_id": "Mbpp/760",
                "solution": "\ndef unique_Element(lst):\n    return len(set(lst)) == 1\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/757": [
            {
                "task_id": "Mbpp/757",
                "solution": "\ndef count_reverse_pairs(string_list):\n    count = 0\n    seen = set()\n    for s in string_list:\n        if s[::-1] in seen:\n            count += 1\n        seen.add(s)\n    return count\n\nassert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"]) == 2\n",
                "base_status": "pass",
                "plus_status": "fail",
                "base_fail_tests": [],
                "plus_fail_tests": [
                    [
                        [
                            "ab",
                            "ba",
                            "dc",
                            "ef",
                            "fe",
                            "gh",
                            "hg",
                            "ji",
                            "fe"
                        ]
                    ]
                ]
            }
        ],
        "Mbpp/739": [
            {
                "task_id": "Mbpp/739",
                "solution": "\ndef find_Index(n):\n    def is_triangular(num):\n        x = (8 * num + 1) ** 0.5\n        return x == int(x)\n    \n    index = 1\n    while True:\n        triangular_number = index * (index + 1) // 2\n        if len(str(triangular_number)) == n:\n            return index\n        index += 1\n",
                "base_status": "pass",
                "plus_status": "fail",
                "base_fail_tests": [],
                "plus_fail_tests": [
                    [
                        1
                    ]
                ]
            }
        ],
        "Mbpp/764": [
            {
                "task_id": "Mbpp/764",
                "solution": "\ndef number_ctr(s):\n    return sum(c.isdigit() for c in s)\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/762": [
            {
                "task_id": "Mbpp/762",
                "solution": "\ndef check_monthnumber_number(month):\n    if month in [4, 6, 9, 11]:\n        return True\n    else:\n        return False\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/755": [
            {
                "task_id": "Mbpp/755",
                "solution": "\ndef second_smallest(numbers):\n    if len(numbers) < 2:\n        return None\n    first, second = float('inf'), float('inf')\n    for number in numbers:\n        if number <= first:\n            first, second = number, first\n        elif number < second:\n            second = number\n    return second if second != float('inf') else None\n",
                "base_status": "fail",
                "plus_status": "fail",
                "base_fail_tests": [
                    [
                        [
                            1,
                            2,
                            -8,
                            -2,
                            0,
                            -2
                        ]
                    ]
                ],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/759": [
            {
                "task_id": "Mbpp/759",
                "solution": "\ndef is_decimal(s):\n    if s.count('.') != 1:\n        return False\n    integer_part, decimal_part = s.split('.')\n    if not integer_part.isdigit() or not decimal_part.isdigit():\n        return False\n    if len(decimal_part) != 2:\n        return False\n    return True\n",
                "base_status": "pass",
                "plus_status": "fail",
                "base_fail_tests": [],
                "plus_fail_tests": [
                    [
                        ""
                    ]
                ]
            }
        ],
        "Mbpp/758": [
            {
                "task_id": "Mbpp/758",
                "solution": "\ndef unique_sublists(lst):\n    result = {}\n    for sublist in lst:\n        tuple_sublist = tuple(sublist)\n        if tuple_sublist in result:\n            result[tuple_sublist] += 1\n        else:\n            result[tuple_sublist] = 1\n    return result\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/763": [
            {
                "task_id": "Mbpp/763",
                "solution": "\ndef find_min_diff(arr, n):\n    if n < 2:\n        return 0\n    \n    arr = sorted(arr)\n    min_diff = float('inf')\n    \n    for i in range(n - 1):\n        diff = arr[i + 1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    \n    return min_diff\n\n# Example usage\nassert find_min_diff((1, 5, 3, 19, 18, 25), 6) == 1\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/767": [
            {
                "task_id": "Mbpp/767",
                "solution": "\ndef get_pairs_count(arr, sum):\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/769": [
            {
                "task_id": "Mbpp/769",
                "solution": "\ndef Diff(list1, list2):\n    return [item for item in list1 if item not in list2]\n",
                "base_status": "fail",
                "plus_status": "fail",
                "base_fail_tests": [],
                "plus_fail_tests": [
                    [
                        [],
                        []
                    ]
                ]
            }
        ],
        "Mbpp/766": [
            {
                "task_id": "Mbpp/766",
                "solution": "\ndef pair_wise(lst):\n    return [(lst[i], lst[i+1]) for i in range(len(lst)-1)]\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/772": [
            {
                "task_id": "Mbpp/772",
                "solution": "\ndef remove_length(s, k):\n    return ' '.join([word for word in s.split() if len(word) != k])\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/777": [
            {
                "task_id": "Mbpp/777",
                "solution": "\ndef find_sum(lst):\n    return sum(set(lst))\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/771": [
            {
                "task_id": "Mbpp/771",
                "solution": "\ndef check_expression(expression):\n    stack = []\n    matching_bracket = {')': '(', '}': '{', ']': '['}\n    \n    for char in expression:\n        if char in matching_bracket.values():\n            stack.append(char)\n        elif char in matching_bracket.keys():\n            if stack == [] or matching_bracket[char] != stack.pop():\n                return False\n        else:\n            continue\n    \n    return stack == []\n\nassert check_expression(\"{()}[{}]\") == True\n",
                "base_status": "pass",
                "plus_status": "fail",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/752": [
            {
                "task_id": "Mbpp/752",
                "solution": "\ndef jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2 * jacobsthal_num(n-2)\n",
                "base_status": "pass",
                "plus_status": "fail",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/770": [
            {
                "task_id": "Mbpp/770",
                "solution": "\ndef odd_num_sum(n):\n    return sum((2*i + 1)**4 for i in range(n))\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/775": [
            {
                "task_id": "Mbpp/775",
                "solution": "\ndef odd_position(lst):\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            return False\n    return True\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/780": [
            {
                "task_id": "Mbpp/780",
                "solution": "\nfrom itertools import combinations\n\ndef find_combinations(tuple_list):\n    result = []\n    for (a, b), (c, d) in combinations(tuple_list, 2):\n        result.append((a + c, b + d))\n    return result\n",
                "base_status": "fail",
                "plus_status": "fail",
                "base_fail_tests": [],
                "plus_fail_tests": [
                    [
                        [
                            [
                                100,
                                200
                            ],
                            [
                                300,
                                400
                            ],
                            [
                                500,
                                600
                            ],
                            [
                                700,
                                800
                            ],
                            [
                                900,
                                1000
                            ]
                        ]
                    ]
                ]
            }
        ],
        "Mbpp/778": [
            {
                "task_id": "Mbpp/778",
                "solution": "\ndef pack_consecutive_duplicates(lst):\n    if not lst:\n        return []\n    \n    packed_list = []\n    current_sublist = [lst[0]]\n    \n    for item in lst[1:]:\n        if item == current_sublist[-1]:\n            current_sublist.append(item)\n        else:\n            packed_list.append(current_sublist)\n            current_sublist = [item]\n    \n    packed_list.append(current_sublist)\n    return packed_list\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/785": [
            {
                "task_id": "Mbpp/785",
                "solution": "\ndef tuple_str_int(s):\n    return tuple(map(int, s.strip('()').split(', ')))\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/786": [
            {
                "task_id": "Mbpp/786",
                "solution": "\ndef right_insertion(arr, value):\n    left, right = 0, len(arr)\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] <= value:\n            left = mid + 1\n        else:\n            right = mid\n    return left\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/765": [
            {
                "task_id": "Mbpp/765",
                "solution": "\ndef is_polite(n):\n    count = 0\n    num = 1\n    while count < n:\n        num += 1\n        if bin(num).count('1') > 1:\n            count += 1\n    return num\n",
                "base_status": "pass",
                "plus_status": "fail",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/788": [
            {
                "task_id": "Mbpp/788",
                "solution": "\ndef new_tuple(lst, string):\n    return tuple(lst) + (string,)\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/782": [
            {
                "task_id": "Mbpp/782",
                "solution": "\ndef odd_length_sum(arr):\n    total_sum = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i, n, 2):\n            total_sum += sum(arr[i:j+1])\n    return total_sum\n\n# Test case\nassert odd_length_sum([1, 2, 4]) == 14\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/784": [
            {
                "task_id": "Mbpp/784",
                "solution": "\ndef mul_even_odd(lst):\n    first_even = None\n    first_odd = None\n    \n    for num in lst:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    \n    if first_even is not None and first_odd is not None:\n        return first_even * first_odd\n    else:\n        return None\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/790": [
            {
                "task_id": "Mbpp/790",
                "solution": "\ndef even_position(lst):\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 != 0:\n            return False\n    return True\n",
                "base_status": "pass",
                "plus_status": "fail",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/794": [
            {
                "task_id": "Mbpp/794",
                "solution": "\nimport re\n\ndef text_starta_endb(text):\n    pattern = r'^a.*b$'\n    return bool(re.match(pattern, text))\n",
                "base_status": "pass",
                "plus_status": "fail",
                "base_fail_tests": [],
                "plus_fail_tests": [
                    [
                        "axyz123bb"
                    ]
                ]
            }
        ],
        "Mbpp/791": [
            {
                "task_id": "Mbpp/791",
                "solution": "\ndef remove_nested(tpl):\n    return tuple(item for item in tpl if not isinstance(item, tuple))\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/773": [
            {
                "task_id": "Mbpp/773",
                "solution": "\ndef occurance_substring(main_string, sub_string):\n    positions = []\n    start = 0\n    while True:\n        start = main_string.find(sub_string, start)\n        if start == -1:\n            break\n        positions.append(start)\n        start += len(sub_string)\n    \n    if not positions:\n        return None\n    \n    return (sub_string, positions[0], positions[-1] + len(sub_string) - 1)\n",
                "base_status": "fail",
                "plus_status": "fail",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/796": [
            {
                "task_id": "Mbpp/796",
                "solution": "\ndef return_sum(d):\n    return sum(d.values())\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/754": [
            {
                "task_id": "Mbpp/754",
                "solution": "\ndef extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(min(len(l1), len(l2), len(l3))):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/787": [
            {
                "task_id": "Mbpp/787",
                "solution": "\nimport re\n\ndef text_match_three(text):\n    pattern = r'ab{3}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n\n# Example usage\nassert not text_match_three(\"ac\")\nassert text_match_three(\"abbb\")\nassert not text_match_three(\"abbbb\")\nassert not text_match_three(\"a\")\nassert not text_match_three(\"abb\")\n",
                "base_status": "fail",
                "plus_status": "fail",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/799": [
            {
                "task_id": "Mbpp/799",
                "solution": "\ndef left_rotate(n, d):\n    return (n << d) | (n >> (32 - d))\n\n# Test case\nassert left_rotate(16, 2) == 64\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/797": [
            {
                "task_id": "Mbpp/797",
                "solution": "\ndef sum_in_range(l, r):\n    return sum(i for i in range(l, r + 1) if i % 2 != 0)\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/793": [
            {
                "task_id": "Mbpp/793",
                "solution": "\ndef last(arr, target):\n    left, right = 0, len(arr) - 1\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            result = mid\n            left = mid + 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result\n\nassert last([1, 2, 3], 1) == 0\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/798": [
            {
                "task_id": "Mbpp/798",
                "solution": "\ndef _sum(arr):\n    return sum(arr)\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/792": [
            {
                "task_id": "Mbpp/792",
                "solution": "\ndef count_list(lists):\n    return len(lists)\n",
                "base_status": "pass",
                "plus_status": "fail",
                "base_fail_tests": [],
                "plus_fail_tests": [
                    [
                        [
                            [
                                [
                                    4,
                                    5,
                                    [
                                        6,
                                        7,
                                        [
                                            8,
                                            9
                                        ]
                                    ]
                                ]
                            ]
                        ]
                    ]
                ]
            }
        ],
        "Mbpp/800": [
            {
                "task_id": "Mbpp/800",
                "solution": "\ndef remove_all_spaces(s):\n    return s.replace(' ', '')\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/781": [
            {
                "task_id": "Mbpp/781",
                "solution": "\ndef count_divisors(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0\n\nassert count_divisors(10)\n",
                "base_status": "pass",
                "plus_status": "fail",
                "base_fail_tests": [],
                "plus_fail_tests": [
                    [
                        1000000
                    ]
                ]
            }
        ],
        "Mbpp/805": [
            {
                "task_id": "Mbpp/805",
                "solution": "\ndef max_sum_list(lists):\n    return max(lists, key=sum)\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/801": [
            {
                "task_id": "Mbpp/801",
                "solution": "\ndef test_three_equal(a, b, c):\n    if a == b == c:\n        return 3\n    elif a == b or b == c or a == c:\n        return 2\n    else:\n        return 0\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/804": [
            {
                "task_id": "Mbpp/804",
                "solution": "\ndef is_product_even(numbers):\n    product = 1\n    for number in numbers:\n        product *= number\n        if product % 2 == 0:\n            return True\n    return False\n\nassert is_product_even([1, 2, 3]) == True\nassert is_product_even([1, 3, 5]) == False\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/803": [
            {
                "task_id": "Mbpp/803",
                "solution": "\nimport math\n\ndef is_perfect_square(n):\n    if n < 0:\n        return False\n    root = math.isqrt(n)\n    return root * root == n\n\nassert not is_perfect_square(10)\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/808": [
            {
                "task_id": "Mbpp/808",
                "solution": "\ndef check_K(tup, k):\n    return k in tup\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/809": [
            {
                "task_id": "Mbpp/809",
                "solution": "\ndef check_smaller(tuple1, tuple2):\n    return all(a > b for a, b in zip(tuple1, tuple2))\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ],
        "Mbpp/806": [
            {
                "task_id": "Mbpp/806",
                "solution": "\ndef max_run_uppercase(s):\n    max_run = 0\n    current_run = 0\n    \n    for char in s:\n        if char.isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n    \n    return max_run\n\n# Test case\nassert max_run_uppercase('GeMKSForGERksISBESt') == 5\n",
                "base_status": "pass",
                "plus_status": "fail",
                "base_fail_tests": [],
                "plus_fail_tests": [
                    [
                        "aA"
                    ]
                ]
            }
        ],
        "Mbpp/807": [
            {
                "task_id": "Mbpp/807",
                "solution": "\ndef first_odd(numbers):\n    for number in numbers:\n        if number % 2 != 0:\n            return number\n    return None\n",
                "base_status": "pass",
                "plus_status": "pass",
                "base_fail_tests": [],
                "plus_fail_tests": []
            }
        ]
    }
}